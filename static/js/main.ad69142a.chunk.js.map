{"version":3,"sources":["types/bepswap.ts","settings/constants.ts","helpers/apiHelper.ts","helpers/AsyncFunc.js","env.ts","redux/app/const.ts","helpers/styleHelper.ts","helpers/stringHelper.ts","types/generated/midgard/index.ts","helpers/utils/walletUtils.ts","types/generated/midgard/api.ts","types/generated/midgard/base.ts","../node_modules/@binance-chain/javascript-sdk/lib/ledger sync","helpers/binanceHelper.ts","redux/binance/actions.ts","redux/midgard/utils.ts","redux/wallet/actions.ts","helpers/webStorageHelper.ts","redux/midgard/actions.ts","settings/assetData.ts","components/utility/webfontloader/index.ts","components/utility/webfontloader/webfontloader.tsx","redux/app/reducer.ts","redux/binance/reducer.ts","redux/midgard/reducer.ts","redux/wallet/reducer.ts","redux/reducers.ts","redux/app/saga.ts","helpers/assetHelper.ts","redux/binance/saga.ts","redux/midgard/saga.ts","redux/wallet/saga.ts","redux/sagas.ts","redux/store.ts","assets/font/Exo2-Regular.otf","settings/appStyle/appStyle.tsx","router.tsx","App.tsx","serviceWorker.js","index.tsx","helpers/envHelper.ts"],"names":["SwapType","Nothing","DEFAULT_BN_FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","CONFIRM_DISMISS_TIME","TX_PAGE_LIMIT","TX_PUBLIC_PAGE_LIMIT","BINANCE_TESTNET_URL","envOrDefault","process","BINANCE_MAINNET_URL","MIDGARD_TEST_API","MIDGARD_CHAOSNET_API","getMidgardBaseURL","isMainnet","THORCHAIN_API_URL","getThorchainBaseURL","BINANCE_TX_BASE_URL","getBinanceMainnetURL","url","getBinanceURL","getBinanceTestnetURL","axiosRequest","axios","create","request","binanceRequest","rateLimit","maxRequests","perMilliseconds","getHeaders","Accept","getMidgardDefaultApi","basePath","DefaultApi","getHostnameFromUrl","u","parsed","hostname","asyncComponent","importComponent","props","state","component","Nprogress","start","this","mounted","Component","default","done","setState","type","rows","ready","NET","window","location","isTestnet","includes","isChaosnet","getNet","MAIN","TEST","CHAOS","DEV","BINANCE_NET","CHAIN_ID","asgardexBncClient","binanceClient","network","bncClient","getBncClient","MAX_VALUE","MIN_VALUE","mediaQueries","xs","sm","md","lg","xl","xxl","media","Object","keys","reduce","acc","segment","css","cleanTag","tagList","React","createElement","omit","getSymbolPair","symbolPair","source","split","toUpperCase","target","getTickerFormat","symbol","toLowerCase","isShortFormatPossible","amount","decimal","Number","toFixed","getShortAmount","getShortTokenAmount","isEqualTo","formatTokenAmount","getShortAssetAmount","formatBaseAsAssetAmount","getTokenName","tokenList","assetName","token","find","item","name","emptyString","verifyPrivateKey","keystore","password","a","privateKey","crypto","getPrivateKeyFromKeyStore","setPrivateKey","address","getAddressFromPrivateKey","getPrefix","error","console","isBEP8Token","symbolSuffix","length","PoolDetailStatusEnum","TxDetailsStatusEnum","TxDetailsTypeEnum","BASE_PATH","replace","BaseAPI","configuration","globalAxios","RequiredError","field","msg","Error","DefaultApiAxiosParamCreator","getAssetInfo","asset","options","undefined","baseOptions","localVarPath","localVarUrlObj","globalImportUrl","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","search","headers","getEarningDetail","pool","encodeURIComponent","String","getHealth","getNetworkData","getNodes","getPoolAggChanges","interval","from","to","getPools","status","getPoolsDetails","view","getStakersAddressAndAssetData","getStakersAddressData","getStakersData","getStats","getStatsChanges","getThorchainProxiedConstants","getThorchainProxiedEndpoints","getThorchainProxiedLastblock","getThorchainProxiedQueue","getTotalVolChanges","getTxDetails","offset","limit","txid","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","webpackEmptyContext","req","e","code","resolve","module","exports","id","getTransferFeeds","fees","dataItem","v","msg_type","fee","fee_for","isFee","fixed_fee_params","multi_transfer_fee","isTransferFee","single","multi","baseAmount","isAddress","value","substr","getBinanceData","getBinanceTokens","getBinanceTokensSuccess","payload","getBinanceTokensFailed","getBinanceMarkets","getBinanceMarketsSuccess","getBinanceMarketsFailed","getBinanceTickerSuccess","getBinanceTickerFailed","getBinanceAccountSuccess","getBinanceAccountFailed","getBinanceTransactionsSuccess","getBinanceTransactionsFailed","getBinanceOpenOrdersSuccess","getBinanceOpenOrdersFailed","getBinanceFees","net","getBinanceTransferFeesResult","result","subscribeBinanceTransfers","subscribeBinanceTransfersFailed","unSubscribeBinanceTransfers","binanceTransfersMessageReceived","event","getAssetSymbolFromPayload","getAssetFromString","getBNBPoolAddress","endpoints","current","endpoint","chain","getPoolAddress","getAssetDetailIndex","assets","assetDataIndex","forEach","assetInfo","getPriceIndex","poolData","baseAssetSymbol","baseTokenPrice","bn","RUNE_SYMBOL","baseTokenInfo","price","priceDataIndex","div","assetSymbol","priceRune","multipliedBy","s","ticker","data","getOrderedPoolString","pools","sort","b","localeCompare","join","getEoDTime","moment","set","hour","minute","second","millisecond","unix","getWeekAgoTime","subtract","saveWallet","forgetWallet","refreshBalance","refreshBalanceSuccess","refreshBalanceFailed","refreshStakes","refreshStakesSuccess","refreshStakesFailed","refreshWallet","user","sessionStorage","setItem","JSON","stringify","getWallet","userObj","getItem","parse","wallet","clearWallet","removeItem","saveBasePriceAsset","getBasePriceAsset","saveTheme","themeType","localStorage","getTheme","ThemeType","DARK","saveBetaConfirm","hasConfirmed","getBetaConfirm","getPoolsSuccess","getPoolsFailed","getPoolAssets","getPoolAssetsSuccess","getPoolAssetsFailed","getPoolData","getPoolDataSuccess","getPoolDataFailed","getPoolDetailByAsset","getPoolDetailByAssetSuccess","getPoolDetailByAssetFailed","getStakerPoolData","getStakerPoolDataSuccess","getStakerPoolDataFailed","getThorchainDataSuccess","getPoolAddressSuccess","getPoolAddressFailed","getRunePrice","setBasePriceAsset","setPriceIndex","getTx","getTxSuccess","getTxFailed","getApiBasePathPending","getApiBasePathFailed","getApiBasePathSuccess","getStatsSuccess","getStatsFailed","getPoolEarningDetails","getPoolEarningDetailsSuccess","getPoolEarningDetailsFailed","getRTStats","getRTStatsSuccess","getRTStatsFailed","getRTAggregateByAsset","getRTAggregateByAssetSuccess","getRTAggregateByAssetFailed","getNetworkInfo","getNetworkInfoSuccess","getNetworkInfoFailed","BUSD_SYMBOL","tokenNames","BNB","mainnet","testnet","RUNE","LOK","LOKI","ERD","FSN","FTM","TCAN","CAN","TOMOB","WebFontLoader","config","onStatus","children","useState","setStatus","handleLoading","handleActive","handleInactive","useEffect","WebFont","load","loading","active","inactive","defaultTheme","valueInRange","initState","txStatus","modal","txData","sourceAsset","targetAsset","sourceAmount","tokenAmount","targetAmount","txResult","reducer","action","currentValue","nextValue","startTime","hash","marketList","account","accountSequence","transactions","openOrders","transferFees","initial","loadingToken","loadingMarket","loadingTicker","wsError","wsTransferEvent","sequence","pending","failure","success","basePriceAsset","assetArray","poolAddressData","bnbPoolAddress","poolAddress","poolAddressLoading","poolDetailedData","poolEarningDetails","poolLoading","poolDataLoading","poolDetailedDataLoading","poolEarningDetailsLoading","rtStats","allTimeData","weekData","rtStatsLoading","stats","dailyActiveUsers","dailyTx","monthlyActiveUsers","monthlyTx","poolCount","totalAssetBuys","totalAssetSells","totalDepth","totalEarned","totalStakeTx","totalStaked","totalTx","totalUsers","totalVolume","totalVolume24hr","totalWithdrawTx","stakerPoolData","stakerPoolDataLoading","stakerPoolDataError","runePrice","priceIndex","assetLoading","statsLoading","txRefreshing","rtAggregateLoading","rtAggregate","apiBasePath","thorchain","constants","lastBlock","mimir","queue","swap","outbound","networkInfo","networkInfoLoading","assetDetailIndex","_uniqWith","assetDetails","_isEqual","poolEarningDetail","poolDetail","newStakerPoolData","refresh","assetData","assetValue","stakeData","loadingAssets","App","Wallet","Binance","Midgard","getBEPSwapData","getPoolViewData","getPoolDetailViewData","refreshSwapData","refreshStakeData","refreshTransactionData","rootSaga","takeEvery","put","midgardActions","walletActions","binanceActions","take","select","walletAddress","all","fork","networkType","key","getBinanceTicker","getBinanceAccount","getBinanceTransactions","getBinanceOpenOrders","tryGetBinanceFees","trySubscribeBinanceTransfers","actions","params","call","tokenName","endTime","i","BINANCE_MAX_RETRY","delay","TESTNET_WS_URI","MAINET_WS_URI","createBinanceTransfersChannel","ws","eventChannel","emit","onOpenHandler","onMessageHandler","onCloseHandler","_","END","onErrorHandler","addEventListener","removeEventListener","close","binanceTransfersChannel","destroyBinanceTransfersChannel","WebSocket","channelEvent","send","topic","WS_MAX_RETRY","getApiBasePath","tryGetPools","tryGetStats","tryGetAssets","tryGetNetworkInfo","tryGetPoolDataFromAsset","tryGetStakerPoolData","tryGetPoolAddressRequest","tryGetTx","tryGetRTAggregateByAsset","trygetRTStats","tryGetPoolEarningDetails","noCache","baseAPIURL","api","fn","byzantine","midgardApi","context","poolAssets","MIDGARD_MAX_RETRY","orderedPools","_isEmpty","assetsPayload","filteredPools","filter","getThorchainMimir","getThorchainQueue","log","sortedAssets","poolDetails","curPoolData","newPoolData","mergedPoolData","baseTokenTicker","assetId","response","getThorchainConstants","getThorchainLastBlock","txId","curTime","weekAgoTime","allTimeParams","weekParams","saveWalletSaga","forgetWalletSaga","getUserStakeData","tryRefreshStakes","tryGetUserStakeData","push","getBalance","balances","filteredBalance","balance","coins","map","coin","free","poolDetailMap","poolDataList","stakeDataList","userStakerData","poolUnits","runeDepth","stakeUnits","units","poolUnitsBN","bnOrZero","runeDepthBN","dividedBy","baseToToken","poolsArray","appSaga","walletSaga","binanceSaga","midgardSaga","history","createHistory","sagaMiddleware","createSagaMiddleware","routeMiddleware","routerMiddleware","middlewares","thunk","rootReducer","combineReducers","reducers","router","connectRouter","store","createStore","composeWithDevTools","applyMiddleware","run","fontConfig","custom","families","ThemedGlobalStyle","createGlobalStyle","palette","AppHolder","styled","normalFont","theme","transparentize","background","publicRoutes","path","exact","routes","connect","locale","en_US","singleRoute","otherProps","Main","isLight","useSelector","LIGHT","light","themes","dark","reduxStore","navigator","language","Boolean","match","BigNumber","FORMAT","noop","warn","ReactDOM","render","document","getElementById","serviceWorker","then","registration","unregister","env","defaultValue","COMMIT_HASH","$COMMIT_HASH"],"mappings":"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","file":"static/js/main.ad69142a.chunk.js","sourcesContent":["// This is just a dummy type to signal it has to be updated\r\n// It's needed to migrate all code to TS step by step\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type FixmeType = any;\r\n\r\nexport type Address = string;\r\nexport type AssetSymbol = string;\r\n\r\n// Very simple way to provide a `Maybe` thing\r\n// Again, it's not a Monad or so, just a very simple TS type :)\r\nexport type Nothing = null | undefined;\r\nexport const Nothing = null as Nothing;\r\nexport type Maybe<T> = T | Nothing;\r\n\r\nexport enum SwapType {\r\n  DOUBLE_SWAP = 'double_swap',\r\n  SINGLE_SWAP = 'single_swap',\r\n}\r\n\r\nexport type Pair = {\r\n  source: Maybe<string>;\r\n  target: Maybe<string>;\r\n};\r\n","import BigNumber from 'bignumber.js';\r\n\r\nexport const DEFAULT_BN_FORMAT: BigNumber.Format = {\r\n  // the decimal separator\r\n  decimalSeparator: '.',\r\n  // the grouping separator of the integer part\r\n  groupSeparator: ',',\r\n  // the primary grouping size of the integer part\r\n  groupSize: 3,\r\n  // the secondary grouping size of the integer part\r\n  secondaryGroupSize: 0,\r\n  // the grouping separator of the fraction part\r\n  fractionGroupSeparator: ' ',\r\n  // the grouping size of the fraction part\r\n  fractionGroupSize: 0,\r\n};\r\n\r\nexport const CONFIRM_DISMISS_TIME = 2000;\r\n\r\nexport const TX_PAGE_LIMIT = 20;\r\n\r\nexport const TX_PUBLIC_PAGE_LIMIT = 10;\r\n","import axios, { AxiosInstance } from 'axios';\r\nimport rateLimit from 'axios-rate-limit';\r\nimport * as url from 'url';\r\n\r\nimport { Maybe, Nothing } from 'types/bepswap';\r\nimport { DefaultApi } from 'types/generated/midgard';\r\n\r\nimport { isMainnet } from '../env';\r\nimport { envOrDefault } from './envHelper';\r\n\r\nexport const BINANCE_TESTNET_URL = envOrDefault(\r\n  process.env.REACT_APP_BINANCE_TESTNET_URL,\r\n  'https://testnet-dex.binance.org/api/v1',\r\n);\r\n\r\nexport const BINANCE_MAINNET_URL = envOrDefault(\r\n  process.env.REACT_APP_BINANCE_MAINNET_URL,\r\n  'https://dex.binance.org/api/v1',\r\n);\r\n\r\nexport const MIDGARD_TEST_API = envOrDefault(\r\n  process.env.REACT_APP_MIDGARD_TEST_API,\r\n  'https://midgard.bepswap.com',\r\n);\r\n\r\nexport const MIDGARD_CHAOSNET_API = envOrDefault(\r\n  process.env.REACT_APP_MIDGARD_CHAOSNET_API_URL,\r\n  'https://chaosnet-midgard.bepswap.com',\r\n);\r\n\r\nexport const getMidgardBaseURL = () => {\r\n  return isMainnet ? MIDGARD_CHAOSNET_API : MIDGARD_TEST_API;\r\n};\r\n\r\nconst THORCHAIN_API_URL = `${getMidgardBaseURL()}/v1/thorchain`;\r\n\r\nexport const getThorchainBaseURL = () => {\r\n  return THORCHAIN_API_URL;\r\n};\r\n\r\nexport const BINANCE_TX_BASE_URL = isMainnet\r\n  ? 'https://explorer.binance.org/tx/'\r\n  : 'https://testnet-explorer.binance.org/tx/';\r\n\r\nexport const getBinanceTestnetURL = (url: string) =>\r\n  `${BINANCE_TESTNET_URL}/${url}`;\r\nexport const getBinanceMainnetURL = (url: string) =>\r\n  `${BINANCE_MAINNET_URL}/${url}`;\r\n\r\nexport const getBinanceURL = (url: string) => {\r\n  if (isMainnet) {\r\n    return getBinanceMainnetURL(url);\r\n  }\r\n  return getBinanceTestnetURL(url);\r\n};\r\n\r\nconst defaultAxios = axios.create();\r\n\r\nexport const axiosRequest = defaultAxios.request;\r\n\r\n// create axios request for binance with api rate limit (1 request per second)\r\nconst binanceAxios = rateLimit(axios.create(), {\r\n  maxRequests: 1,\r\n  perMilliseconds: 1000,\r\n}) as AxiosInstance;\r\n\r\nexport const binanceRequest = binanceAxios.request;\r\n\r\nexport const getHeaders = () => ({\r\n  Accept: 'application/json',\r\n  'Content-Type': 'application/json',\r\n});\r\n\r\n/**\r\n * Helper to get `DefaultApi` instance for Midgard\r\n */\r\n\r\nexport const getMidgardDefaultApi = (basePath: string) =>\r\n  new DefaultApi({ basePath });\r\n\r\n/**\r\n * Helper to get `hostname` from url\r\n */\r\nexport const getHostnameFromUrl = (u: string): Maybe<string> => {\r\n  // we do need a runtime check here, TS can't help here, since u could be anything\r\n  if (typeof u === 'string') {\r\n    const parsed = url.parse(u, true);\r\n    return parsed?.hostname ?? Nothing;\r\n  }\r\n  return Nothing;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport ReactPlaceholder from 'react-placeholder';\r\n\r\nimport Nprogress from 'nprogress';\r\n\r\nimport 'nprogress/nprogress.css';\r\nimport 'react-placeholder/lib/reactPlaceholder.css';\r\n\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncFunc extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: null,\r\n      };\r\n    }\r\n\r\n    // eslint-disable-next-line react/sort-comp\r\n    UNSAFE_componentWillMount() {\r\n      Nprogress.start();\r\n    }\r\n\r\n    async componentDidMount() {\r\n      this.mounted = true;\r\n\r\n      const { default: Component } = await importComponent();\r\n\r\n      Nprogress.done();\r\n\r\n      if (this.mounted) {\r\n        this.setState({\r\n          component: <Component {...this.props} />,\r\n        });\r\n      }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.mounted = false;\r\n    }\r\n\r\n    render() {\r\n      const Component = this.state.component || <div />;\r\n\r\n      return (\r\n        <ReactPlaceholder type=\"text\" rows={7} ready={Component !== null}>\r\n          {Component}\r\n        </ReactPlaceholder>\r\n      );\r\n    }\r\n  }\r\n  return AsyncFunc;\r\n}\r\n","import {\r\n  Client as binanceClient,\r\n  BinanceClient,\r\n} from '@thorchain/asgardex-binance';\r\n\r\nconst prod_hostnames = ['bepswap.com'];\r\nconst dev_hostnames = ['localhost'];\r\n\r\nconst hostname = window.location.hostname;\r\n\r\nconst isMainnet =\r\n  process.env.REACT_APP_NET === 'mainnet' || prod_hostnames.includes(hostname);\r\nconst isTestnet =\r\n  process.env.REACT_APP_NET === 'testnet' || hostname.includes('testnet');\r\nconst isChaosnet = hostname.includes('chaosnet');\r\nconst isDevnet = dev_hostnames.includes(hostname);\r\n\r\nenum NET {\r\n  DEV = 'devnet',\r\n  TEST = 'testnet',\r\n  CHAOS = 'chaosnet',\r\n  MAIN = 'mainnet',\r\n}\r\n\r\nexport const getNet = (): NET => {\r\n  if (isMainnet) return NET.MAIN;\r\n  if (isTestnet) return NET.TEST;\r\n  if (isChaosnet) return NET.CHAOS;\r\n  return NET.DEV;\r\n};\r\n\r\nconst BINANCE_NET = isMainnet ? 'mainnet' : 'testnet';\r\nconst CHAIN_ID = isTestnet ? 'Binance-Chain-Nile' : 'Binance-Chain-Tigris';\r\n\r\nexport {\r\n  NET,\r\n  BINANCE_NET,\r\n  CHAIN_ID,\r\n  isDevnet,\r\n  isTestnet,\r\n  isChaosnet,\r\n  isMainnet,\r\n};\r\n\r\nexport const asgardexBncClient: BinanceClient = new binanceClient({\r\n  network: BINANCE_NET,\r\n});\r\n\r\nexport const bncClient = asgardexBncClient.getBncClient();\r\n","export const MAX_VALUE = 100;\r\nexport const MIN_VALUE = 0;\r\n","// TODO: Turn a few of these useless linting rules off?\r\n/* eslint-disable implicit-arrow-linebreak */\r\n\r\nimport React from 'react';\r\n\r\nimport { omit } from 'lodash';\r\nimport { css } from 'styled-components';\r\n\r\nimport { FixmeType } from 'types/bepswap';\r\n\r\ntype MediaQueriesType = {\r\n  [key: string]: string;\r\n};\r\n\r\n// SC Media breakpoints utility\r\nconst mediaQueries: MediaQueriesType = {\r\n  xs: '(min-width: 0px)',\r\n  sm: '(min-width: 576px)',\r\n  md: '(min-width: 768px)',\r\n  lg: '(min-width: 992px)',\r\n  xl: '(min-width: 1200px)',\r\n  xxl: '(min-width: 1600px)',\r\n};\r\n\r\ntype FirstArg = FixmeType;\r\ntype ExtraArgs = string[];\r\ntype ArgType = [FirstArg, ...ExtraArgs];\r\n\r\nexport const media: FixmeType = Object.keys(mediaQueries).reduce(\r\n  (acc, segment) => {\r\n    const styledMediaFunction = (...args: ArgType) => css`\r\n      @media ${mediaQueries[segment]} {\r\n        ${css(...args)};\r\n      }\r\n    `;\r\n    return {\r\n      ...acc,\r\n      [segment]: styledMediaFunction,\r\n    };\r\n  },\r\n  {},\r\n);\r\n\r\nexport const cleanTag = (component: FixmeType, tagList = ['']) => (\r\n  props: FixmeType,\r\n) => React.createElement(component, omit(props, tagList));\r\n\r\nexport function provideResponsiveShow({ showFrom }: { showFrom: string }) {\r\n  return (\r\n    showFrom &&\r\n    css`\r\n      display: none;\r\n      ${media[showFrom]`\r\n        display: block;\r\n      `}\r\n    `\r\n  );\r\n}\r\n\r\nexport function provideResponsiveHide({ hideFrom }: { hideFrom: string }) {\r\n  return (\r\n    hideFrom &&\r\n    css`\r\n      display: block;\r\n      ${media[hideFrom]`\r\n        display: none;\r\n      `}\r\n    `\r\n  );\r\n}\r\n","import { Token } from '@thorchain/asgardex-binance';\r\nimport { TokenAmount, formatTokenAmount, formatBaseAsTokenAmount, baseAmount } from '@thorchain/asgardex-token';\r\nimport { BaseAmount, formatBaseAsAssetAmount,  bnOrZero } from '@thorchain/asgardex-util';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport { Maybe, Nothing, Pair } from 'types/bepswap';\r\n\r\nexport const getSymbolPair = (symbolPair?: string): Pair => ({\r\n  source: symbolPair?.split(':')[0]?.toUpperCase() ?? Nothing,\r\n  target: symbolPair?.split(':')[1]?.toUpperCase() ?? Nothing,\r\n});\r\n\r\nexport const getTickerFormat = (symbol?: Maybe<string>): string => {\r\n  if (!symbol) return '';\r\n  if (symbol.includes('.')) {\r\n    return symbol\r\n      .split('.')[1]\r\n      .split('-')[0]\r\n      .toLowerCase();\r\n  }\r\n\r\n  return symbol.split('-')[0].toLowerCase();\r\n};\r\n\r\nexport const compareShallowStr = (str1: string, str2: string): boolean => {\r\n  try {\r\n    return str1.toLowerCase() === str2.toLowerCase();\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const isShortFormatPossible = (\r\n  amount: BigNumber | number,\r\n  decimal = 3,\r\n) => {\r\n  if (Number(amount.toFixed(decimal)) === 0) return false;\r\n  return true;\r\n};\r\n\r\nexport const getShortAmount = (amount: BigNumber | number, decimal = 3) => {\r\n  if (Number(amount.toFixed(8)) === 0) return '0';\r\n  if (isShortFormatPossible(amount, decimal)) return amount.toFixed(decimal);\r\n  return amount.toFixed(8);\r\n};\r\n\r\nexport const getShortTokenAmount = (amount: TokenAmount) => {\r\n  if (amount.amount().isEqualTo(0)) return '0';\r\n\r\n  if (formatTokenAmount(amount) === '0.00' && !amount.amount().isEqualTo(0)) {\r\n    return formatTokenAmount(amount, 8);\r\n  }\r\n  return formatTokenAmount(amount);\r\n};\r\n\r\nexport const getShortAssetAmount = (amount: BaseAmount, decimal = 2) => {\r\n  if (amount.amount().isEqualTo(0)) return '0';\r\n\r\n  if (formatBaseAsAssetAmount(amount) === '0.00' && !amount.amount().isEqualTo(0)) {\r\n    return formatBaseAsAssetAmount(amount, 8);\r\n  }\r\n  return formatBaseAsAssetAmount(amount, decimal);\r\n};\r\n\r\nexport const getTokenName = (tokenList: Token[], assetName: string): string => {\r\n  const token = tokenList.find(item => item.symbol === assetName);\r\n  return token ? token.name.toUpperCase() : assetName.toUpperCase();\r\n};\r\n\r\nexport const formatMidgardAmount = (amount?: string | number) => {\r\n  return formatBaseAsTokenAmount(baseAmount(bnOrZero(amount)));\r\n};\r\n\r\nexport const emptyString = '';\r\n","\r\n\r\nexport * from \"./api\";\r\nexport * from \"./configuration\";\r\n","import { crypto } from '@binance-chain/javascript-sdk';\r\n\r\nimport { asgardexBncClient, bncClient } from '../../env';\r\n\r\n/** verify keystore file with password\r\n * return address and error fields\r\n * @param keystore\r\n * @param password\r\n */\r\nexport const verifyPrivateKey = async (keystore: string, password: string) => {\r\n  try {\r\n    const privateKey = crypto.getPrivateKeyFromKeyStore(keystore, password);\r\n\r\n    await bncClient.setPrivateKey(privateKey);\r\n    const address = crypto.getAddressFromPrivateKey(\r\n      privateKey,\r\n      asgardexBncClient.getPrefix(),\r\n    );\r\n\r\n    return {\r\n      address,\r\n      error: null,\r\n    };\r\n  } catch (error) {\r\n    console.error(error); // eslint-disable-line no-console\r\n\r\n    return {\r\n      address: null,\r\n      error,\r\n    };\r\n  }\r\n};\r\n\r\n/** check if symbol is BEP-8 mini-BEP2 token\r\n * return true or false\r\n * @param symbol\r\n */\r\nexport const isBEP8Token = (symbol: string) => {\r\n  if (symbol) {\r\n    const symbolSuffix = symbol.split('-')[1];\r\n    if (\r\n      symbolSuffix &&\r\n      symbolSuffix.length === 4 &&\r\n      symbolSuffix[symbolSuffix.length - 1] === 'M'\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n};\r\n","import * as globalImportUrl from 'url';\r\nimport { Configuration } from './configuration';\r\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface AssetDetail\r\n */\r\nexport interface AssetDetail {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof AssetDetail\r\n     */\r\n    asset?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof AssetDetail\r\n     */\r\n    dateCreated?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof AssetDetail\r\n     */\r\n    priceRune?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface BlockRewards\r\n */\r\nexport interface BlockRewards {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof BlockRewards\r\n     */\r\n    blockReward?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof BlockRewards\r\n     */\r\n    bondReward?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof BlockRewards\r\n     */\r\n    stakeReward?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface BondMetrics\r\n */\r\nexport interface BondMetrics {\r\n    /**\r\n     * Average bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    averageActiveBond?: string;\r\n    /**\r\n     * Average bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    averageStandbyBond?: string;\r\n    /**\r\n     * Maxinum bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    maximumActiveBond?: string;\r\n    /**\r\n     * Maximum bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    maximumStandbyBond?: string;\r\n    /**\r\n     * Median bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    medianActiveBond?: string;\r\n    /**\r\n     * Median bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    medianStandbyBond?: string;\r\n    /**\r\n     * Minumum bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    minimumActiveBond?: string;\r\n    /**\r\n     * Minumum bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    minimumStandbyBond?: string;\r\n    /**\r\n     * Total bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    totalActiveBond?: string;\r\n    /**\r\n     * Total bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    totalStandbyBond?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Coin\r\n */\r\nexport interface Coin {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Coin\r\n     */\r\n    amount?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Coin\r\n     */\r\n    asset?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Event\r\n */\r\nexport interface Event {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Event\r\n     */\r\n    fee?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Event\r\n     */\r\n    slip?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Event\r\n     */\r\n    stakeUnits?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Gas\r\n */\r\nexport interface Gas {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Gas\r\n     */\r\n    amount?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Gas\r\n     */\r\n    asset?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface InlineResponse200\r\n */\r\nexport interface InlineResponse200 {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof InlineResponse200\r\n     */\r\n    catchingUp?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof InlineResponse200\r\n     */\r\n    database?: boolean;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof InlineResponse200\r\n     */\r\n    scannerHeight?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface InlineResponse2001\r\n */\r\nexport interface InlineResponse2001 {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof InlineResponse2001\r\n     */\r\n    count?: number;\r\n    /**\r\n     * \r\n     * @type {Array<TxDetails>}\r\n     * @memberof InlineResponse2001\r\n     */\r\n    txs?: Array<TxDetails>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ModelError\r\n */\r\nexport interface ModelError {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ModelError\r\n     */\r\n    error: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface NetworkInfo\r\n */\r\nexport interface NetworkInfo {\r\n    /**\r\n     * Array of Active Bonds\r\n     * @type {Array<string>}\r\n     * @memberof NetworkInfo\r\n     */\r\n    activeBonds?: Array<string>;\r\n    /**\r\n     * Number of Active Nodes\r\n     * @type {number}\r\n     * @memberof NetworkInfo\r\n     */\r\n    activeNodeCount?: number;\r\n    /**\r\n     * \r\n     * @type {BlockRewards}\r\n     * @memberof NetworkInfo\r\n     */\r\n    blockRewards?: BlockRewards;\r\n    /**\r\n     * \r\n     * @type {BondMetrics}\r\n     * @memberof NetworkInfo\r\n     */\r\n    bondMetrics?: BondMetrics;\r\n    /**\r\n     * (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1\r\n     * @type {string}\r\n     * @memberof NetworkInfo\r\n     */\r\n    bondingAPY?: string;\r\n    /**\r\n     * (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1\r\n     * @type {string}\r\n     * @memberof NetworkInfo\r\n     */\r\n    liquidityAPY?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof NetworkInfo\r\n     */\r\n    nextChurnHeight?: string;\r\n    /**\r\n     * The remaining time of pool activation (in blocks)\r\n     * @type {number}\r\n     * @memberof NetworkInfo\r\n     */\r\n    poolActivationCountdown?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof NetworkInfo\r\n     */\r\n    poolShareFactor?: string;\r\n    /**\r\n     * Array of Standby Bonds\r\n     * @type {Array<string>}\r\n     * @memberof NetworkInfo\r\n     */\r\n    standbyBonds?: Array<string>;\r\n    /**\r\n     * Number of Standby Nodes\r\n     * @type {number}\r\n     * @memberof NetworkInfo\r\n     */\r\n    standbyNodeCount?: number;\r\n    /**\r\n     * Total left in Reserve\r\n     * @type {string}\r\n     * @memberof NetworkInfo\r\n     */\r\n    totalReserve?: string;\r\n    /**\r\n     * Total Rune Staked in Pools\r\n     * @type {string}\r\n     * @memberof NetworkInfo\r\n     */\r\n    totalStaked?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface NodeKey\r\n */\r\nexport interface NodeKey {\r\n    /**\r\n     * ed25519 public key\r\n     * @type {string}\r\n     * @memberof NodeKey\r\n     */\r\n    ed25519?: string;\r\n    /**\r\n     * secp256k1 public key\r\n     * @type {string}\r\n     * @memberof NodeKey\r\n     */\r\n    secp256k1?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Option\r\n */\r\nexport interface Option {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Option\r\n     */\r\n    asymmetry?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Option\r\n     */\r\n    priceTarget?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Option\r\n     */\r\n    reason?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Option\r\n     */\r\n    withdrawBasisPoints?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface PoolAggChanges\r\n */\r\nexport interface PoolAggChanges {\r\n    /**\r\n     * Total changes in asset depth at this time bucket\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    assetChanges?: string;\r\n    /**\r\n     * Depth of asset at the end of current time bucket\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    assetDepth?: string;\r\n    /**\r\n     * Total asset staked\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    assetStaked?: string;\r\n    /**\r\n     * Total asset withdrawn\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    assetWithdrawn?: string;\r\n    /**\r\n     * Count of buy swaps\r\n     * @type {number}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    buyCount?: number;\r\n    /**\r\n     * Sum of \\\"rune_amount\\\" of buy swap events\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    buyVolume?: string;\r\n    /**\r\n     * Total amount of rune, paid by the network to neutralize \\\"gasUsed\\\" changes\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    gasReplenished?: string;\r\n    /**\r\n     * Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    gasUsed?: string;\r\n    /**\r\n     * buyVolume + sellVolume\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    poolVolume?: string;\r\n    /**\r\n     * Asset price in rune at the end of current time bucket\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    price?: string;\r\n    /**\r\n     * Sum of \\\"rewards\\\" events in rune\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    reward?: string;\r\n    /**\r\n     * Total changes in rune depth at this time bucket\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    runeChanges?: string;\r\n    /**\r\n     * Depth of rune at the end of current time bucket\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    runeDepth?: string;\r\n    /**\r\n     * Total rune staked\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    runeStaked?: string;\r\n    /**\r\n     * Total rune withdrawn\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    runeWithdrawn?: string;\r\n    /**\r\n     * Count of sell swaps\r\n     * @type {number}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    sellCount?: number;\r\n    /**\r\n     * Sum of \\\"rune_amount\\\" of sell swap events\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    sellVolume?: string;\r\n    /**\r\n     * Count of stake events\r\n     * @type {number}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    stakeCount?: number;\r\n    /**\r\n     * Determining end of current time bucket in unix timestamp\r\n     * @type {number}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    time?: number;\r\n    /**\r\n     * Total changes in pool units (stakes/withdraws)\r\n     * @type {string}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    unitsChanges?: string;\r\n    /**\r\n     * Count of withdraw events\r\n     * @type {number}\r\n     * @memberof PoolAggChanges\r\n     */\r\n    withdrawCount?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface PoolDetail\r\n */\r\nexport interface PoolDetail {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    asset?: string;\r\n    /**\r\n     * Total current Asset balance\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    assetDepth?: string;\r\n    /**\r\n     * Amount of pool asset balance changed by fee, gas and assset donation\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    assetEarned?: string;\r\n    /**\r\n     * Total Asset staked\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    assetStakedTotal?: string;\r\n    /**\r\n     * Number of RUNE->ASSET transactions\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    buyAssetCount?: string;\r\n    /**\r\n     * Average sell Asset fee size for RUNE->ASSET (in ASSET)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    buyFeeAverage?: string;\r\n    /**\r\n     * Total fees (in Asset)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    buyFeesTotal?: string;\r\n    /**\r\n     * Average trade slip for RUNE->ASSET in %\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    buySlipAverage?: string;\r\n    /**\r\n     * Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    buyTxAverage?: string;\r\n    /**\r\n     * Total Asset buy volume (RUNE->ASSET) (in RUNE)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    buyVolume?: string;\r\n    /**\r\n     * (1 + (poolEarned/poolDepth)) ^ 12 -1\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolAPY?: string;\r\n    /**\r\n     * Total depth of both sides (in RUNE)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolDepth?: string;\r\n    /**\r\n     * (assetEarned * price) + runeEarned\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolEarned?: string;\r\n    /**\r\n     * Average pool fee\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolFeeAverage?: string;\r\n    /**\r\n     * Total fees\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolFeesTotal?: string;\r\n    /**\r\n     * Average pool slip\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolSlipAverage?: string;\r\n    /**\r\n     * Rune value staked Total\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolStakedTotal?: string;\r\n    /**\r\n     * Average pool transaction\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolTxAverage?: string;\r\n    /**\r\n     * Total pool units outstanding\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolUnits?: string;\r\n    /**\r\n     * Two-way volume of all-time (in RUNE)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolVolume?: string;\r\n    /**\r\n     * Two-way volume in 24hrs (in RUNE)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolVolume24hr?: string;\r\n    /**\r\n     * Price of Asset (in RUNE).\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    price?: string;\r\n    /**\r\n     * Total current Rune balance\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    runeDepth?: string;\r\n    /**\r\n     * Amount of pool rune balance changed by fee,reward, deficit, gas and rune donation\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    runeEarned?: string;\r\n    /**\r\n     * Total RUNE staked\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    runeStakedTotal?: string;\r\n    /**\r\n     * Number of ASSET->RUNE transactions\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    sellAssetCount?: string;\r\n    /**\r\n     * Average buy Asset fee size for ASSET->RUNE (in RUNE)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    sellFeeAverage?: string;\r\n    /**\r\n     * Total fees (in RUNE)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    sellFeesTotal?: string;\r\n    /**\r\n     * Average trade slip for ASSET->RUNE in %\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    sellSlipAverage?: string;\r\n    /**\r\n     * Average Asset sell transaction size (ASSET>RUNE) (in RUNE)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    sellTxAverage?: string;\r\n    /**\r\n     * Total Asset sell volume (ASSET>RUNE) (in RUNE).\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    sellVolume?: string;\r\n    /**\r\n     * Number of stake transactions\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    stakeTxCount?: string;\r\n    /**\r\n     * Number of unique stakers\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    stakersCount?: string;\r\n    /**\r\n     * Number of stake & withdraw transactions\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    stakingTxCount?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    status?: PoolDetailStatusEnum;\r\n    /**\r\n     * Number of unique swappers interacting with pool\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    swappersCount?: string;\r\n    /**\r\n     * Number of swapping transactions in the pool (buys and sells)\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    swappingTxCount?: string;\r\n    /**\r\n     * Number of withdraw transactions\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    withdrawTxCount?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum PoolDetailStatusEnum {\r\n    Bootstrapped = 'bootstrapped',\r\n    Enabled = 'enabled',\r\n    Disabled = 'disabled'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface PoolEarningDetail\r\n */\r\nexport interface PoolEarningDetail {\r\n    /**\r\n     * number of days that pool was enabled in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthActiveDays?: string;\r\n    /**\r\n     * sum of asset donated to the pool by add event in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthAssetDonation?: string;\r\n    /**\r\n     * sum of buy fee in rune in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthBuyFee?: string;\r\n    /**\r\n     * sum of gas paid from asset of this pool in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthGasPaid?: string;\r\n    /**\r\n     * sum of gas reimbursed to rune of this pool in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthGasReimbursed?: string;\r\n    /**\r\n     * sum of pool deficit in reward event in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthPoolDeficit?: string;\r\n    /**\r\n     * sum of donation to this pool in past 30 days (lastMonthAssetDonation*price + lastMonthRuneDonation)\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthPoolDonation?: string;\r\n    /**\r\n     * sum of pool Earning in past 30 days (lastMonthPoolDonation + lastMonthPoolFee + lastMonthReward + lastMonthPoolDeficit + lastMonthGasReimbursed - (lastMonthGasPaid * price))\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthPoolEarning?: string;\r\n    /**\r\n     * sum of pool sell fee in rune in past 30 days (lastMonthBuyFee+lastMonthSellFee)\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthPoolFee?: string;\r\n    /**\r\n     * sum of rewards in reward event in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthReward?: string;\r\n    /**\r\n     * sum of rune donated to the pool by add event in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthRuneDonation?: string;\r\n    /**\r\n     * sum of sell fee in rune in past 30 days\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    lastMonthSellFee?: string;\r\n    /**\r\n     * lastMonthPoolEarning/poolDepth (lastMonthPoolEarning may extrapolate if pool was active less than 30 days)\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    periodicRate?: string;\r\n    /**\r\n     * pool name\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    pool?: string;\r\n    /**\r\n     * (1 + periodicRate ) ^ 12 -1\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    poolAPY?: string;\r\n    /**\r\n     * pool depth (2 * rune depth)\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    poolDepth?: string;\r\n    /**\r\n     * pool price in rune\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    price?: string;\r\n    /**\r\n     * sum of asset donated to the pool by add event\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalAssetDonation?: string;\r\n    /**\r\n     * sum of buy fee in rune\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalBuyFee?: string;\r\n    /**\r\n     * sum of gas paid from asset of this pool\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalGasPaid?: string;\r\n    /**\r\n     * sum of gas reimbursed to rune of this pool\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalGasReimbursed?: string;\r\n    /**\r\n     * sum of pool deficit in reward event\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalPoolDeficit?: string;\r\n    /**\r\n     * sum of donation to this pool (totalAssetDonation*price + totalRuneDonation)\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalPoolDonation?: string;\r\n    /**\r\n     * sum of pool Earning (totalPoolDonation+totalPoolFee + totalReward + totalPoolDeficit + totalGasReimbursed - (totalGasPaid * price))\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalPoolEarning?: string;\r\n    /**\r\n     * sum of pool sell fee in rune (sellFee+buyFee)\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalPoolFee?: string;\r\n    /**\r\n     * sum of rewards in reward event\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalReward?: string;\r\n    /**\r\n     * sum of rune donated to the pool by add event\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalRuneDonation?: string;\r\n    /**\r\n     * sum of sell fee in rune\r\n     * @type {string}\r\n     * @memberof PoolEarningDetail\r\n     */\r\n    totalSellFee?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface StakersAddressData\r\n */\r\nexport interface StakersAddressData {\r\n    /**\r\n     * \r\n     * @type {Array<string>}\r\n     * @memberof StakersAddressData\r\n     */\r\n    poolsArray?: Array<string>;\r\n    /**\r\n     * Total value of earnings (in RUNE) across all pools.\r\n     * @type {string}\r\n     * @memberof StakersAddressData\r\n     */\r\n    totalEarned?: string;\r\n    /**\r\n     * Average of all pool ROIs.\r\n     * @type {string}\r\n     * @memberof StakersAddressData\r\n     */\r\n    totalROI?: string;\r\n    /**\r\n     * Total staked (in RUNE) across all pools.\r\n     * @type {string}\r\n     * @memberof StakersAddressData\r\n     */\r\n    totalStaked?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface StakersAssetData\r\n */\r\nexport interface StakersAssetData {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof StakersAssetData\r\n     */\r\n    asset?: string;\r\n    /**\r\n     * Total of assets staked\r\n     * @type {string}\r\n     * @memberof StakersAssetData\r\n     */\r\n    assetStaked?: string;\r\n    /**\r\n     * Total of assets withdrawn\r\n     * @type {string}\r\n     * @memberof StakersAssetData\r\n     */\r\n    assetWithdrawn?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof StakersAssetData\r\n     */\r\n    dateFirstStaked?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof StakersAssetData\r\n     */\r\n    heightLastStaked?: number;\r\n    /**\r\n     * Total of rune staked\r\n     * @type {string}\r\n     * @memberof StakersAssetData\r\n     */\r\n    runeStaked?: string;\r\n    /**\r\n     * Total of rune withdrawn\r\n     * @type {string}\r\n     * @memberof StakersAssetData\r\n     */\r\n    runeWithdrawn?: string;\r\n    /**\r\n     * Represents ownership of a pool.\r\n     * @type {string}\r\n     * @memberof StakersAssetData\r\n     */\r\n    units?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface StatsChanges\r\n */\r\nexport interface StatsChanges {\r\n    /**\r\n     * Count of buy swaps\r\n     * @type {number}\r\n     * @memberof StatsChanges\r\n     */\r\n    buyCount?: number;\r\n    /**\r\n     * Sum of \\\"rune_amount\\\" of buy swap events\r\n     * @type {string}\r\n     * @memberof StatsChanges\r\n     */\r\n    buyVolume?: string;\r\n    /**\r\n     * Determining end height of current time bucket\r\n     * @type {number}\r\n     * @memberof StatsChanges\r\n     */\r\n    endHeight?: number;\r\n    /**\r\n     * Count of sell swaps\r\n     * @type {number}\r\n     * @memberof StatsChanges\r\n     */\r\n    sellCount?: number;\r\n    /**\r\n     * Sum of \\\"rune_amount\\\" of sell swap events\r\n     * @type {string}\r\n     * @memberof StatsChanges\r\n     */\r\n    sellVolume?: string;\r\n    /**\r\n     * Count of stake events\r\n     * @type {number}\r\n     * @memberof StatsChanges\r\n     */\r\n    stakeCount?: number;\r\n    /**\r\n     * Determining start height of current time bucket\r\n     * @type {number}\r\n     * @memberof StatsChanges\r\n     */\r\n    startHeight?: number;\r\n    /**\r\n     * Determining end of current time bucket in unix timestamp\r\n     * @type {number}\r\n     * @memberof StatsChanges\r\n     */\r\n    time?: number;\r\n    /**\r\n     * Total deficit of all pools in the current time bucket\r\n     * @type {string}\r\n     * @memberof StatsChanges\r\n     */\r\n    totalDeficit?: string;\r\n    /**\r\n     * Total reward of all pools in the current time bucket\r\n     * @type {string}\r\n     * @memberof StatsChanges\r\n     */\r\n    totalReward?: string;\r\n    /**\r\n     * Total rune depth of all pools at the end of current time bucket\r\n     * @type {string}\r\n     * @memberof StatsChanges\r\n     */\r\n    totalRuneDepth?: string;\r\n    /**\r\n     * buyVolume + sellVolume\r\n     * @type {string}\r\n     * @memberof StatsChanges\r\n     */\r\n    totalVolume?: string;\r\n    /**\r\n     * Count of withdraw events\r\n     * @type {number}\r\n     * @memberof StatsChanges\r\n     */\r\n    withdrawCount?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface StatsData\r\n */\r\nexport interface StatsData {\r\n    /**\r\n     * Daily active users (unique addresses interacting)\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    dailyActiveUsers?: string;\r\n    /**\r\n     * Daily transactions\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    dailyTx?: string;\r\n    /**\r\n     * Monthly active users\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    monthlyActiveUsers?: string;\r\n    /**\r\n     * Monthly transactions\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    monthlyTx?: string;\r\n    /**\r\n     * Number of active pools\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    poolCount?: string;\r\n    /**\r\n     * Total buying transactions\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalAssetBuys?: string;\r\n    /**\r\n     * Total selling transactions\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalAssetSells?: string;\r\n    /**\r\n     * Total RUNE balances\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalDepth?: string;\r\n    /**\r\n     * Total earned (in RUNE Value).\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalEarned?: string;\r\n    /**\r\n     * Total staking transactions\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalStakeTx?: string;\r\n    /**\r\n     * Total staked (in RUNE Value).\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalStaked?: string;\r\n    /**\r\n     * Total transactions\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalTx?: string;\r\n    /**\r\n     * Total unique swappers & stakers\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalUsers?: string;\r\n    /**\r\n     * Total (in RUNE Value) of all assets swapped since start.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalVolume?: string;\r\n    /**\r\n     * Total (in RUNE Value) of all assets swapped in 24hrs\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalVolume24hr?: string;\r\n    /**\r\n     * Total withdrawing transactions\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    totalWithdrawTx?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainBooleanConstants\r\n */\r\nexport interface ThorchainBooleanConstants {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ThorchainBooleanConstants\r\n     */\r\n    strictBondStakeRatio?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainConstants\r\n */\r\nexport interface ThorchainConstants {\r\n    /**\r\n     * \r\n     * @type {ThorchainBooleanConstants}\r\n     * @memberof ThorchainConstants\r\n     */\r\n    boolValues?: ThorchainBooleanConstants;\r\n    /**\r\n     * \r\n     * @type {ThorchainInt64Constants}\r\n     * @memberof ThorchainConstants\r\n     */\r\n    int64Values?: ThorchainInt64Constants;\r\n    /**\r\n     * \r\n     * @type {ThorchainStringConstants}\r\n     * @memberof ThorchainConstants\r\n     */\r\n    stringValues?: ThorchainStringConstants;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainEndpoint\r\n */\r\nexport interface ThorchainEndpoint {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ThorchainEndpoint\r\n     */\r\n    address?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ThorchainEndpoint\r\n     */\r\n    chain?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ThorchainEndpoint\r\n     */\r\n    pubKey?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainEndpoints\r\n */\r\nexport interface ThorchainEndpoints {\r\n    /**\r\n     * \r\n     * @type {Array<ThorchainEndpoint>}\r\n     * @memberof ThorchainEndpoints\r\n     */\r\n    current?: Array<ThorchainEndpoint>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainInt64Constants\r\n */\r\nexport interface ThorchainInt64Constants {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    badValidatorRate?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    blocksPerYear?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    desireValidatorSet?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    doubleSignMaxAge?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    emissionCurve?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    failKeySignSlashPoints?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    failKeygenSlashPoints?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    fundMigrationInterval?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    jailTimeKeygen?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    jailTimeKeysign?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    lackOfObservationPenalty?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    minimumBondInRune?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    minimumNodesForBFT?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    minimumNodesForYggdrasil?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    newPoolCycle?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    observeSlashPoints?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    oldValidatorRate?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    rotatePerBlockHeight?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    rotateRetryBlocks?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    signingTransactionPeriod?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    stakeLockUpBlocks?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    transactionFee?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    validatorRotateInNumBeforeFull?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    validatorRotateNumAfterFull?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    validatorRotateOutNumBeforeFull?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    whiteListGasAsset?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainInt64Constants\r\n     */\r\n    yggFundLimit?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainLastblock\r\n */\r\nexport interface ThorchainLastblock {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ThorchainLastblock\r\n     */\r\n    chain?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainLastblock\r\n     */\r\n    lastobservedin?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainLastblock\r\n     */\r\n    lastsignedout?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainLastblock\r\n     */\r\n    thorchain?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainQueue\r\n */\r\nexport interface ThorchainQueue {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainQueue\r\n     */\r\n    outbound?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ThorchainQueue\r\n     */\r\n    swap?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ThorchainStringConstants\r\n */\r\nexport interface ThorchainStringConstants {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ThorchainStringConstants\r\n     */\r\n    defaultPoolStatus?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface TotalVolChanges\r\n */\r\nexport interface TotalVolChanges {\r\n    /**\r\n     * Sum of \\\"rune_amount\\\" of buy swap events\r\n     * @type {string}\r\n     * @memberof TotalVolChanges\r\n     */\r\n    buyVolume?: string;\r\n    /**\r\n     * Sum of \\\"rune_amount\\\" of sell swap events\r\n     * @type {string}\r\n     * @memberof TotalVolChanges\r\n     */\r\n    sellVolume?: string;\r\n    /**\r\n     * Determining end of current time bucket in unix timestamp\r\n     * @type {number}\r\n     * @memberof TotalVolChanges\r\n     */\r\n    time?: number;\r\n    /**\r\n     * buyVolume + sellVolume\r\n     * @type {string}\r\n     * @memberof TotalVolChanges\r\n     */\r\n    totalVolume?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Tx\r\n */\r\nexport interface Tx {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Tx\r\n     */\r\n    address?: string;\r\n    /**\r\n     * \r\n     * @type {Array<Coin>}\r\n     * @memberof Tx\r\n     */\r\n    coins?: Array<Coin>;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Tx\r\n     */\r\n    memo?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Tx\r\n     */\r\n    txID?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface TxDetails\r\n */\r\nexport interface TxDetails {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof TxDetails\r\n     */\r\n    date?: number;\r\n    /**\r\n     * \r\n     * @type {Event}\r\n     * @memberof TxDetails\r\n     */\r\n    events?: Event;\r\n    /**\r\n     * \r\n     * @type {Gas}\r\n     * @memberof TxDetails\r\n     */\r\n    gas?: Gas;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof TxDetails\r\n     */\r\n    height?: string;\r\n    /**\r\n     * \r\n     * @type {Tx}\r\n     * @memberof TxDetails\r\n     */\r\n    in?: Tx;\r\n    /**\r\n     * \r\n     * @type {Option}\r\n     * @memberof TxDetails\r\n     */\r\n    options?: Option;\r\n    /**\r\n     * \r\n     * @type {Array<Tx>}\r\n     * @memberof TxDetails\r\n     */\r\n    out?: Array<Tx>;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof TxDetails\r\n     */\r\n    pool?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof TxDetails\r\n     */\r\n    status?: TxDetailsStatusEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof TxDetails\r\n     */\r\n    type?: TxDetailsTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum TxDetailsStatusEnum {\r\n    Success = 'success',\r\n    Refund = 'refund'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum TxDetailsTypeEnum {\r\n    Swap = 'swap',\r\n    Stake = 'stake',\r\n    Unstake = 'unstake',\r\n    Rewards = 'rewards',\r\n    Add = 'add',\r\n    Pool = 'pool',\r\n    Gas = 'gas',\r\n    Refund = 'refund',\r\n    DoubleSwap = 'doubleSwap'\r\n}\r\n\r\n\r\n/**\r\n * DefaultApi - axios parameter creator\r\n * @export\r\n */\r\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\r\n         * @summary Get Asset Information\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAssetInfo(asset: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'asset' is not null or undefined\r\n            if (asset === null || asset === undefined) {\r\n                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getAssetInfo.');\r\n            }\r\n            const localVarPath = `/v1/assets`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (asset !== undefined) {\r\n                localVarQueryParameter['asset'] = asset;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns earning report and apy of the specified pool.\r\n         * @summary Get Pool Earning Detail\r\n         * @param {string} pool Pool asset name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getEarningDetail(pool: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'pool' is not null or undefined\r\n            if (pool === null || pool === undefined) {\r\n                throw new RequiredError('pool','Required parameter pool was null or undefined when calling getEarningDetail.');\r\n            }\r\n            const localVarPath = `/v1/pools/details/{pool}/earnings`\r\n                .replace(`{${\"pool\"}}`, encodeURIComponent(String(pool)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing the health response of the API.\r\n         * @summary Get Health\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getHealth(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/health`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing Network data\r\n         * @summary Get Network Data\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNetworkData(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/network`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing Node public keys\r\n         * @summary Get Node public keys\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNodes(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/nodes`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns historical aggregated details of the specified pool.\r\n         * @summary Get Pool Aggregated Changes\r\n         * @param {string} pool Pool asset name\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolAggChanges(pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'pool' is not null or undefined\r\n            if (pool === null || pool === undefined) {\r\n                throw new RequiredError('pool','Required parameter pool was null or undefined when calling getPoolAggChanges.');\r\n            }\r\n            // verify required parameter 'interval' is not null or undefined\r\n            if (interval === null || interval === undefined) {\r\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getPoolAggChanges.');\r\n            }\r\n            // verify required parameter 'from' is not null or undefined\r\n            if (from === null || from === undefined) {\r\n                throw new RequiredError('from','Required parameter from was null or undefined when calling getPoolAggChanges.');\r\n            }\r\n            // verify required parameter 'to' is not null or undefined\r\n            if (to === null || to === undefined) {\r\n                throw new RequiredError('to','Required parameter to was null or undefined when calling getPoolAggChanges.');\r\n            }\r\n            const localVarPath = `/v1/history/pools`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (pool !== undefined) {\r\n                localVarQueryParameter['pool'] = pool;\r\n            }\r\n\r\n            if (interval !== undefined) {\r\n                localVarQueryParameter['interval'] = interval;\r\n            }\r\n\r\n            if (from !== undefined) {\r\n                localVarQueryParameter['from'] = from;\r\n            }\r\n\r\n            if (to !== undefined) {\r\n                localVarQueryParameter['to'] = to;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing all the assets supported on BEPSwap pools\r\n         * @summary Get Asset Pools\r\n         * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPools(status?: 'enabled' | 'bootstrap' | 'suspended', options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/pools`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (status !== undefined) {\r\n                localVarQueryParameter['status'] = status;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing all the pool details for that asset.\r\n         * @summary Get Pools Details\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolsDetails(asset: string, view?: 'balances' | 'simple' | 'full', options: any = {}): RequestArgs {\r\n            // verify required parameter 'asset' is not null or undefined\r\n            if (asset === null || asset === undefined) {\r\n                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getPoolsDetails.');\r\n            }\r\n            const localVarPath = `/v1/pools/detail`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (view !== undefined) {\r\n                localVarQueryParameter['view'] = view;\r\n            }\r\n\r\n            if (asset !== undefined) {\r\n                localVarQueryParameter['asset'] = asset;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing staking data for the specified staker and pool.\r\n         * @summary Get Staker Pool Data\r\n         * @param {string} address Unique staker address\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersAddressAndAssetData(address: string, asset: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'address' is not null or undefined\r\n            if (address === null || address === undefined) {\r\n                throw new RequiredError('address','Required parameter address was null or undefined when calling getStakersAddressAndAssetData.');\r\n            }\r\n            // verify required parameter 'asset' is not null or undefined\r\n            if (asset === null || asset === undefined) {\r\n                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getStakersAddressAndAssetData.');\r\n            }\r\n            const localVarPath = `/v1/stakers/{address}/pools`\r\n                .replace(`{${\"address\"}}`, encodeURIComponent(String(address)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (asset !== undefined) {\r\n                localVarQueryParameter['asset'] = asset;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing all the pools the staker is staking in.\r\n         * @summary Get Staker Data\r\n         * @param {string} address Unique staker address\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersAddressData(address: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'address' is not null or undefined\r\n            if (address === null || address === undefined) {\r\n                throw new RequiredError('address','Required parameter address was null or undefined when calling getStakersAddressData.');\r\n            }\r\n            const localVarPath = `/v1/stakers/{address}`\r\n                .replace(`{${\"address\"}}`, encodeURIComponent(String(address)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing the addresses for all stakers.\r\n         * @summary Get Stakers\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersData(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/stakers`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing global stats for all pools and all transactions.\r\n         * @summary Get Global Stats\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStats(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/stats`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns stats and total changes of all pools in specified interval\r\n         * @summary Get Stats Changes\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStatsChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'interval' is not null or undefined\r\n            if (interval === null || interval === undefined) {\r\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getStatsChanges.');\r\n            }\r\n            // verify required parameter 'from' is not null or undefined\r\n            if (from === null || from === undefined) {\r\n                throw new RequiredError('from','Required parameter from was null or undefined when calling getStatsChanges.');\r\n            }\r\n            // verify required parameter 'to' is not null or undefined\r\n            if (to === null || to === undefined) {\r\n                throw new RequiredError('to','Required parameter to was null or undefined when calling getStatsChanges.');\r\n            }\r\n            const localVarPath = `/v1/history/stats`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (interval !== undefined) {\r\n                localVarQueryParameter['interval'] = interval;\r\n            }\r\n\r\n            if (from !== undefined) {\r\n                localVarQueryParameter['from'] = from;\r\n            }\r\n\r\n            if (to !== undefined) {\r\n                localVarQueryParameter['to'] = to;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the constants endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Constants\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedConstants(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/thorchain/constants`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\r\n         * @summary Get the Proxied Pool Addresses\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedEndpoints(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/thorchain/pool_addresses`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the lastblock endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Lastblock\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedLastblock(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/thorchain/lastblock`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the queue endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Queue\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedQueue(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/thorchain/queue`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns total volume changes of all pools in specified interval\r\n         * @summary Get Total Volume Changes\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getTotalVolChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'interval' is not null or undefined\r\n            if (interval === null || interval === undefined) {\r\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getTotalVolChanges.');\r\n            }\r\n            // verify required parameter 'from' is not null or undefined\r\n            if (from === null || from === undefined) {\r\n                throw new RequiredError('from','Required parameter from was null or undefined when calling getTotalVolChanges.');\r\n            }\r\n            // verify required parameter 'to' is not null or undefined\r\n            if (to === null || to === undefined) {\r\n                throw new RequiredError('to','Required parameter to was null or undefined when calling getTotalVolChanges.');\r\n            }\r\n            const localVarPath = `/v1/history/total_volume`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (interval !== undefined) {\r\n                localVarQueryParameter['interval'] = interval;\r\n            }\r\n\r\n            if (from !== undefined) {\r\n                localVarQueryParameter['from'] = from;\r\n            }\r\n\r\n            if (to !== undefined) {\r\n                localVarQueryParameter['to'] = to;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Return an array containing the event details\r\n         * @summary Get details of a tx by address, asset or tx-id\r\n         * @param {number} offset pagination offset\r\n         * @param {number} limit pagination limit\r\n         * @param {string} [address] Address of sender or recipient of any in/out tx in event\r\n         * @param {string} [txid] ID of any in/out tx in event\r\n         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\r\n         * @param {string} [type] One or more comma separated unique types of event\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getTxDetails(offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'offset' is not null or undefined\r\n            if (offset === null || offset === undefined) {\r\n                throw new RequiredError('offset','Required parameter offset was null or undefined when calling getTxDetails.');\r\n            }\r\n            // verify required parameter 'limit' is not null or undefined\r\n            if (limit === null || limit === undefined) {\r\n                throw new RequiredError('limit','Required parameter limit was null or undefined when calling getTxDetails.');\r\n            }\r\n            const localVarPath = `/v1/txs`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (address !== undefined) {\r\n                localVarQueryParameter['address'] = address;\r\n            }\r\n\r\n            if (txid !== undefined) {\r\n                localVarQueryParameter['txid'] = txid;\r\n            }\r\n\r\n            if (asset !== undefined) {\r\n                localVarQueryParameter['asset'] = asset;\r\n            }\r\n\r\n            if (type !== undefined) {\r\n                localVarQueryParameter['type'] = type;\r\n            }\r\n\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DefaultApi - functional programming interface\r\n * @export\r\n */\r\nexport const DefaultApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\r\n         * @summary Get Asset Information\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAssetInfo(asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssetDetail>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAssetInfo(asset, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns earning report and apy of the specified pool.\r\n         * @summary Get Pool Earning Detail\r\n         * @param {string} pool Pool asset name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getEarningDetail(pool: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolEarningDetail> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getEarningDetail(pool, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing the health response of the API.\r\n         * @summary Get Health\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getHealth(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getHealth(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing Network data\r\n         * @summary Get Network Data\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNetworkData(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkInfo> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getNetworkData(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing Node public keys\r\n         * @summary Get Node public keys\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNodes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeKey>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getNodes(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns historical aggregated details of the specified pool.\r\n         * @summary Get Pool Aggregated Changes\r\n         * @param {string} pool Pool asset name\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolAggChanges(pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PoolAggChanges>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPoolAggChanges(pool, interval, from, to, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing all the assets supported on BEPSwap pools\r\n         * @summary Get Asset Pools\r\n         * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPools(status?: 'enabled' | 'bootstrap' | 'suspended', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPools(status, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing all the pool details for that asset.\r\n         * @summary Get Pools Details\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolsDetails(asset: string, view?: 'balances' | 'simple' | 'full', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PoolDetail>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPoolsDetails(asset, view, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing staking data for the specified staker and pool.\r\n         * @summary Get Staker Pool Data\r\n         * @param {string} address Unique staker address\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersAddressAndAssetData(address: string, asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StakersAssetData>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersAddressAndAssetData(address, asset, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing all the pools the staker is staking in.\r\n         * @summary Get Staker Data\r\n         * @param {string} address Unique staker address\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersAddressData(address: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakersAddressData> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersAddressData(address, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing the addresses for all stakers.\r\n         * @summary Get Stakers\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersData(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersData(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing global stats for all pools and all transactions.\r\n         * @summary Get Global Stats\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStats(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsData> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStats(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns stats and total changes of all pools in specified interval\r\n         * @summary Get Stats Changes\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStatsChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatsChanges>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStatsChanges(interval, from, to, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the constants endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Constants\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedConstants(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainConstants> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getThorchainProxiedConstants(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\r\n         * @summary Get the Proxied Pool Addresses\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedEndpoints(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainEndpoints> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getThorchainProxiedEndpoints(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the lastblock endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Lastblock\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedLastblock(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainLastblock> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getThorchainProxiedLastblock(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the queue endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Queue\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedQueue(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainQueue> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getThorchainProxiedQueue(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns total volume changes of all pools in specified interval\r\n         * @summary Get Total Volume Changes\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getTotalVolChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TotalVolChanges>> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getTotalVolChanges(interval, from, to, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Return an array containing the event details\r\n         * @summary Get details of a tx by address, asset or tx-id\r\n         * @param {number} offset pagination offset\r\n         * @param {number} limit pagination limit\r\n         * @param {string} [address] Address of sender or recipient of any in/out tx in event\r\n         * @param {string} [txid] ID of any in/out tx in event\r\n         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\r\n         * @param {string} [type] One or more comma separated unique types of event\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getTxDetails(offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {\r\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getTxDetails(offset, limit, address, txid, asset, type, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DefaultApi - factory interface\r\n * @export\r\n */\r\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\r\n         * @summary Get Asset Information\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getAssetInfo(asset: string, options?: any): AxiosPromise<Array<AssetDetail>> {\r\n            return DefaultApiFp(configuration).getAssetInfo(asset, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns earning report and apy of the specified pool.\r\n         * @summary Get Pool Earning Detail\r\n         * @param {string} pool Pool asset name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getEarningDetail(pool: string, options?: any): AxiosPromise<PoolEarningDetail> {\r\n            return DefaultApiFp(configuration).getEarningDetail(pool, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an object containing the health response of the API.\r\n         * @summary Get Health\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getHealth(options?: any): AxiosPromise<InlineResponse200> {\r\n            return DefaultApiFp(configuration).getHealth(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an object containing Network data\r\n         * @summary Get Network Data\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNetworkData(options?: any): AxiosPromise<NetworkInfo> {\r\n            return DefaultApiFp(configuration).getNetworkData(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an object containing Node public keys\r\n         * @summary Get Node public keys\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNodes(options?: any): AxiosPromise<Array<NodeKey>> {\r\n            return DefaultApiFp(configuration).getNodes(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns historical aggregated details of the specified pool.\r\n         * @summary Get Pool Aggregated Changes\r\n         * @param {string} pool Pool asset name\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolAggChanges(pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): AxiosPromise<Array<PoolAggChanges>> {\r\n            return DefaultApiFp(configuration).getPoolAggChanges(pool, interval, from, to, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an array containing all the assets supported on BEPSwap pools\r\n         * @summary Get Asset Pools\r\n         * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPools(status?: 'enabled' | 'bootstrap' | 'suspended', options?: any): AxiosPromise<Array<string>> {\r\n            return DefaultApiFp(configuration).getPools(status, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an object containing all the pool details for that asset.\r\n         * @summary Get Pools Details\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolsDetails(asset: string, view?: 'balances' | 'simple' | 'full', options?: any): AxiosPromise<Array<PoolDetail>> {\r\n            return DefaultApiFp(configuration).getPoolsDetails(asset, view, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an object containing staking data for the specified staker and pool.\r\n         * @summary Get Staker Pool Data\r\n         * @param {string} address Unique staker address\r\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersAddressAndAssetData(address: string, asset: string, options?: any): AxiosPromise<Array<StakersAssetData>> {\r\n            return DefaultApiFp(configuration).getStakersAddressAndAssetData(address, asset, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an array containing all the pools the staker is staking in.\r\n         * @summary Get Staker Data\r\n         * @param {string} address Unique staker address\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersAddressData(address: string, options?: any): AxiosPromise<StakersAddressData> {\r\n            return DefaultApiFp(configuration).getStakersAddressData(address, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an array containing the addresses for all stakers.\r\n         * @summary Get Stakers\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStakersData(options?: any): AxiosPromise<Array<string>> {\r\n            return DefaultApiFp(configuration).getStakersData(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns an object containing global stats for all pools and all transactions.\r\n         * @summary Get Global Stats\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStats(options?: any): AxiosPromise<StatsData> {\r\n            return DefaultApiFp(configuration).getStats(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns stats and total changes of all pools in specified interval\r\n         * @summary Get Stats Changes\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStatsChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): AxiosPromise<Array<StatsChanges>> {\r\n            return DefaultApiFp(configuration).getStatsChanges(interval, from, to, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the constants endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Constants\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedConstants(options?: any): AxiosPromise<ThorchainConstants> {\r\n            return DefaultApiFp(configuration).getThorchainProxiedConstants(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\r\n         * @summary Get the Proxied Pool Addresses\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedEndpoints(options?: any): AxiosPromise<ThorchainEndpoints> {\r\n            return DefaultApiFp(configuration).getThorchainProxiedEndpoints(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the lastblock endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Lastblock\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedLastblock(options?: any): AxiosPromise<ThorchainLastblock> {\r\n            return DefaultApiFp(configuration).getThorchainProxiedLastblock(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns a proxied endpoint for the queue endpoint from a local thornode\r\n         * @summary Get the Proxied THORChain Queue\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getThorchainProxiedQueue(options?: any): AxiosPromise<ThorchainQueue> {\r\n            return DefaultApiFp(configuration).getThorchainProxiedQueue(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Returns total volume changes of all pools in specified interval\r\n         * @summary Get Total Volume Changes\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n         * @param {number} from Start time of the query as unix timestamp\r\n         * @param {number} to End time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getTotalVolChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): AxiosPromise<Array<TotalVolChanges>> {\r\n            return DefaultApiFp(configuration).getTotalVolChanges(interval, from, to, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * Return an array containing the event details\r\n         * @summary Get details of a tx by address, asset or tx-id\r\n         * @param {number} offset pagination offset\r\n         * @param {number} limit pagination limit\r\n         * @param {string} [address] Address of sender or recipient of any in/out tx in event\r\n         * @param {string} [txid] ID of any in/out tx in event\r\n         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\r\n         * @param {string} [type] One or more comma separated unique types of event\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getTxDetails(offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): AxiosPromise<InlineResponse2001> {\r\n            return DefaultApiFp(configuration).getTxDetails(offset, limit, address, txid, asset, type, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * DefaultApi - object-oriented interface\r\n * @export\r\n * @class DefaultApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class DefaultApi extends BaseAPI {\r\n    /**\r\n     * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\r\n     * @summary Get Asset Information\r\n     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getAssetInfo(asset: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getAssetInfo(asset, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns earning report and apy of the specified pool.\r\n     * @summary Get Pool Earning Detail\r\n     * @param {string} pool Pool asset name\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getEarningDetail(pool: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getEarningDetail(pool, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing the health response of the API.\r\n     * @summary Get Health\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getHealth(options?: any) {\r\n        return DefaultApiFp(this.configuration).getHealth(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing Network data\r\n     * @summary Get Network Data\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getNetworkData(options?: any) {\r\n        return DefaultApiFp(this.configuration).getNetworkData(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing Node public keys\r\n     * @summary Get Node public keys\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getNodes(options?: any) {\r\n        return DefaultApiFp(this.configuration).getNodes(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns historical aggregated details of the specified pool.\r\n     * @summary Get Pool Aggregated Changes\r\n     * @param {string} pool Pool asset name\r\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n     * @param {number} from Start time of the query as unix timestamp\r\n     * @param {number} to End time of the query as unix timestamp\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getPoolAggChanges(pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any) {\r\n        return DefaultApiFp(this.configuration).getPoolAggChanges(pool, interval, from, to, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing all the assets supported on BEPSwap pools\r\n     * @summary Get Asset Pools\r\n     * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getPools(status?: 'enabled' | 'bootstrap' | 'suspended', options?: any) {\r\n        return DefaultApiFp(this.configuration).getPools(status, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing all the pool details for that asset.\r\n     * @summary Get Pools Details\r\n     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n     * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getPoolsDetails(asset: string, view?: 'balances' | 'simple' | 'full', options?: any) {\r\n        return DefaultApiFp(this.configuration).getPoolsDetails(asset, view, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing staking data for the specified staker and pool.\r\n     * @summary Get Staker Pool Data\r\n     * @param {string} address Unique staker address\r\n     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getStakersAddressAndAssetData(address: string, asset: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getStakersAddressAndAssetData(address, asset, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing all the pools the staker is staking in.\r\n     * @summary Get Staker Data\r\n     * @param {string} address Unique staker address\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getStakersAddressData(address: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getStakersAddressData(address, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the addresses for all stakers.\r\n     * @summary Get Stakers\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getStakersData(options?: any) {\r\n        return DefaultApiFp(this.configuration).getStakersData(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing global stats for all pools and all transactions.\r\n     * @summary Get Global Stats\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getStats(options?: any) {\r\n        return DefaultApiFp(this.configuration).getStats(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns stats and total changes of all pools in specified interval\r\n     * @summary Get Stats Changes\r\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n     * @param {number} from Start time of the query as unix timestamp\r\n     * @param {number} to End time of the query as unix timestamp\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getStatsChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any) {\r\n        return DefaultApiFp(this.configuration).getStatsChanges(interval, from, to, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns a proxied endpoint for the constants endpoint from a local thornode\r\n     * @summary Get the Proxied THORChain Constants\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getThorchainProxiedConstants(options?: any) {\r\n        return DefaultApiFp(this.configuration).getThorchainProxiedConstants(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\r\n     * @summary Get the Proxied Pool Addresses\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getThorchainProxiedEndpoints(options?: any) {\r\n        return DefaultApiFp(this.configuration).getThorchainProxiedEndpoints(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns a proxied endpoint for the lastblock endpoint from a local thornode\r\n     * @summary Get the Proxied THORChain Lastblock\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getThorchainProxiedLastblock(options?: any) {\r\n        return DefaultApiFp(this.configuration).getThorchainProxiedLastblock(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns a proxied endpoint for the queue endpoint from a local thornode\r\n     * @summary Get the Proxied THORChain Queue\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getThorchainProxiedQueue(options?: any) {\r\n        return DefaultApiFp(this.configuration).getThorchainProxiedQueue(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Returns total volume changes of all pools in specified interval\r\n     * @summary Get Total Volume Changes\r\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\r\n     * @param {number} from Start time of the query as unix timestamp\r\n     * @param {number} to End time of the query as unix timestamp\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getTotalVolChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any) {\r\n        return DefaultApiFp(this.configuration).getTotalVolChanges(interval, from, to, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * Return an array containing the event details\r\n     * @summary Get details of a tx by address, asset or tx-id\r\n     * @param {number} offset pagination offset\r\n     * @param {number} limit pagination limit\r\n     * @param {string} [address] Address of sender or recipient of any in/out tx in event\r\n     * @param {string} [txid] ID of any in/out tx in event\r\n     * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\r\n     * @param {string} [type] One or more comma separated unique types of event\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getTxDetails(offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getTxDetails(offset, limit, address, txid, asset, type, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * DocumentationApi - axios parameter creator\r\n * @export\r\n */\r\nexport const DocumentationApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Swagger/openapi 3.0 specification generated documents.\r\n         * @summary Get Documents\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getDocs(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/doc`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DocumentationApi - functional programming interface\r\n * @export\r\n */\r\nexport const DocumentationApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Swagger/openapi 3.0 specification generated documents.\r\n         * @summary Get Documents\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getDocs(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\r\n            const localVarAxiosArgs = DocumentationApiAxiosParamCreator(configuration).getDocs(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DocumentationApi - factory interface\r\n * @export\r\n */\r\nexport const DocumentationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * Swagger/openapi 3.0 specification generated documents.\r\n         * @summary Get Documents\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getDocs(options?: any): AxiosPromise<void> {\r\n            return DocumentationApiFp(configuration).getDocs(options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * DocumentationApi - object-oriented interface\r\n * @export\r\n * @class DocumentationApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class DocumentationApi extends BaseAPI {\r\n    /**\r\n     * Swagger/openapi 3.0 specification generated documents.\r\n     * @summary Get Documents\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DocumentationApi\r\n     */\r\n    public getDocs(options?: any) {\r\n        return DocumentationApiFp(this.configuration).getDocs(options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * SpecificationApi - axios parameter creator\r\n * @export\r\n */\r\nexport const SpecificationApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Returns human and machine readable swagger/openapi specification.\r\n         * @summary Get Swagger\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSwagger(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/swagger.json`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SpecificationApi - functional programming interface\r\n * @export\r\n */\r\nexport const SpecificationApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Returns human and machine readable swagger/openapi specification.\r\n         * @summary Get Swagger\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSwagger(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\r\n            const localVarAxiosArgs = SpecificationApiAxiosParamCreator(configuration).getSwagger(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SpecificationApi - factory interface\r\n * @export\r\n */\r\nexport const SpecificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * Returns human and machine readable swagger/openapi specification.\r\n         * @summary Get Swagger\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSwagger(options?: any): AxiosPromise<void> {\r\n            return SpecificationApiFp(configuration).getSwagger(options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * SpecificationApi - object-oriented interface\r\n * @export\r\n * @class SpecificationApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class SpecificationApi extends BaseAPI {\r\n    /**\r\n     * Returns human and machine readable swagger/openapi specification.\r\n     * @summary Get Swagger\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SpecificationApi\r\n     */\r\n    public getSwagger(options?: any) {\r\n        return SpecificationApiFp(this.configuration).getSwagger(options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n","\r\nimport { Configuration } from \"./configuration\";\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = \"http://127.0.0.1:8080\".replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 307;","import { baseAmount } from '@thorchain/asgardex-token';\r\nimport { isTestnet } from 'env';\r\n\r\nimport {\r\n  Fees,\r\n  TransferFees,\r\n  DexFees,\r\n  Fee,\r\n  TransferFee,\r\n} from 'redux/binance/types';\r\n\r\nimport { Maybe, Nothing } from 'types/bepswap';\r\n\r\nimport { bncClient } from '../env';\r\n\r\n\r\n/**\r\n * Type guard for runtime checks of `Fee`\r\n */\r\nexport const isFee = (v: Fee | TransferFee | DexFees): v is Fee =>\r\n  !!(v as Fee)?.msg_type &&\r\n  (v as Fee)?.fee !== undefined &&\r\n  (v as Fee)?.fee_for !== undefined;\r\n\r\n/**\r\n * Type guard for `TransferFee`\r\n */\r\nexport const isTransferFee = (\r\n  v: Fee | TransferFee | DexFees,\r\n): v is TransferFee =>\r\n  isFee((v as TransferFee)?.fixed_fee_params) &&\r\n  !!(v as TransferFee)?.multi_transfer_fee;\r\n\r\n/**\r\n * Type guard for `DexFees`\r\n */\r\nexport const isDexFees = (v: Fee | TransferFee | DexFees): v is DexFees =>\r\n  (v as DexFees)?.dex_fee_fields?.length > 0;\r\n\r\nexport const getTransferFeeds = (fees: Fees): Maybe<TransferFees> =>\r\n  fees.reduce((acc: Maybe<TransferFees>, dataItem) => {\r\n    if (!acc && isTransferFee(dataItem)) {\r\n      const single = dataItem.fixed_fee_params.fee;\r\n      const multi = dataItem.multi_transfer_fee;\r\n      if (single && multi) {\r\n        return {\r\n          single: baseAmount(single),\r\n          multi: baseAmount(multi),\r\n        } as TransferFees;\r\n      }\r\n      return Nothing;\r\n    }\r\n    return acc;\r\n  }, Nothing);\r\n\r\nexport const getPrefix = () => {\r\n  return isTestnet ? 'tbnb' : 'bnb';\r\n};\r\n\r\nexport const isValidAddress = (address: string) => {\r\n  return bncClient.checkAddress(address, getPrefix());\r\n};\r\n\r\nexport const isAddress = (value: string) => {\r\n  if (isTestnet && value.substr(0, 4) === 'tbnb') {\r\n    return true;\r\n  }\r\n\r\n  if (!isTestnet && value.substr(0, 3) === 'bnb') {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n","import {\r\n  OrderList,\r\n  TxPage,\r\n  Account,\r\n  TickerStatistics,\r\n  Market,\r\n  Token,\r\n  WS,\r\n} from '@thorchain/asgardex-binance';\r\n\r\nimport { NET } from '../../env';\r\nimport { TransferFeesRD } from './types';\r\n\r\n/* /////////////////////////////////////////////////////////////\r\n// api\r\n///////////////////////////////////////////////////////////// */\r\nexport const getBinanceData = () => ({ type: 'GET_BINANCE_DATA' } as const);\r\n\r\nexport const getBinanceTokens = () => ({ type: 'GET_BINANCE_TOKENS' } as const);\r\n\r\nexport const getBinanceTokensSuccess = (payload: Token[]) =>\r\n  ({ type: 'GET_BINANCE_TOKENS_SUCCESS', payload } as const);\r\n\r\nexport const getBinanceTokensFailed = (payload: Error) =>\r\n  ({ type: 'GET_BINANCE_TOKENS_FAILED', payload } as const);\r\n\r\nexport const getBinanceMarkets = () =>\r\n  ({ type: 'GET_BINANCE_MARKETS' } as const);\r\n\r\nexport const getBinanceMarketsSuccess = (payload: Market[]) =>\r\n  ({ type: 'GET_BINANCE_MARKETS_SUCCESS', payload } as const);\r\n\r\nexport const getBinanceMarketsFailed = (payload: Error) =>\r\n  ({ type: 'GET_BINANCE_MARKETS_FAILED', payload } as const);\r\n\r\nexport const getBinanceTicker = (payload: string) =>\r\n  ({ type: 'GET_BINANCE_TICKER', payload } as const);\r\n\r\nexport const getBinanceTickerSuccess = (payload: TickerStatistics[]) =>\r\n  ({ type: 'GET_BINANCE_TICKER_SUCCESS', payload } as const);\r\n\r\nexport const getBinanceTickerFailed = (payload: Error) =>\r\n  ({ type: 'GET_BINANCE_TICKER_FAILED', payload } as const);\r\n\r\nexport const getBinanceAccount = (payload: string) =>\r\n  ({ type: 'GET_BINANCE_ACCOUNT', payload } as const);\r\n\r\nexport const getBinanceAccountSuccess = (payload: Account) =>\r\n  ({ type: 'GET_BINANCE_ACCOUNT_SUCCESS', payload } as const);\r\n\r\nexport const getBinanceAccountFailed = (payload: Error) =>\r\n  ({ type: 'GET_BINANCE_ACCOUNT_FAILED', payload } as const);\r\n\r\nexport type GetBinanceTransactionsPayload = {\r\n  address: string;\r\n  symbol: string;\r\n  startTime: number;\r\n  endTime: number;\r\n  limit: number;\r\n};\r\nexport const getBinanceTransactions = (\r\n  payload: GetBinanceTransactionsPayload,\r\n) => ({ type: 'GET_BINANCE_TRANSACTIONS', payload } as const);\r\n\r\nexport const getBinanceTransactionsSuccess = (payload: TxPage) =>\r\n  ({ type: 'GET_BINANCE_TRANSACTIONS_SUCCESS', payload } as const);\r\n\r\nexport const getBinanceTransactionsFailed = (payload: Error) =>\r\n  ({ type: 'GET_BINANCE_TRANSACTIONS_FAILED', payload } as const);\r\n\r\nexport type GetBinanceOpenOrdersPayload = {\r\n  address: string;\r\n  symbol: string;\r\n};\r\nexport const getBinanceOpenOrders = (payload: GetBinanceOpenOrdersPayload) =>\r\n  ({ type: 'GET_BINANCE_OPEN_ORDERS', payload } as const);\r\n\r\nexport const getBinanceOpenOrdersSuccess = (payload: OrderList) =>\r\n  ({ type: 'GET_BINANCE_OPEN_ORDERS_SUCCESS', payload } as const);\r\n\r\nexport const getBinanceOpenOrdersFailed = (payload: Error) =>\r\n  ({ type: 'GET_BINANCE_OPEN_ORDERS_FAILED', payload } as const);\r\n\r\nexport const getBinanceFees = (net: NET) =>\r\n  ({ type: 'GET_BINANCE_FEES', net } as const);\r\n\r\nexport const getBinanceTransferFeesResult = (result: TransferFeesRD) =>\r\n  ({ type: 'GET_BINANCE_TRANSFER_FEES_RESULT', result } as const);\r\n\r\n/* /////////////////////////////////////////////////////////////\r\n// ws\r\n///////////////////////////////////////////////////////////// */\r\n\r\nexport const wsBinanceError = (payload: Error) =>\r\n  ({ type: 'WS_BINANCE_ERROR', payload } as const);\r\n\r\nexport type SubscribeBinanceTransfersPayload = {\r\n  address: string;\r\n  net: NET;\r\n};\r\nexport const subscribeBinanceTransfers = (\r\n  payload: SubscribeBinanceTransfersPayload,\r\n) => ({ type: 'SUBSCRIBE_BINANCE_TRANSFERS', payload } as const);\r\n\r\nexport const subscribeBinanceTransfersFailed = (error: Error) =>\r\n  ({ type: 'SUBSCRIBE_BINANCE_TRANSFERS_FAILED', error } as const);\r\n\r\nexport const unSubscribeBinanceTransfers = () =>\r\n  ({ type: 'UNSUBSCRIBE_BINANCE_TRANSFERS' } as const);\r\n\r\nexport const binanceTransfersMessageReceived = (event: WS.TransferEvent) =>\r\n  ({ type: 'BINANCE_TRANSFERS_MESSAGE_RECEIVED', event } as const);\r\n\r\nexport type BinanceActionTypes = ReturnType<\r\n  | typeof getBinanceData\r\n  | typeof getBinanceTokens\r\n  | typeof getBinanceTokensSuccess\r\n  | typeof getBinanceTokensFailed\r\n  | typeof getBinanceTicker\r\n  | typeof getBinanceTickerSuccess\r\n  | typeof getBinanceTickerFailed\r\n  | typeof getBinanceAccount\r\n  | typeof getBinanceAccountSuccess\r\n  | typeof getBinanceAccountFailed\r\n  | typeof getBinanceTransactions\r\n  | typeof getBinanceTransactionsFailed\r\n  | typeof getBinanceTransactionsSuccess\r\n  | typeof getBinanceMarkets\r\n  | typeof getBinanceMarketsSuccess\r\n  | typeof getBinanceMarketsFailed\r\n  | typeof getBinanceOpenOrders\r\n  | typeof getBinanceOpenOrdersSuccess\r\n  | typeof getBinanceOpenOrdersFailed\r\n  | typeof getBinanceFees\r\n  | typeof getBinanceTransferFeesResult\r\n  | typeof wsBinanceError\r\n  | typeof subscribeBinanceTransfers\r\n  | typeof subscribeBinanceTransfersFailed\r\n  | typeof unSubscribeBinanceTransfers\r\n  | typeof binanceTransfersMessageReceived\r\n>;\r\n","import { Token } from '@thorchain/asgardex-binance';\r\nimport { bn } from '@thorchain/asgardex-util';\r\nimport moment from 'moment';\r\n\r\nimport { RUNE_SYMBOL } from 'settings/assetData';\r\n\r\nimport { Nothing, Maybe } from 'types/bepswap';\r\nimport {\r\n  AssetDetail,\r\n  ThorchainEndpoints,\r\n  ThorchainEndpoint,\r\n  StakersAssetData,\r\n} from 'types/generated/midgard';\r\nimport { Asset } from 'types/midgard';\r\n\r\nimport { PriceDataIndex, AssetDetailMap, PoolDataMap } from './types';\r\n\r\nexport const getAssetSymbolFromPayload = (\r\n  payload: Pick<StakersAssetData, 'asset'>,\r\n): Maybe<string> => {\r\n  const { asset = '' } = payload;\r\n  const { symbol } = getAssetFromString(asset);\r\n  return symbol || Nothing;\r\n};\r\n\r\nexport const getBNBPoolAddress = (\r\n  endpoints: ThorchainEndpoints,\r\n): Maybe<ThorchainEndpoint> =>\r\n  endpoints.current?.find(\r\n    (endpoint: ThorchainEndpoint) => endpoint.chain === 'BNB',\r\n  ) ?? Nothing;\r\n\r\nexport const getPoolAddress = (endpoints: ThorchainEndpoints): Maybe<string> =>\r\n  getBNBPoolAddress(endpoints)?.address ?? Nothing;\r\n\r\nexport const getAssetDetailIndex = (\r\n  assets: AssetDetail[],\r\n): AssetDetailMap | Record<string, never> => {\r\n  let assetDataIndex = {};\r\n\r\n  assets.forEach(assetInfo => {\r\n    const { asset = '' } = assetInfo;\r\n    const { symbol } = getAssetFromString(asset);\r\n\r\n    if (symbol) {\r\n      assetDataIndex = { ...assetDataIndex, [symbol]: assetInfo };\r\n    }\r\n  });\r\n\r\n  return assetDataIndex;\r\n};\r\n\r\nexport const getPriceIndex = (\r\n  poolData: PoolDataMap,\r\n  baseAssetSymbol: string,\r\n): PriceDataIndex => {\r\n  let baseTokenPrice = bn(0);\r\n\r\n  if (baseAssetSymbol === RUNE_SYMBOL) {\r\n    baseTokenPrice = bn(1);\r\n  }\r\n\r\n  const baseTokenInfo = poolData?.[baseAssetSymbol] ?? {};\r\n\r\n  baseTokenPrice = bn(baseTokenInfo?.price ?? 1);\r\n\r\n  let priceDataIndex: PriceDataIndex = {\r\n    // formula: 1 / baseTokenPrice\r\n    [RUNE_SYMBOL]: bn(1).div(baseTokenPrice),\r\n  };\r\n\r\n  Object.keys(poolData).forEach(assetSymbol => {\r\n    const { price: priceRune } = poolData?.[assetSymbol] ?? {};\r\n\r\n    let price = bn(0);\r\n    if (priceRune && baseTokenPrice) {\r\n      // formula: 1 / baseTokenPrice) * priceRune\r\n      price = bn(1)\r\n        .div(baseTokenPrice)\r\n        .multipliedBy(priceRune);\r\n    }\r\n\r\n    priceDataIndex = { ...priceDataIndex, [assetSymbol]: price };\r\n  });\r\n\r\n  return priceDataIndex;\r\n};\r\n\r\n/**\r\n * Creates an `Asset` by a given string\r\n *\r\n * The string has following naming convention:\r\n * `AAA.BBB-CCC`\r\n * where\r\n * chain: `AAA`\r\n * ticker (optional): `BBB`\r\n * symbol: `BBB-CCC`\r\n * or\r\n * symbol: `CCC` (if no ticker available)\r\n * */\r\nexport const getAssetFromString = (s?: string): Asset => {\r\n  let chain;\r\n  let symbol;\r\n  let ticker;\r\n  // We still use this function in plain JS world,\r\n  // so we have to check the type of s here...\r\n  if (s && typeof s === 'string') {\r\n    const data = s.split('.');\r\n    if (s.includes('.')) {\r\n      chain = data[0];\r\n      symbol = data[1];\r\n    } else {\r\n      symbol = data[0];\r\n    }\r\n    if (symbol) {\r\n      ticker = symbol.split('-')[0];\r\n    }\r\n  }\r\n  return { chain, symbol, ticker };\r\n};\r\n\r\nexport const getTokenInfo = (\r\n  tokenList: Token[],\r\n  assetInfo?: string,\r\n): Token[] => {\r\n  const asset = getAssetFromString(assetInfo);\r\n  const token = tokenList.find(item => item.symbol === asset.symbol);\r\n\r\n  return token ? [token] : [];\r\n};\r\n\r\nexport const getOrderedPoolString = (pools: string[]) => {\r\n  const sortedPools = pools.sort((a, b) => a.localeCompare(b));\r\n\r\n  return sortedPools.join();\r\n};\r\n\r\nexport const getEoDTime = () => {\r\n  return moment()\r\n    .set({\r\n      hour: 23,\r\n      minute: 59,\r\n      second: 59,\r\n      millisecond: 999,\r\n    })\r\n    .unix();\r\n};\r\n\r\nexport const getWeekAgoTime = () => {\r\n  return moment()\r\n    .subtract(7, 'days')\r\n    .set({\r\n      hour: 23,\r\n      minute: 59,\r\n      second: 59,\r\n      millisecond: 999,\r\n    })\r\n    .unix();\r\n};\r\n\r\n// MAX intervals are limited to 50\r\nexport const getMonthFromTime = () => {\r\n  return moment()\r\n    .subtract(30, 'days')\r\n    .set({\r\n      hour: 23,\r\n      minute: 59,\r\n      second: 59,\r\n      millisecond: 999,\r\n    })\r\n    .unix();\r\n};\r\n","import { Address } from '@thorchain/asgardex-binance';\r\n\r\nimport { AssetData, User } from './types';\r\n\r\nexport const saveWallet = (payload: User) =>\r\n  ({ type: 'SAVE_WALLET', payload } as const);\r\n\r\nexport const forgetWallet = () => ({ type: 'FORGET_WALLET' } as const);\r\n\r\nexport const refreshBalance = (payload: Address) =>\r\n  ({ type: 'REFRESH_BALANCE', payload } as const);\r\n\r\nexport const refreshBalanceSuccess = (payload: AssetData[]) =>\r\n  ({ type: 'REFRESH_BALANCE_SUCCESS', payload } as const);\r\n\r\nexport const refreshBalanceFailed = (payload: Error) =>\r\n  ({ type: 'REFRESH_BALANCE_FAILED', payload } as const);\r\n\r\nexport const refreshStakes = (payload: Address) =>\r\n  ({ type: 'REFRESH_STAKES', payload } as const);\r\n\r\nexport const refreshStakesSuccess = (payload: AssetData[]) =>\r\n  ({ type: 'REFRESH_STAKES_SUCCESS', payload } as const);\r\n\r\nexport const refreshStakesFailed = (payload: Error) =>\r\n  ({ type: 'REFRESH_STAKES_FAILED', payload } as const);\r\n\r\nexport const refreshWallet = () => ({ type: 'REFRESH_WALLET' } as const);\r\n\r\nexport type WalletActionsTypes = ReturnType<\r\n  | typeof saveWallet\r\n  | typeof forgetWallet\r\n  | typeof refreshBalance\r\n  | typeof refreshBalanceSuccess\r\n  | typeof refreshBalanceFailed\r\n  | typeof refreshStakes\r\n  | typeof refreshStakesSuccess\r\n  | typeof refreshStakesFailed\r\n  | typeof refreshWallet\r\n>;\r\n","import { ThemeType } from '@thorchain/asgardex-theme';\r\n\r\nimport { User, WalletType } from 'redux/wallet/types';\r\n\r\nimport { Maybe } from 'types/bepswap';\r\n\r\nexport const WALLET_ADDRESS = 'WALLET_ADDRESS';\r\nexport const KEY_STORE = 'KEY_STORE';\r\nexport const BASE_PRICE_ASSET = 'BASE_PRICE_ASSET';\r\nexport const THEME_TYPE = 'THEME_TYPE';\r\nexport const BETA_CONFIRM = 'BETA_CONFIRM';\r\n\r\nexport const BEPSWAP_WALLET = 'BEPSWAP_WALLET';\r\n\r\nexport const saveWallet = (user: User) => {\r\n  sessionStorage.setItem(BEPSWAP_WALLET, JSON.stringify(user));\r\n};\r\n\r\nexport const getWallet = (): Maybe<User> => {\r\n  const userObj = sessionStorage.getItem(BEPSWAP_WALLET);\r\n\r\n  if (userObj) {\r\n    const user: User = JSON.parse(userObj);\r\n    const walletType: WalletType = user?.type;\r\n    if (walletType === 'keystore' && user?.keystore) {\r\n      return {\r\n        type: 'keystore',\r\n        wallet: user.wallet,\r\n        keystore: user.keystore,\r\n      };\r\n    }\r\n  }\r\n\r\n  // if wallet is invalid, reset the web storage\r\n  clearWallet();\r\n\r\n  return null;\r\n};\r\n\r\nexport const clearWallet = () => {\r\n  sessionStorage.removeItem(BEPSWAP_WALLET);\r\n};\r\n\r\nexport const saveBasePriceAsset = (asset: string) => {\r\n  sessionStorage.setItem(BASE_PRICE_ASSET, asset);\r\n};\r\n\r\nexport const getBasePriceAsset = () => {\r\n  return sessionStorage.getItem(BASE_PRICE_ASSET);\r\n};\r\n\r\nexport const saveTheme = (themeType: string) => {\r\n  localStorage.setItem(THEME_TYPE, themeType);\r\n};\r\n\r\nexport const getTheme = () => {\r\n  return localStorage.getItem(THEME_TYPE) || ThemeType.DARK;\r\n};\r\n\r\nexport const saveBetaConfirm = (hasConfirmed: boolean) => {\r\n  localStorage.setItem(BETA_CONFIRM, JSON.stringify(hasConfirmed));\r\n};\r\n\r\nexport const getBetaConfirm = () => {\r\n  return JSON.parse(localStorage.getItem(BETA_CONFIRM) || 'false');\r\n};\r\n","import { AssetSymbol } from 'types/bepswap';\r\nimport {\r\n  PoolDetail,\r\n  StatsData,\r\n  StakersAssetData,\r\n  ThorchainEndpoints,\r\n  NetworkInfo,\r\n} from 'types/generated/midgard';\r\n\r\nimport {\r\n  GetStakerPoolDataPayload,\r\n  PriceDataIndex,\r\n  GetAssetsPayload,\r\n  GetPoolDataPayload,\r\n  RTAggregateData,\r\n  GetRTStatsPayload,\r\n  RTStatsData,\r\n  GetRTAggregateByAssetPayload,\r\n  GetPoolDetailByAssetPayload,\r\n  GetPoolEarningDetailsPayload,\r\n  ThorchainData,\r\n  PoolDataMap,\r\n  GetTxPayload,\r\n  TxSuccessPayload,\r\n} from './types';\r\n\r\nexport const getPools = () =>\r\n  ({ type: 'GET_POOLS_REQUEST' } as const);\r\n\r\nexport const getPoolsSuccess = (payload: string[]) =>\r\n  ({ type: 'GET_POOLS_SUCCESS', payload } as const);\r\n\r\nexport const getPoolsFailed = (payload: Error) =>\r\n  ({ type: 'GET_POOLS_FAILED', payload } as const);\r\n\r\nexport const getPoolAssets = (payload: string[]) =>\r\n  ({ type: 'GET_POOL_ASSETS_REQUEST', payload } as const);\r\n\r\nexport const getPoolAssetsSuccess = (payload: GetAssetsPayload) =>\r\n  ({ type: 'GET_POOL_ASSETS_SUCCESS', payload } as const);\r\n\r\nexport const getPoolAssetsFailed = (payload: Error) =>\r\n  ({ type: 'GET_POOL_ASSETS_FAILED', payload } as const);\r\n\r\nexport const getPoolData = (payload: GetPoolDataPayload) =>\r\n  ({ type: 'GET_POOL_DATA_REQUEST', payload } as const);\r\n\r\ntype GetPoolDataSuccessPayload = {\r\n  poolData: PoolDataMap;\r\n};\r\n\r\nexport const getPoolDataSuccess = (payload: GetPoolDataSuccessPayload) =>\r\n  ({ type: 'GET_POOL_DATA_SUCCESS', payload } as const);\r\n\r\nexport const getPoolDataFailed = (payload: Error) =>\r\n  ({ type: 'GET_POOL_DATA_FAILED', payload } as const);\r\n\r\nexport const getPoolDetailByAsset = (payload: GetPoolDetailByAssetPayload) =>\r\n  ({ type: 'GET_POOL_DETAIL_BY_ASSET', payload } as const);\r\n\r\nexport const getPoolDetailByAssetSuccess = (payload: PoolDetail[]) =>\r\n  ({ type: 'GET_POOL_DETAIL_BY_ASSET_SUCCESS', payload } as const);\r\n\r\nexport const getPoolDetailByAssetFailed = (payload: Error) =>\r\n  ({ type: 'GET_POOL_DETAIL_BY_ASSET_FAILED', payload } as const);\r\n\r\nexport const getStakerPoolData = (payload: GetStakerPoolDataPayload) =>\r\n  ({ type: 'GET_STAKER_POOL_DATA_REQUEST', payload } as const);\r\n\r\nexport const getStakerPoolDataSuccess = (payload: StakersAssetData[]) =>\r\n  ({ type: 'GET_STAKER_POOL_DATA_SUCCESS', payload } as const);\r\n\r\nexport const getStakerPoolDataFailed = (payload: Error) =>\r\n  ({ type: 'GET_STAKER_POOL_DATA_FAILED', payload } as const);\r\n\r\nexport const getThorchainDataSuccess = (payload: ThorchainData) =>\r\n  ({ type: 'GET_THORCHAIN_DATA_SUCCESS', payload } as const);\r\n\r\nexport const getPoolAddress = () =>\r\n  ({ type: 'GET_POOL_ADDRESSES_REQUEST' } as const);\r\n\r\nexport const getPoolAddressSuccess = (payload: ThorchainEndpoints) =>\r\n  ({ type: 'GET_POOL_ADDRESSES_SUCCESS', payload } as const);\r\n\r\nexport const getPoolAddressFailed = (payload: Error) =>\r\n  ({ type: 'GET_POOL_ADDRESSES_FAILED', payload } as const);\r\n\r\nexport const getRunePrice = () => ({ type: 'GET_RUNE_PRICE_REQUEST' } as const);\r\n\r\nexport const setBasePriceAsset = (payload: AssetSymbol) =>\r\n  ({ type: 'SET_BASE_PRICE_ASSET', payload } as const);\r\n\r\nexport const setPriceIndex = (payload: PriceDataIndex) =>\r\n  ({ type: 'SET_PRICE_INDEX', payload } as const);\r\n\r\n// get tx by address, txId, asset, type, offset, limit\r\nexport const getTx = (payload: GetTxPayload) =>\r\n  ({ type: 'GET_TX_REQUEST', payload } as const);\r\n\r\nexport const getTxSuccess = (payload: TxSuccessPayload) =>\r\n  ({ type: 'GET_TX_SUCCESS', payload } as const);\r\n\r\nexport const getTxFailed = (payload: Error) =>\r\n  ({ type: 'GET_TX_FAILED', payload } as const);\r\n\r\nexport const getApiBasePathPending = () =>\r\n  ({ type: 'GET_API_BASEPATH_PENDING' } as const);\r\n\r\nexport const getApiBasePathFailed = (payload: Error) =>\r\n  ({ type: 'GET_API_BASEPATH_FAILED', payload } as const);\r\n\r\nexport const getApiBasePathSuccess = (payload: string) =>\r\n  ({ type: 'GET_API_BASEPATH_SUCCESS', payload } as const);\r\n\r\nexport const getStats = () => ({ type: 'GET_STATS_REQUEST' } as const);\r\n\r\nexport const getStatsSuccess = (payload: StatsData) =>\r\n  ({ type: 'GET_STATS_SUCCESS', payload } as const);\r\n\r\nexport const getStatsFailed = (payload: Error) =>\r\n  ({ type: 'GET_STATS_FAILED', payload } as const);\r\n\r\nexport const getPoolEarningDetails = (payload: string) =>\r\n  ({ type: 'GET_POOL_EARNING_DETAILS', payload } as const);\r\n\r\nexport const getPoolEarningDetailsSuccess = (\r\n  payload: GetPoolEarningDetailsPayload,\r\n) => ({ type: 'GET_POOL_EARNING_DETAILS_SUCCESS', payload } as const);\r\n\r\nexport const getPoolEarningDetailsFailed = (payload: Error) =>\r\n  ({ type: 'GET_POOL_EARNING_DETAILS_FAILED', payload } as const);\r\n\r\nexport const getRTStats = (payload: GetRTStatsPayload) =>\r\n  ({ type: 'GET_RT_STATS_CHANEGS', payload } as const);\r\n\r\nexport const getRTStatsSuccess = (payload: RTStatsData) =>\r\n  ({ type: 'GET_RT_STATS_CHANEGS_SUCCESS', payload } as const);\r\n\r\nexport const getRTStatsFailed = (payload: Error) =>\r\n  ({ type: 'GET_RT_STATS_CHANEGS_FAILED', payload } as const);\r\n\r\nexport const getRTAggregateByAsset = (payload: GetRTAggregateByAssetPayload) =>\r\n  ({ type: 'GET_RT_AGGREGATE_BY_ASSET', payload } as const);\r\n\r\nexport const getRTAggregateByAssetSuccess = (payload: RTAggregateData) =>\r\n  ({ type: 'GET_RT_AGGREGATE_BY_ASSET_SUCCESS', payload } as const);\r\n\r\nexport const getRTAggregateByAssetFailed = (payload: Error) =>\r\n  ({ type: 'GET_RT_AGGREGATE_BY_ASSET_FAILED', payload } as const);\r\n\r\nexport const getNetworkInfo = () =>\r\n  ({ type: 'GET_NETWORK_INFO_REQUEST' } as const);\r\n\r\nexport const getNetworkInfoSuccess = (payload: NetworkInfo) =>\r\n  ({ type: 'GET_NETWORK_INFO_SUCCESS', payload } as const);\r\n\r\nexport const getNetworkInfoFailed = (payload: Error) =>\r\n  ({ type: 'GET_NETWORK_INFO_FAILED', payload } as const);\r\n\r\nexport type MidgardActionTypes = ReturnType<\r\n  | typeof getPools\r\n  | typeof getPoolsSuccess\r\n  | typeof getPoolsFailed\r\n  | typeof getPoolAssets\r\n  | typeof getPoolAssetsSuccess\r\n  | typeof getPoolAssetsFailed\r\n  | typeof getPoolData\r\n  | typeof getPoolDataSuccess\r\n  | typeof getPoolDataFailed\r\n  | typeof getStakerPoolData\r\n  | typeof getStakerPoolDataSuccess\r\n  | typeof getStakerPoolDataFailed\r\n  | typeof getPoolAddress\r\n  | typeof getPoolAddressSuccess\r\n  | typeof getPoolAddressFailed\r\n  | typeof getRunePrice\r\n  | typeof setBasePriceAsset\r\n  | typeof setPriceIndex\r\n  | typeof getTx\r\n  | typeof getTxSuccess\r\n  | typeof getTxFailed\r\n  | typeof getApiBasePathPending\r\n  | typeof getApiBasePathFailed\r\n  | typeof getApiBasePathSuccess\r\n  | typeof getThorchainDataSuccess\r\n  | typeof getStats\r\n  | typeof getStatsSuccess\r\n  | typeof getStatsFailed\r\n  | typeof getRTStats\r\n  | typeof getRTStatsSuccess\r\n  | typeof getRTStatsFailed\r\n  | typeof getPoolEarningDetails\r\n  | typeof getPoolEarningDetailsSuccess\r\n  | typeof getPoolEarningDetailsFailed\r\n  | typeof getRTAggregateByAsset\r\n  | typeof getRTAggregateByAssetSuccess\r\n  | typeof getRTAggregateByAssetFailed\r\n  | typeof getPoolDetailByAsset\r\n  | typeof getPoolDetailByAssetSuccess\r\n  | typeof getPoolDetailByAssetFailed\r\n  | typeof getNetworkInfo\r\n  | typeof getNetworkInfoSuccess\r\n  | typeof getNetworkInfoFailed\r\n>;\r\n","import { isMainnet } from '../env';\r\n\r\ntype tokenData = {\r\n  mainnet: string;\r\n  testnet: string;\r\n};\r\n\r\nexport const RUNE_SYMBOL = isMainnet ? 'RUNE-B1A' : 'RUNE-67C';\r\nexport const BUSD_SYMBOL = isMainnet ? 'BUSD-BD1' : 'BUSD-BAF';\r\n\r\nexport const tokenNames: { [key: string]: tokenData } = {\r\n  BNB: {\r\n    mainnet: 'BNB',\r\n    testnet: 'BNB',\r\n  },\r\n  RUNE: {\r\n    mainnet: 'RUNE-B1A',\r\n    testnet: 'RUNE-67C',\r\n  },\r\n  LOK: {\r\n    mainnet: 'LOKI-6A9',\r\n    testnet: 'LOK-3C0',\r\n  },\r\n  LOKI: {\r\n    mainnet: 'LOKI-6A9',\r\n    testnet: 'LOK-3C0',\r\n  },\r\n  ERD: {\r\n    mainnet: 'ERD-D06',\r\n    testnet: 'ERD-D85',\r\n  },\r\n  FSN: {\r\n    mainnet: 'FSN-E14',\r\n    testnet: 'FSN-F1B',\r\n  },\r\n  FTM: {\r\n    mainnet: 'FTM-A64',\r\n    testnet: 'FTM-585',\r\n  },\r\n  TCAN: {\r\n    mainnet: 'CAN-677',\r\n    testnet: 'TCAN-014',\r\n  },\r\n  CAN: {\r\n    mainnet: 'CAN-677',\r\n    testnet: 'TCAN-014',\r\n  },\r\n  TOMOB: {\r\n    mainnet: 'TOMOB-4BC',\r\n    testnet: 'TOMOB-1E1',\r\n  },\r\n};\r\n","import WebFontLoader from './webfontloader';\r\n\r\nexport default WebFontLoader;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport WebFont from 'webfontloader';\r\n\r\ntype Props = {\r\n  config: WebFont.Config;\r\n  onStatus?(status: string): void;\r\n  children: JSX.Element;\r\n};\r\n\r\nconst WebFontLoader: React.FC<Props> = (props): JSX.Element => {\r\n  const { config, onStatus, children } = props;\r\n  const [status, setStatus] = useState<string>('');\r\n\r\n  const handleLoading = () => {\r\n    setStatus('loading');\r\n  };\r\n\r\n  const handleActive = () => {\r\n    setStatus('active');\r\n  };\r\n\r\n  const handleInactive = () => {\r\n    setStatus('inactive');\r\n  };\r\n\r\n  const loadFonts = () => {\r\n    WebFont.load({\r\n      ...config,\r\n      loading: handleLoading,\r\n      active: handleActive,\r\n      inactive: handleInactive,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadFonts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onStatus && onStatus(status);\r\n  }, [onStatus, status]);\r\n\r\n  return children;\r\n};\r\n\r\nexport default WebFontLoader;\r\n","import { tokenAmount } from '@thorchain/asgardex-token';\r\nimport { Reducer } from 'redux';\r\n\r\nimport { getTheme, saveTheme } from 'helpers/webStorageHelper';\r\n\r\nimport { AppActionsTypes } from './actions';\r\nimport { MIN_VALUE, MAX_VALUE } from './const';\r\nimport { State } from './types';\r\n\r\nconst defaultTheme: string = getTheme();\r\nconst valueInRange = (v: number) => v >= MIN_VALUE && v <= MAX_VALUE;\r\n\r\nconst initState: State = {\r\n  themeType: defaultTheme,\r\n  txStatus: {\r\n    modal: false,\r\n    value: 0,\r\n    status: false,\r\n    txData: {\r\n      sourceAsset: '',\r\n      targetAsset: '',\r\n      sourceAmount: tokenAmount(0),\r\n      targetAmount: tokenAmount(0),\r\n    },\r\n  },\r\n  txResult: null,\r\n};\r\n\r\nconst reducer: Reducer<State, AppActionsTypes> = (\r\n  state = initState,\r\n  action,\r\n) => {\r\n  switch (action.type) {\r\n    case 'SET_TX_RESULT':\r\n      return {\r\n        ...state,\r\n        txResult: action.payload,\r\n      };\r\n    case 'SET_TX_TIMER_TYPE':\r\n      return {\r\n        ...state,\r\n        txStatus: {\r\n          ...state.txStatus,\r\n          type: action.payload,\r\n        },\r\n      };\r\n    case 'SET_TX_TIMER_MODAL':\r\n      return {\r\n        ...state,\r\n        txStatus: {\r\n          ...state.txStatus,\r\n          modal: action.payload,\r\n        },\r\n      };\r\n    case 'SET_TX_TIMER_STATUS':\r\n      return {\r\n        ...state,\r\n        txStatus: {\r\n          ...state.txStatus,\r\n          status: action.payload,\r\n        },\r\n      };\r\n    // Sets a new `value`\r\n    // It makes sure `value` will be still in \"range\"\r\n    case 'SET_TX_TIMER_VALUE': {\r\n      const { payload } = action;\r\n      const value = valueInRange(payload) ? payload : state.txStatus.value;\r\n      return {\r\n        ...state,\r\n        txStatus: {\r\n          ...state.txStatus,\r\n          value,\r\n        },\r\n      };\r\n    }\r\n    // Counts `value` by a given number\r\n    // It makes sure `value` will be still in \"range\"\r\n    case 'COUNT_TX_TIMER_VALUE': {\r\n      const { payload } = action;\r\n      const currentValue = state.txStatus.value;\r\n      const nextValue = currentValue + payload;\r\n      const value = valueInRange(nextValue) ? nextValue : currentValue;\r\n\r\n      return {\r\n        ...state,\r\n        txStatus: {\r\n          ...state.txStatus,\r\n          value,\r\n        },\r\n      };\r\n    }\r\n    case 'SET_TX_TIMER_START_TIME':\r\n      return {\r\n        ...state,\r\n        txStatus: {\r\n          ...state.txStatus,\r\n          startTime: action.payload,\r\n        },\r\n      };\r\n    case 'SET_TX_HASH':\r\n      return {\r\n        ...state,\r\n        txStatus: {\r\n          ...state.txStatus,\r\n          hash: action.payload,\r\n        },\r\n      };\r\n    case 'RESET_TX_STATUS': {\r\n      const { payload } = action;\r\n      const txStatus = payload\r\n        ? { ...state.txStatus, ...payload }\r\n        : { ...initState.txStatus };\r\n      return {\r\n        ...state,\r\n        txStatus,\r\n      };\r\n    }\r\n    case 'SET_THEME': {\r\n      const { payload } = action;\r\n      saveTheme(payload);\r\n\r\n      return {\r\n        ...state,\r\n        themeType: payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { initial, pending, success, failure } from '@devexperts/remote-data-ts';\r\nimport { Reducer } from 'redux';\r\n\r\nimport { Nothing } from 'types/bepswap';\r\n\r\nimport { BinanceActionTypes } from './actions';\r\nimport { State } from './types';\r\n\r\nconst initState: State = {\r\n  tokenList: [],\r\n  marketList: [],\r\n  ticker: Nothing,\r\n  account: Nothing,\r\n  accountSequence: Nothing,\r\n  transactions: Nothing,\r\n  openOrders: Nothing,\r\n  transferFees: initial,\r\n  error: Nothing,\r\n  loadingToken: false,\r\n  loadingMarket: false,\r\n  loadingTicker: false,\r\n  wsError: Nothing,\r\n  wsTransferEvent: initial,\r\n};\r\n\r\nconst reducer: Reducer<State, BinanceActionTypes> = (\r\n  state = initState,\r\n  action,\r\n) => {\r\n  switch (action.type) {\r\n    case 'GET_BINANCE_TOKENS':\r\n      return {\r\n        ...state,\r\n        loadingToken: true,\r\n        error: null,\r\n      };\r\n    case 'GET_BINANCE_TOKENS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        loadingToken: false,\r\n        tokenList: action.payload,\r\n      };\r\n    case 'GET_BINANCE_TOKENS_FAILED':\r\n      return {\r\n        ...state,\r\n        loadingToken: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_BINANCE_MARKETS':\r\n      return {\r\n        ...state,\r\n        loadingMarket: true,\r\n        error: null,\r\n      };\r\n    case 'GET_BINANCE_MARKETS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        loadingMarket: false,\r\n        marketList: action.payload,\r\n      };\r\n    case 'GET_BINANCE_MARKETS_FAILED':\r\n      return {\r\n        ...state,\r\n        loadingMarket: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_BINANCE_TICKER':\r\n      return {\r\n        ...state,\r\n        loadingTicker: true,\r\n        error: null,\r\n      };\r\n    case 'GET_BINANCE_TICKER_SUCCESS':\r\n      return {\r\n        ...state,\r\n        ticker: action.payload[0] || Nothing,\r\n        loadingTicker: false,\r\n      };\r\n    case 'GET_BINANCE_TICKER_FAILED':\r\n      return {\r\n        ...state,\r\n        loadingTicker: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_BINANCE_ACCOUNT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        account: action.payload,\r\n        accountSequence: action.payload.sequence || Nothing,\r\n        error: null,\r\n      };\r\n    case 'GET_BINANCE_TRANSACTIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        transactions: action.payload,\r\n        error: null,\r\n      };\r\n    case 'GET_BINANCE_OPEN_ORDERS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        openOrders: action.payload,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_BINANCE_FEES':\r\n      return {\r\n        ...state,\r\n        transferFees: pending,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_BINANCE_TRANSFER_FEES_RESULT':\r\n      return {\r\n        ...state,\r\n        transferFees: action.result,\r\n        error: Nothing,\r\n      };\r\n    case 'WS_BINANCE_ERROR':\r\n      return {\r\n        ...state,\r\n        wsError: action.payload,\r\n      };\r\n    case 'SUBSCRIBE_BINANCE_TRANSFERS':\r\n      return {\r\n        ...state,\r\n        wsTransferEvent: pending,\r\n      };\r\n    case 'SUBSCRIBE_BINANCE_TRANSFERS_FAILED':\r\n      return {\r\n        ...state,\r\n        wsTransferEvent: failure(action.error),\r\n      };\r\n    case 'UNSUBSCRIBE_BINANCE_TRANSFERS':\r\n      return {\r\n        ...state,\r\n        wsTransferEvent: initial,\r\n      };\r\n    case 'BINANCE_TRANSFERS_MESSAGE_RECEIVED':\r\n      return {\r\n        ...state,\r\n        wsTransferEvent: success(action.event),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { initial, success, pending, failure } from '@devexperts/remote-data-ts';\r\nimport { bn } from '@thorchain/asgardex-util';\r\nimport { uniqWith as _uniqWith, isEqual as _isEqual } from 'lodash';\r\nimport { Reducer } from 'redux';\r\n\r\nimport { getBasePriceAsset } from 'helpers/webStorageHelper';\r\n\r\nimport { Nothing } from 'types/bepswap';\r\nimport { StakersAssetData } from 'types/generated/midgard';\r\n\r\nimport { MidgardActionTypes } from './actions';\r\nimport { State, StakerPoolData } from './types';\r\nimport {\r\n  getBNBPoolAddress,\r\n  getPoolAddress,\r\n  getPriceIndex,\r\n  getAssetSymbolFromPayload,\r\n} from './utils';\r\n\r\n// set base price asset to BUSD as a default\r\nconst basePriceAsset = getBasePriceAsset() || 'BUSD';\r\n\r\nconst initState: State = {\r\n  assets: {},\r\n  assetArray: [],\r\n  pools: [],\r\n  poolAddressData: Nothing,\r\n  bnbPoolAddress: Nothing,\r\n  poolAddress: Nothing,\r\n  poolAddressLoading: false,\r\n  poolData: {},\r\n  poolDetailedData: {},\r\n  poolEarningDetails: {},\r\n  poolLoading: true,\r\n  poolDataLoading: false,\r\n  poolDetailedDataLoading: true,\r\n  poolEarningDetailsLoading: false,\r\n  rtStats: {\r\n    allTimeData: [],\r\n    weekData: [],\r\n  },\r\n  rtStatsLoading: false,\r\n  stats: {\r\n    dailyActiveUsers: '0',\r\n    dailyTx: '0',\r\n    monthlyActiveUsers: '0',\r\n    monthlyTx: '0',\r\n    poolCount: '0',\r\n    totalAssetBuys: '0',\r\n    totalAssetSells: '0',\r\n    totalDepth: '0',\r\n    totalEarned: '0',\r\n    totalStakeTx: '0',\r\n    totalStaked: '0',\r\n    totalTx: '0',\r\n    totalUsers: '0',\r\n    totalVolume: '0',\r\n    totalVolume24hr: '0',\r\n    totalWithdrawTx: '0',\r\n  },\r\n  stakerPoolData: Nothing,\r\n  stakerPoolDataLoading: false,\r\n  stakerPoolDataError: Nothing,\r\n  runePrice: 0,\r\n  basePriceAsset, // set base price asset as a RUNE\r\n  priceIndex: {\r\n    RUNE: bn(1),\r\n  },\r\n  error: null,\r\n  assetLoading: true,\r\n  statsLoading: false,\r\n  txData: initial,\r\n  txRefreshing: false,\r\n  rtAggregateLoading: false,\r\n  rtAggregate: {\r\n    allTimeData: [],\r\n    weekData: [],\r\n  },\r\n  apiBasePath: initial,\r\n  thorchain: {\r\n    constants: {},\r\n    lastBlock: {},\r\n    mimir: {},\r\n    queue: {\r\n      swap: '0',\r\n      outbound: '0',\r\n    },\r\n  },\r\n  networkInfo: {},\r\n  networkInfoLoading: false,\r\n};\r\n\r\nconst reducer: Reducer<State, MidgardActionTypes> = (\r\n  state = initState,\r\n  action,\r\n) => {\r\n  switch (action.type) {\r\n    case 'SET_BASE_PRICE_ASSET': {\r\n      const { payload } = action;\r\n      return {\r\n        ...state,\r\n        basePriceAsset: payload,\r\n        priceIndex: getPriceIndex(state.poolData, payload),\r\n      };\r\n    }\r\n    case 'SET_PRICE_INDEX':\r\n      return {\r\n        ...state,\r\n        priceIndex: action.payload,\r\n      };\r\n    case 'GET_RUNE_PRICE_REQUEST':\r\n      return {\r\n        ...state,\r\n        runePrice: 0,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_POOL_ASSETS_SUCCESS': {\r\n      const { payload } = action;\r\n      return {\r\n        ...state,\r\n        assets: {\r\n          ...state.assets,\r\n          ...payload.assetDetailIndex,\r\n        },\r\n        assetArray: _uniqWith(\r\n          [...state.assetArray, ...payload.assetDetails],\r\n          _isEqual,\r\n        ),\r\n        assetLoading: false,\r\n      };\r\n    }\r\n    case 'GET_POOLS_REQUEST':\r\n      return {\r\n        ...state,\r\n        poolLoading: true,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_POOLS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        poolLoading: false,\r\n        pools: _uniqWith([...state.pools, ...action.payload], _isEqual),\r\n      };\r\n    case 'GET_POOLS_FAILED':\r\n      return {\r\n        ...state,\r\n        poolLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_STATS_REQUEST':\r\n      return {\r\n        ...state,\r\n        statsLoading: true,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_STATS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        statsLoading: false,\r\n        stats: action.payload,\r\n      };\r\n    case 'GET_STATS_FAILED':\r\n      return {\r\n        ...state,\r\n        statsLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_RT_STATS_CHANEGS':\r\n      return {\r\n        ...state,\r\n        rtStatsLoading: true,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_RT_STATS_CHANEGS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rtStatsLoading: false,\r\n        rtStats: action.payload,\r\n      };\r\n    case 'GET_RT_STATS_CHANEGS_FAILED':\r\n      return {\r\n        ...state,\r\n        rtStatsLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_POOL_EARNING_DETAILS':\r\n      return {\r\n        ...state,\r\n        poolEarningDetailsLoading: true,\r\n      };\r\n    case 'GET_POOL_EARNING_DETAILS_SUCCESS': {\r\n      const { payload } = action;\r\n      const { symbol, poolEarningDetail } = payload;\r\n\r\n      return {\r\n        ...state,\r\n        poolEarningDetails: {\r\n          ...state.poolEarningDetails,\r\n          [symbol]: poolEarningDetail,\r\n        },\r\n        poolEarningDetailsLoading: false,\r\n        error: Nothing,\r\n      };\r\n    }\r\n    case 'GET_POOL_EARNING_DETAILS_FAILED':\r\n      return {\r\n        ...state,\r\n        poolEarningDetailsLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_POOL_DATA_REQUEST':\r\n      return {\r\n        ...state,\r\n        poolDataLoading: true,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_POOL_DATA_SUCCESS': {\r\n      const { payload } = action;\r\n      const { poolData = {} } = payload;\r\n\r\n      return {\r\n        ...state,\r\n        poolData,\r\n        poolDataLoading: false,\r\n      };\r\n    }\r\n    case 'GET_POOL_DATA_FAILED':\r\n      return {\r\n        ...state,\r\n        poolDataLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_POOL_DETAIL_BY_ASSET':\r\n      return {\r\n        ...state,\r\n        poolDetailedDataLoading: true,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_POOL_DETAIL_BY_ASSET_SUCCESS': {\r\n      const { payload } = action;\r\n\r\n      const poolDetail = payload[0];\r\n      const symbol = getAssetSymbolFromPayload(poolDetail);\r\n\r\n      if (symbol) {\r\n        const poolDetailedData = {\r\n          ...state.poolDetailedData,\r\n          [symbol]: poolDetail,\r\n        };\r\n        return {\r\n          ...state,\r\n          poolDetailedData,\r\n          poolDetailedDataLoading: false,\r\n        };\r\n      }\r\n      return { ...state, poolDetailedDataLoading: false };\r\n    }\r\n    case 'GET_POOL_DETAIL_BY_ASSET_FAILED':\r\n      return {\r\n        ...state,\r\n        poolDetailedDataLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_STAKER_POOL_DATA_REQUEST':\r\n      return {\r\n        ...state,\r\n        stakerPoolDataLoading: true,\r\n        stakerPoolDataError: Nothing,\r\n      };\r\n    case 'GET_STAKER_POOL_DATA_SUCCESS': {\r\n      const { payload } = action;\r\n      // Transform `StakersAssetData[]` into `StakerPoolData`\r\n      // before storing data into state\r\n      const newStakerPoolData = payload.reduce(\r\n        (acc: StakerPoolData, data: StakersAssetData) => {\r\n          const symbol = getAssetSymbolFromPayload(data);\r\n          return symbol ? { ...acc, [symbol]: data } : acc;\r\n        },\r\n        {} as StakerPoolData,\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        stakerPoolData: state.stakerPoolData\r\n          ? { ...state.stakerPoolData, ...newStakerPoolData }\r\n          : newStakerPoolData,\r\n        stakerPoolDataLoading: false,\r\n      };\r\n    }\r\n    case 'GET_THORCHAIN_DATA_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        thorchain: {\r\n          ...state.thorchain,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    }\r\n    case 'GET_STAKER_POOL_DATA_FAILED':\r\n      return {\r\n        ...state,\r\n        stakerPoolData: Nothing,\r\n        stakerPoolDataLoading: false,\r\n        stakerPoolDataError: action.payload,\r\n      };\r\n    case 'GET_POOL_ADDRESSES_REQUEST':\r\n      return {\r\n        ...state,\r\n        error: Nothing,\r\n        poolAddressLoading: true,\r\n      };\r\n    case 'GET_POOL_ADDRESSES_SUCCESS': {\r\n      const { payload } = action;\r\n      return {\r\n        ...state,\r\n        poolAddressData: payload,\r\n        bnbPoolAddress: getBNBPoolAddress(payload),\r\n        poolAddress: getPoolAddress(payload),\r\n        poolAddressLoading: false,\r\n      };\r\n    }\r\n    case 'GET_POOL_ADDRESSES_FAILED':\r\n      return {\r\n        ...state,\r\n        poolAddressData: Nothing,\r\n        bnbPoolAddress: {},\r\n        poolAddress: Nothing,\r\n        error: action.payload,\r\n        poolAddressLoading: false,\r\n      };\r\n    case 'GET_TX_REQUEST':\r\n      return {\r\n        ...state,\r\n        txData: pending,\r\n        txRefreshing: !!action.payload.refresh,\r\n      };\r\n    case 'GET_TX_SUCCESS':\r\n      return {\r\n        ...state,\r\n        txData: success(action.payload.data),\r\n        txRefreshing: false,\r\n      };\r\n    case 'GET_TX_FAILED':\r\n      return {\r\n        ...state,\r\n        txData: failure(action.payload),\r\n        txRefreshing: false,\r\n      };\r\n    case 'GET_RT_AGGREGATE_BY_ASSET':\r\n      return {\r\n        ...state,\r\n        rtAggregateLoading: true,\r\n      };\r\n    case 'GET_RT_AGGREGATE_BY_ASSET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rtAggregate: action.payload,\r\n        rtAggregateLoading: false,\r\n      };\r\n    case 'GET_RT_AGGREGATE_BY_ASSET_FAILED':\r\n      return {\r\n        ...state,\r\n        rtAggregateLoading: false,\r\n      };\r\n    case 'GET_API_BASEPATH_PENDING':\r\n      return {\r\n        ...state,\r\n        apiBasePath: pending,\r\n      };\r\n    case 'GET_API_BASEPATH_FAILED':\r\n      return {\r\n        ...state,\r\n        apiBasePath: failure(action.payload),\r\n      };\r\n    case 'GET_API_BASEPATH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        apiBasePath: success(action.payload),\r\n      };\r\n    case 'GET_NETWORK_INFO_REQUEST':\r\n      return {\r\n        ...state,\r\n        networkInfoLoading: true,\r\n        error: Nothing,\r\n      };\r\n    case 'GET_NETWORK_INFO_SUCCESS':\r\n      return {\r\n        ...state,\r\n        networkInfoLoading: false,\r\n        networkInfo: action.payload,\r\n      };\r\n    case 'GET_NETWORK_INFO_FAILED':\r\n      return {\r\n        ...state,\r\n        networkInfoLoading: false,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import { initial, success, pending, failure } from '@devexperts/remote-data-ts';\r\nimport { tokenAmount } from '@thorchain/asgardex-token';\r\nimport { Reducer } from 'redux';\r\n\r\nimport { getWallet } from 'helpers/webStorageHelper';\r\n\r\nimport { RUNE_SYMBOL } from 'settings/assetData';\r\n\r\nimport { Nothing, Maybe } from 'types/bepswap';\r\n\r\nimport { WalletActionsTypes } from './actions';\r\nimport { State, User } from './types';\r\n\r\nconst initialUser: Maybe<User> = getWallet();\r\n\r\nconst initState: State = {\r\n  user: initialUser,\r\n  assetData: [\r\n    {\r\n      asset: RUNE_SYMBOL,\r\n      assetValue: tokenAmount(0),\r\n    },\r\n  ],\r\n  stakeData: initial,\r\n  loadingAssets: false,\r\n  error: Nothing,\r\n};\r\n\r\nconst reducer: Reducer<State, WalletActionsTypes> = (\r\n  state = initState,\r\n  action,\r\n) => {\r\n  switch (action.type) {\r\n    case 'SAVE_WALLET':\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case 'FORGET_WALLET':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n    case 'REFRESH_BALANCE':\r\n      return {\r\n        ...state,\r\n        loadingAssets: true,\r\n        error: null,\r\n      };\r\n    case 'REFRESH_BALANCE_FAILED':\r\n      return {\r\n        ...state,\r\n        loadingAssets: false,\r\n        error: action.payload,\r\n      };\r\n    case 'REFRESH_BALANCE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        assetData: action.payload,\r\n        loadingAssets: false,\r\n      };\r\n    case 'REFRESH_STAKES':\r\n      return {\r\n        ...state,\r\n        stakeData: pending,\r\n        error: null,\r\n      };\r\n    case 'REFRESH_STAKES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        stakeData: success(action.payload),\r\n      };\r\n    case 'REFRESH_STAKES_FAILED':\r\n      return {\r\n        ...state,\r\n        stakeData: failure(action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import App from './app/reducer';\r\nimport Binance from './binance/reducer';\r\nimport Midgard from './midgard/reducer';\r\nimport Wallet from './wallet/reducer';\r\n\r\nexport default {\r\n  App,\r\n  Wallet,\r\n  Binance,\r\n  Midgard,\r\n};\r\n","import { all, takeEvery, put, fork, select, take } from 'redux-saga/effects';\r\n\r\nimport { BUSD_SYMBOL } from 'settings/assetData';\r\nimport { TX_PAGE_LIMIT, TX_PUBLIC_PAGE_LIMIT } from 'settings/constants';\r\n\r\nimport * as binanceActions from '../binance/actions';\r\nimport * as midgardActions from '../midgard/actions';\r\nimport { RootState } from '../store';\r\nimport * as walletActions from '../wallet/actions';\r\nimport * as actions from './actions';\r\n\r\n// initial data used for bepswap\r\nexport function* getBEPSwapData() {\r\n  yield takeEvery('GET_BEPSWAP_DATA', function*() {\r\n    yield put(midgardActions.getPools());\r\n    yield put(midgardActions.getPoolAddress());\r\n    yield put(midgardActions.getStats());\r\n    yield put(midgardActions.getNetworkInfo());\r\n    yield put(walletActions.refreshWallet());\r\n    yield put(binanceActions.getBinanceData());\r\n\r\n    yield take('GET_POOL_ADDRESSES_SUCCESS');\r\n\r\n    yield put(midgardActions.setBasePriceAsset(BUSD_SYMBOL));\r\n  });\r\n}\r\n\r\n// refresh data needed for pool view homepage\r\nexport function* getPoolViewData() {\r\n  yield takeEvery('GET_POOL_VIEW_DATA', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getPoolViewData>) {\r\n    yield put(midgardActions.getPools());\r\n    yield put(midgardActions.getPoolAddress());\r\n    yield put(midgardActions.getStats());\r\n    yield put(midgardActions.getNetworkInfo());\r\n    yield put(walletActions.refreshWallet());\r\n    yield put(\r\n      midgardActions.getTx({\r\n        asset: payload,\r\n        offset: 0,\r\n        limit: TX_PUBLIC_PAGE_LIMIT,\r\n        refresh: true,\r\n      }),\r\n    );\r\n\r\n    // get volume chart data for AT and Last week\r\n    yield put(midgardActions.getRTStats({}));\r\n  });\r\n}\r\n\r\n// refresh data needed for pool detail page\r\nexport function* getPoolDetailViewData() {\r\n  yield takeEvery('GET_POOL_DETAIL_VIEW_DATA', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getPoolViewData>) {\r\n    yield put(midgardActions.getPools());\r\n    yield put(midgardActions.getPoolAddress());\r\n    yield put(midgardActions.getNetworkInfo());\r\n    yield put(walletActions.refreshWallet());\r\n    yield put(\r\n      midgardActions.getTx({\r\n        asset: payload,\r\n        offset: 0,\r\n        limit: TX_PUBLIC_PAGE_LIMIT,\r\n        refresh: true,\r\n      }),\r\n    );\r\n\r\n    if (payload) {\r\n      yield put(\r\n        midgardActions.getRTAggregateByAsset({\r\n          asset: payload,\r\n        }),\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n// refresh data needed for swap page\r\nexport function* refreshSwapData() {\r\n  yield takeEvery('REFRESH_SWAP_DATA', function*() {\r\n    yield put(midgardActions.getPools());\r\n    yield put(midgardActions.getPoolAddress());\r\n    yield put(midgardActions.getNetworkInfo());\r\n    yield put(walletActions.refreshWallet());\r\n    yield put(midgardActions.getNetworkInfo());\r\n  });\r\n}\r\n\r\n// refresh data needed for stake page\r\nexport function* refreshStakeData() {\r\n  yield takeEvery('REFRESH_STAKE_DATA', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.refreshStakeData>) {\r\n    const symbol = payload;\r\n\r\n    yield put(midgardActions.getPools());\r\n    yield put(midgardActions.getPoolAddress());\r\n    yield put(midgardActions.getNetworkInfo());\r\n    yield put(walletActions.refreshWallet());\r\n\r\n    const user = yield select((state: RootState) => state.Wallet.user);\r\n\r\n    if (user.wallet) {\r\n      yield put(\r\n        midgardActions.getStakerPoolData({\r\n          asset: symbol,\r\n          address: user.wallet,\r\n        }),\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n// refresh data needed for stake page\r\nexport function* refreshTransactionData() {\r\n  yield takeEvery('REFRESH_TRANSACTION_DATA', function*() {\r\n    const user = yield select((state: RootState) => state.Wallet.user);\r\n    const walletAddress = user?.wallet;\r\n    yield put(\r\n      midgardActions.getTx({\r\n        address: walletAddress,\r\n        offset: 0,\r\n        limit: TX_PAGE_LIMIT,\r\n        refresh: true,\r\n      }),\r\n    );\r\n  });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(getBEPSwapData),\r\n    fork(getPoolViewData),\r\n    fork(getPoolDetailViewData),\r\n    fork(refreshSwapData),\r\n    fork(refreshStakeData),\r\n    fork(refreshTransactionData),\r\n  ]);\r\n}\r\n","import { get as _get } from 'lodash';\r\n\r\nimport { tokenNames } from 'settings/assetData';\r\n\r\n/**\r\n * get name of token for testnet or mainnet\r\n * @param   {String}  ticker  token type\r\n * @param   {Boolean} type    true: mainnet, false: testnet\r\n * @return  {String}  tokenName\r\n */\r\nexport const getTokenName = (ticker: string, type = true) => {\r\n  const networkType = type ? 'mainnet' : 'testnet';\r\n\r\n  if (ticker) {\r\n    const key = ticker.toUpperCase();\r\n\r\n    return tokenNames?.[key]?.[networkType] ?? '';\r\n  }\r\n\r\n  return null;\r\n};\r\n","import { failure, success } from '@devexperts/remote-data-ts';\r\nimport {\r\n  Token,\r\n  Market,\r\n  TickerStatistics,\r\n  Account,\r\n  TxPage,\r\n  OrderList,\r\n  WS,\r\n} from '@thorchain/asgardex-binance';\r\nimport { Method, AxiosResponse, AxiosRequestConfig } from 'axios';\r\nimport { eventChannel, END } from 'redux-saga';\r\nimport {\r\n  all,\r\n  delay,\r\n  takeEvery,\r\n  put,\r\n  fork,\r\n  call,\r\n  take,\r\n} from 'redux-saga/effects';\r\n\r\nimport {\r\n  getBinanceURL,\r\n  getBinanceMainnetURL,\r\n  getHeaders,\r\n  binanceRequest as axiosRequest,\r\n} from 'helpers/apiHelper';\r\nimport { getTokenName } from 'helpers/assetHelper';\r\nimport { getTransferFeeds } from 'helpers/binanceHelper';\r\nimport { envOrDefault } from 'helpers/envHelper';\r\nimport { getTickerFormat } from 'helpers/stringHelper';\r\n\r\nimport { Maybe, Nothing, FixmeType } from 'types/bepswap';\r\n\r\nimport { NET, getNet } from '../../env';\r\nimport * as actions from './actions';\r\nimport { Fees } from './types';\r\n\r\n/* /////////////////////////////////////////////////////////////\r\n// api\r\n///////////////////////////////////////////////////////////// */\r\n\r\nconst LIMIT = 1000;\r\nexport const BINANCE_MAX_RETRY = 5;\r\nexport const BINANCE_RETRY_DELAY = 1000; // ms\r\n\r\n// load initial binance data\r\nexport function* getBinanceData() {\r\n  yield takeEvery('GET_BINANCE_DATA', function*() {\r\n    yield put(actions.getBinanceTokens());\r\n    yield put(actions.getBinanceMarkets());\r\n    yield put(actions.getBinanceFees(getNet()));\r\n  });\r\n}\r\n\r\nexport function* getBinanceTokens() {\r\n  yield takeEvery('GET_BINANCE_TOKENS', function*() {\r\n    const params: AxiosRequestConfig = {\r\n      method: 'get' as Method,\r\n      url: getBinanceURL(`tokens?limit=${LIMIT}`),\r\n      headers: getHeaders(),\r\n    };\r\n\r\n    try {\r\n      const { data }: AxiosResponse<Token[]> = yield call(axiosRequest, params);\r\n\r\n      yield put(actions.getBinanceTokensSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getBinanceTokensFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getBinanceMarkets() {\r\n  yield takeEvery('GET_BINANCE_MARKETS', function*() {\r\n    const params: AxiosRequestConfig = {\r\n      method: 'get' as Method,\r\n      url: getBinanceURL(`markets?limit=${LIMIT}`),\r\n      headers: getHeaders(),\r\n    };\r\n\r\n    try {\r\n      const { data }: AxiosResponse<Market[]> = yield call(\r\n        axiosRequest,\r\n        params,\r\n      );\r\n\r\n      yield put(actions.getBinanceMarketsSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getBinanceMarketsFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getBinanceTicker() {\r\n  yield takeEvery('GET_BINANCE_TICKER', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getBinanceTicker>) {\r\n    const ticker = getTickerFormat(payload);\r\n    const tokenName = getTokenName(ticker);\r\n\r\n    const params = {\r\n      method: 'get' as Method,\r\n      url: getBinanceMainnetURL(`ticker/24hr?symbol=${tokenName}_BNB`),\r\n      headers: getHeaders(),\r\n    };\r\n\r\n    try {\r\n      const { data }: AxiosResponse<TickerStatistics[]> = yield call(\r\n        axiosRequest,\r\n        params,\r\n      );\r\n\r\n      yield put(actions.getBinanceTickerSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getBinanceTickerFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getBinanceAccount() {\r\n  yield takeEvery('GET_BINANCE_ACCOUNT', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getBinanceAccount>) {\r\n    const params = {\r\n      method: 'get' as Method,\r\n      url: getBinanceURL(`account/${payload}`),\r\n      headers: getHeaders(),\r\n    };\r\n\r\n    try {\r\n      const { data }: AxiosResponse<Account> = yield call(axiosRequest, params);\r\n\r\n      yield put(actions.getBinanceAccountSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getBinanceAccountFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getBinanceTransactions() {\r\n  yield takeEvery('GET_BINANCE_TRANSACTIONS', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getBinanceTransactions>) {\r\n    const { address, symbol, startTime, endTime, limit } = payload;\r\n\r\n    const params = {\r\n      method: 'get' as Method,\r\n      url: getBinanceURL(\r\n        `transactions?address=${address}&txAsset=${symbol}&startTime=${startTime}&endTime=${endTime}&limit=${limit}`,\r\n      ),\r\n      headers: getHeaders(),\r\n    };\r\n\r\n    try {\r\n      const { data }: AxiosResponse<TxPage> = yield call(axiosRequest, params);\r\n\r\n      yield put(actions.getBinanceTransactionsSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getBinanceTransactionsFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getBinanceOpenOrders() {\r\n  yield takeEvery('GET_BINANCE_OPEN_ORDERS', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getBinanceOpenOrders>) {\r\n    const { address, symbol } = payload;\r\n\r\n    const params = {\r\n      method: 'get' as Method,\r\n      url: getBinanceURL(`orders/open?address=${address}&symbol=${symbol}`),\r\n      headers: getHeaders(),\r\n    };\r\n\r\n    try {\r\n      const { data }: AxiosResponse<OrderList> = yield call(\r\n        axiosRequest,\r\n        params,\r\n      );\r\n\r\n      yield put(actions.getBinanceOpenOrdersSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getBinanceOpenOrdersFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* tryGetBinanceFees(net: NET) {\r\n  const endpoint = 'fees';\r\n  const url =\r\n    net === NET.MAIN ? getBinanceMainnetURL(endpoint) : getBinanceURL(endpoint);\r\n  const params = {\r\n    method: 'get' as Method,\r\n    url,\r\n    headers: getHeaders(),\r\n  };\r\n  for (let i = 0; i < BINANCE_MAX_RETRY; i++) {\r\n    try {\r\n      const { data }: AxiosResponse<Fees> = yield call(axiosRequest, params);\r\n      return data;\r\n    } catch (error) {\r\n      if (i < BINANCE_MAX_RETRY - 1) {\r\n        yield delay(BINANCE_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Binance API request failed to get data of fees');\r\n}\r\n\r\nexport function* getBinanceFees() {\r\n  yield takeEvery('GET_BINANCE_FEES', function*({\r\n    net,\r\n  }: ReturnType<typeof actions.getBinanceFees>) {\r\n    try {\r\n      const data = yield call(tryGetBinanceFees, net);\r\n      // parse fees\r\n      const fees = getTransferFeeds(data);\r\n      const result = fees\r\n        ? success(fees)\r\n        : failure(new Error(`No feeds for transfers defined in ${data}`));\r\n      yield put(actions.getBinanceTransferFeesResult(result));\r\n    } catch (error) {\r\n      yield put(actions.getBinanceTransferFeesResult(failure(error)));\r\n    }\r\n  });\r\n}\r\n\r\n/* /////////////////////////////////////////////////////////////\r\n// websockets\r\n///////////////////////////////////////////////////////////// */\r\n\r\nexport const WS_MAX_RETRY = 5;\r\nexport const WS_RETRY_DELAY = 300; // ms\r\n\r\nconst TESTNET_WS_URI = envOrDefault(\r\n  process.env.REACT_APP_BINANCE_TESTNET_WS_URI,\r\n  'wss://testnet-dex.binance.org/api/ws',\r\n);\r\n\r\nconst MAINET_WS_URI = envOrDefault(\r\n  process.env.REACT_APP_BINANCE_MAINNET_WS_URI,\r\n  'wss://dex.binance.org/api/ws',\r\n);\r\n\r\nfunction createBinanceTransfersChannel(ws: WebSocket) {\r\n  return eventChannel(emit => {\r\n    const onOpenHandler = (e: Event) => {\r\n      emit(e);\r\n    };\r\n    const onMessageHandler = (e: MessageEvent) => {\r\n      emit(e);\r\n    };\r\n    const onCloseHandler = (_: CloseEvent) => {\r\n      // END will close channel\r\n      emit(END);\r\n    };\r\n    const onErrorHandler = (e: Event) => {\r\n      emit(e);\r\n    };\r\n\r\n    // subscriptions\r\n    ws.addEventListener('open', onOpenHandler);\r\n    ws.addEventListener('error', onErrorHandler);\r\n    ws.addEventListener('message', onMessageHandler);\r\n    ws.addEventListener('close', onCloseHandler);\r\n\r\n    // Unsubscribe function\r\n    // invoked by `channel.close()`\r\n    const unsubscribe = () => {\r\n      ws.removeEventListener('open', onOpenHandler);\r\n      ws.removeEventListener('error', onErrorHandler);\r\n      ws.removeEventListener('message', onMessageHandler);\r\n      ws.removeEventListener('close', onCloseHandler);\r\n      // close WS connection\r\n      ws.close();\r\n    };\r\n\r\n    return unsubscribe;\r\n  });\r\n}\r\n\r\nlet binanceTransfersChannel: Maybe<FixmeType> = Nothing;\r\nconst destroyBinanceTransfersChannel = () => {\r\n  // closing channel will close ws connection, too\r\n  binanceTransfersChannel?.close();\r\n  binanceTransfersChannel = Nothing;\r\n};\r\n\r\nfunction* trySubscribeBinanceTransfers(\r\n  payload: actions.SubscribeBinanceTransfersPayload,\r\n) {\r\n  const { net, address } = payload;\r\n  const url = net === NET.MAIN ? MAINET_WS_URI : TESTNET_WS_URI;\r\n  for (let i = 0; i < WS_MAX_RETRY; i++) {\r\n    try {\r\n      // destroy previous channel if there any\r\n      destroyBinanceTransfersChannel();\r\n      const ws = new WebSocket(url);\r\n      binanceTransfersChannel = yield call(createBinanceTransfersChannel, ws);\r\n\r\n      while (true) {\r\n        const channelEvent: Event = yield take(binanceTransfersChannel);\r\n        // BTW: No need to handle channelEvent.type === 'close' here,\r\n        // since `binanceTransfersChannel` will close then\r\n\r\n        if (channelEvent.type === 'error') {\r\n          // throw error to trigger re-connection\r\n          throw new Error('Error while subscribing to Binance.');\r\n        }\r\n        if (channelEvent.type === 'open') {\r\n          // subscribe to transfers\r\n          (channelEvent.target as WebSocket).send(\r\n            JSON.stringify({\r\n              method: 'subscribe',\r\n              topic: 'transfers',\r\n              address,\r\n            }),\r\n          );\r\n        }\r\n        if (channelEvent.type === 'message') {\r\n          try {\r\n            const result = JSON.parse(\r\n              (channelEvent as MessageEvent).data,\r\n            ) as WS.TransferEvent;\r\n            yield put(actions.binanceTransfersMessageReceived(result));\r\n          } catch (error) {\r\n            yield put(actions.subscribeBinanceTransfersFailed(error));\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if (i < WS_MAX_RETRY - 1) {\r\n        yield delay(WS_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error(`Connecting to ${url} failed after ${WS_MAX_RETRY} attemps.`);\r\n}\r\n\r\nfunction* subscribeBinanceTransfers() {\r\n  yield takeEvery('SUBSCRIBE_BINANCE_TRANSFERS', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.subscribeBinanceTransfers>) {\r\n    try {\r\n      binanceTransfersChannel = yield call(\r\n        trySubscribeBinanceTransfers,\r\n        payload,\r\n      );\r\n    } catch (error) {\r\n      yield put(actions.subscribeBinanceTransfersFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* unSubscribeBinanceTransfers() {\r\n  yield takeEvery('UNSUBSCRIBE_BINANCE_TRANSFERS', function*() {\r\n    yield destroyBinanceTransfersChannel();\r\n  });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(getBinanceData),\r\n    fork(getBinanceTokens),\r\n    fork(getBinanceMarkets),\r\n    fork(getBinanceTicker),\r\n    fork(getBinanceAccount),\r\n    fork(getBinanceTransactions),\r\n    fork(getBinanceOpenOrders),\r\n    fork(getBinanceFees),\r\n    fork(subscribeBinanceTransfers),\r\n    fork(unSubscribeBinanceTransfers),\r\n  ]);\r\n}\r\n","import byzantine from '@thorchain/byzantine-module';\r\nimport { isEmpty as _isEmpty } from 'lodash';\r\nimport {\r\n  all,\r\n  takeEvery,\r\n  put,\r\n  fork,\r\n  call,\r\n  delay,\r\n  select,\r\n} from 'redux-saga/effects';\r\n\r\nimport { axiosRequest } from 'helpers/apiHelper';\r\nimport * as api from 'helpers/apiHelper';\r\nimport {\r\n  saveBasePriceAsset,\r\n  getBasePriceAsset,\r\n} from 'helpers/webStorageHelper';\r\n\r\nimport {\r\n  PoolDetail,\r\n  AssetDetail,\r\n  PoolEarningDetail,\r\n} from 'types/generated/midgard/api';\r\nimport { UnpackPromiseResponse } from 'types/util';\r\n\r\nimport { NET, getNet } from '../../env';\r\nimport { RootState } from '../store';\r\nimport * as actions from './actions';\r\nimport {\r\n  GetAssetsPayload,\r\n  GetStakerPoolDataPayload,\r\n  GetRTAggregateByAssetPayload,\r\n  GetRTStatsPayload,\r\n  PoolDataMap,\r\n  GetTxPayload,\r\n} from './types';\r\nimport {\r\n  getAssetDetailIndex,\r\n  getPriceIndex,\r\n  getOrderedPoolString,\r\n  getEoDTime,\r\n  getWeekAgoTime,\r\n  getAssetSymbolFromPayload,\r\n} from './utils';\r\n\r\nexport const MIDGARD_MAX_RETRY = 3;\r\nexport const MIDGARD_RETRY_DELAY = 1000; // ms\r\n\r\nexport function* getApiBasePath(net: NET, noCache = false) {\r\n  const baseAPIURL: string = api.getMidgardBaseURL();\r\n  const hostname = window.location.hostname;\r\n\r\n  const isMainnet = hostname === 'bepswap.com';\r\n  if (!isMainnet) {\r\n    yield put(actions.getApiBasePathSuccess(baseAPIURL));\r\n    return baseAPIURL;\r\n  }\r\n\r\n  // mainnet will use byzantine\r\n\r\n  try {\r\n    yield put(actions.getApiBasePathPending());\r\n    const fn = byzantine;\r\n    const basePath: UnpackPromiseResponse<typeof fn> = yield call(\r\n      fn,\r\n      net === NET.MAIN,\r\n      noCache,\r\n    );\r\n    yield put(actions.getApiBasePathSuccess(basePath));\r\n    return basePath;\r\n  } catch (error) {\r\n    yield put(actions.getApiBasePathFailed(error));\r\n    throw new Error(error);\r\n  }\r\n}\r\n\r\nfunction* tryGetPools() {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getPools;\r\n      const { data: poolAssets }: UnpackPromiseResponse<typeof fn> = yield call(\r\n        {\r\n          context: midgardApi,\r\n          fn,\r\n        },\r\n      );\r\n      return poolAssets;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Midgard API request failed to get pools');\r\n}\r\n\r\nfunction* tryGetStats() {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getStats;\r\n      const { data: stats }: UnpackPromiseResponse<typeof fn> = yield call({\r\n        context: midgardApi,\r\n        fn,\r\n      });\r\n      return stats;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction* tryGetAssets(poolAssets: string[]) {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const orderedPools = getOrderedPoolString(poolAssets);\r\n\r\n      if (!_isEmpty(poolAssets)) {\r\n        const fn = midgardApi.getAssetInfo;\r\n        const {\r\n          data: assetDetails,\r\n        }: UnpackPromiseResponse<typeof fn> = yield call(\r\n          {\r\n            context: midgardApi,\r\n            fn,\r\n          },\r\n          orderedPools,\r\n        );\r\n        return assetDetails;\r\n      } else {\r\n        throw new Error('No pools available');\r\n      }\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Midgard API request failed to get pools');\r\n}\r\n\r\nexport function* getPoolAssets() {\r\n  yield takeEvery('GET_POOL_ASSETS_REQUEST', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getPoolAssets>) {\r\n    try {\r\n      const assetDetails: AssetDetail[] = yield call(tryGetAssets, payload);\r\n      const assetDetailIndex = getAssetDetailIndex(assetDetails);\r\n      const assetsPayload: GetAssetsPayload = {\r\n        assetDetails,\r\n        assetDetailIndex,\r\n      };\r\n\r\n      yield put(actions.getPoolAssetsSuccess(assetsPayload));\r\n    } catch (error) {\r\n      yield put(actions.getPoolsFailed(error));\r\n      yield put(actions.getPoolAssetsFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getPools() {\r\n  yield takeEvery('GET_POOLS_REQUEST', function*() {\r\n    try {\r\n      // get pools\r\n      const pools = yield call(tryGetPools);\r\n\r\n      yield put(actions.getPoolsSuccess(pools));\r\n\r\n      // TODO: filter out BNB.INJ-FAE since midgard does not retrieve pool data\r\n      const INJ_FAE = 'BNB.INJ-FAE';\r\n      const filteredPools = pools.filter((pool: string) => pool !== INJ_FAE);\r\n\r\n      yield put(actions.getPoolData({ assets: filteredPools }));\r\n    } catch (error) {\r\n      yield put(actions.getPoolsFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getStats() {\r\n  yield takeEvery('GET_STATS_REQUEST', function*() {\r\n    try {\r\n      // Unsafe: Can't infer type of `GetStatsResult` in a Generator function - known TS/Generator/Saga issue\r\n      const stats = yield call(tryGetStats);\r\n\r\n      yield put(actions.getStatsSuccess(stats));\r\n    } catch (error) {\r\n      yield put(actions.getStatsFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* tryGetNetworkInfo() {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getNetworkData;\r\n      const {\r\n        data: networkInfo,\r\n      }: UnpackPromiseResponse<typeof fn> = yield call({\r\n        context: midgardApi,\r\n        fn,\r\n      });\r\n      return networkInfo;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function* getNetworkInfo() {\r\n  yield takeEvery('GET_NETWORK_INFO_REQUEST', function*() {\r\n    try {\r\n      const networkInfo = yield call(tryGetNetworkInfo);\r\n      const { data: mimir } = yield call(getThorchainMimir);\r\n      const { data: queue } = yield call(getThorchainQueue);\r\n\r\n      yield put(actions.getThorchainDataSuccess({ mimir, queue }));\r\n      yield put(actions.getNetworkInfoSuccess(networkInfo));\r\n    } catch (error) {\r\n      yield put(actions.getNetworkInfoFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* tryGetPoolDataFromAsset(\r\n  asset: string,\r\n  view: 'balances' | 'simple' | 'full',\r\n) {\r\n  try {\r\n    const basePath: string = yield call(getApiBasePath, getNet());\r\n    const midgardApi = api.getMidgardDefaultApi(basePath);\r\n    const fn = midgardApi.getPoolsDetails;\r\n\r\n    const { data }: UnpackPromiseResponse<typeof fn> = yield call(\r\n      { context: midgardApi, fn },\r\n      asset,\r\n      view,\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport function* getPoolData() {\r\n  yield takeEvery('GET_POOL_DATA_REQUEST', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getPoolData>) {\r\n    const { assets, type = 'simple' } = payload;\r\n    try {\r\n      // sort assets to support cache by sending fixed request URL.\r\n      const sortedAssets = getOrderedPoolString(assets);\r\n      const poolDetails: PoolDetail[] = yield call(\r\n        tryGetPoolDataFromAsset,\r\n        sortedAssets,\r\n        type,\r\n      );\r\n\r\n      // merge pool data to the current pool data state\r\n      const curPoolData = yield select(\r\n        (state: RootState) => state.Midgard.poolData,\r\n      );\r\n\r\n      const newPoolData = poolDetails.reduce(\r\n        (acc: PoolDataMap, poolDetail: PoolDetail) => {\r\n          const symbol = getAssetSymbolFromPayload(poolDetail);\r\n          return symbol\r\n            ? {\r\n                ...acc,\r\n                [symbol]: poolDetail,\r\n              }\r\n            : acc;\r\n        },\r\n        {} as PoolDataMap,\r\n      );\r\n\r\n      const mergedPoolData = {\r\n        ...curPoolData,\r\n        ...newPoolData,\r\n      };\r\n\r\n      const baseTokenTicker = getBasePriceAsset() || 'RUNE';\r\n      const priceIndex = getPriceIndex(mergedPoolData, baseTokenTicker);\r\n      yield put(actions.setPriceIndex(priceIndex));\r\n\r\n      yield put(\r\n        actions.getPoolDataSuccess({\r\n          poolData: mergedPoolData,\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      yield put(actions.getPoolDataFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* getPoolDetailByAsset() {\r\n  yield takeEvery('GET_POOL_DETAIL_BY_ASSET', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getPoolDetailByAsset>) {\r\n    const { asset } = payload;\r\n    try {\r\n      const data = yield call(tryGetPoolDataFromAsset, asset, 'full');\r\n      yield put(actions.getPoolDetailByAssetSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getPoolDetailByAssetFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* tryGetStakerPoolData(payload: GetStakerPoolDataPayload) {\r\n  const { address, asset } = payload;\r\n\r\n  // TODO (Chris): currently hardcode the Chain as BNB\r\n  const assetId = `BNB.${asset}`;\r\n\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getStakersAddressAndAssetData;\r\n      const response: UnpackPromiseResponse<typeof fn> = yield call(\r\n        { context: midgardApi, fn },\r\n        address,\r\n        assetId,\r\n      );\r\n      const { data } = response;\r\n      return data;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Midgard API request failed to get stakers pool data');\r\n}\r\n\r\nconst getThorchainConstants = () => {\r\n  return axiosRequest({\r\n    url: `${api.getThorchainBaseURL()}/constants`,\r\n    method: 'GET',\r\n  });\r\n};\r\n\r\nconst getThorchainLastBlock = () => {\r\n  return axiosRequest({\r\n    url: `${api.getThorchainBaseURL()}/lastblock`,\r\n    method: 'GET',\r\n  });\r\n};\r\n\r\nconst getThorchainMimir = () => {\r\n  return axiosRequest({\r\n    url: `${api.getThorchainBaseURL()}/mimir`,\r\n    method: 'GET',\r\n  });\r\n};\r\n\r\nconst getThorchainQueue = () => {\r\n  return axiosRequest({\r\n    url: `${api.getThorchainBaseURL()}/queue`,\r\n    method: 'GET',\r\n  });\r\n};\r\n\r\nexport function* getStakerPoolData() {\r\n  yield takeEvery('GET_STAKER_POOL_DATA_REQUEST', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getStakerPoolData>) {\r\n    try {\r\n      const data = yield call(tryGetStakerPoolData, payload);\r\n\r\n      // TODO: (CHRIS) create a separate get thorchaindata actions\r\n      const { data: constants } = yield call(getThorchainConstants);\r\n      const { data: lastBlock } = yield call(getThorchainLastBlock);\r\n\r\n      yield put(actions.getStakerPoolDataSuccess(data));\r\n      yield put(\r\n        actions.getThorchainDataSuccess({\r\n          constants,\r\n          lastBlock,\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      yield put(actions.getStakerPoolDataFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* tryGetPoolAddressRequest() {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getThorchainProxiedEndpoints;\r\n      const { data }: UnpackPromiseResponse<typeof fn> = yield call({\r\n        context: midgardApi,\r\n        fn,\r\n      });\r\n      return data;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Midgard API request failed to get pool addresses');\r\n}\r\n\r\nexport function* getPoolAddress() {\r\n  yield takeEvery('GET_POOL_ADDRESSES_REQUEST', function*() {\r\n    try {\r\n      const data = yield call(tryGetPoolAddressRequest);\r\n      yield put(actions.getPoolAddressSuccess(data));\r\n    } catch (error) {\r\n      yield put(actions.getPoolAddressFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* tryGetTx(payload: GetTxPayload) {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      const { address, asset, txId, offset, limit, type } = payload;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getTxDetails;\r\n      const { data }: UnpackPromiseResponse<typeof fn> = yield call(\r\n        { context: midgardApi, fn },\r\n        offset,\r\n        limit,\r\n        address,\r\n        txId,\r\n        asset,\r\n        type,\r\n      );\r\n      return data;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Midgard API request failed to get tx details by address');\r\n}\r\n\r\nexport function* getTx() {\r\n  yield takeEvery('GET_TX_REQUEST', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getTx>) {\r\n    try {\r\n      const refresh = payload?.refresh ?? false;\r\n      const data = yield call(tryGetTx, payload);\r\n\r\n      yield put(\r\n        actions.getTxSuccess({\r\n          data,\r\n          refresh,\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      yield put(actions.getTxFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* setBasePriceAsset() {\r\n  yield takeEvery('SET_BASE_PRICE_ASSET', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.setBasePriceAsset>) {\r\n    yield call(saveBasePriceAsset, payload);\r\n  });\r\n}\r\n\r\nfunction* tryGetRTAggregateByAsset(payload: GetRTAggregateByAssetPayload) {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      const {\r\n        asset = '',\r\n        from = 0,\r\n        to = getEoDTime(),\r\n        interval = 'day',\r\n      } = payload;\r\n      // Unsafe: Can't infer type of `basePath` here - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getPoolAggChanges;\r\n      const { data }: UnpackPromiseResponse<typeof fn> = yield call(\r\n        {\r\n          context: midgardApi,\r\n          fn,\r\n        },\r\n        asset,\r\n        interval,\r\n        from,\r\n        to,\r\n      );\r\n\r\n      return data;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error(\r\n    'Midgard API request failed to get RT Volume changes by asset',\r\n  );\r\n}\r\n\r\nexport function* getRTAggregateByAsset() {\r\n  yield takeEvery('GET_RT_AGGREGATE_BY_ASSET', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getRTAggregateByAsset>) {\r\n    try {\r\n      // if asset is not specified, request fails\r\n      if (!payload.asset) {\r\n        yield put(actions.getRTAggregateByAssetFailed(Error('Invalid symbol')));\r\n      }\r\n\r\n      const curTime = getEoDTime();\r\n      const weekAgoTime = getWeekAgoTime();\r\n\r\n      const allTimeParams: GetRTAggregateByAssetPayload = {\r\n        ...payload,\r\n        interval: 'day',\r\n        from: 0,\r\n        to: curTime,\r\n      };\r\n\r\n      const weekParams: GetRTAggregateByAssetPayload = {\r\n        ...payload,\r\n        interval: 'day',\r\n        from: weekAgoTime,\r\n        to: curTime,\r\n      };\r\n\r\n      const allTimeData = yield call(tryGetRTAggregateByAsset, allTimeParams);\r\n      const weekData = yield call(tryGetRTAggregateByAsset, weekParams);\r\n      yield put(\r\n        actions.getRTAggregateByAssetSuccess({\r\n          allTimeData,\r\n          weekData,\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      yield put(actions.getRTAggregateByAssetFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* trygetRTStats(payload: GetRTStatsPayload) {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      const { from = 0, to = getEoDTime(), interval = 'day' } = payload;\r\n      // Unsafe: Can't infer type of `basePath` here - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getStatsChanges;\r\n      const { data }: UnpackPromiseResponse<typeof fn> = yield call(\r\n        {\r\n          context: midgardApi,\r\n          fn,\r\n        },\r\n        interval,\r\n        from,\r\n        to,\r\n      );\r\n\r\n      return data;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error(\r\n    'Midgard API request failed to get RT Volume changes by asset',\r\n  );\r\n}\r\n\r\nexport function* getRTStats() {\r\n  yield takeEvery('GET_RT_STATS_CHANEGS', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getRTStats>) {\r\n    try {\r\n      const curTime = getEoDTime();\r\n      const weekAgoTime = getWeekAgoTime();\r\n\r\n      const allTimeParams: GetRTStatsPayload = {\r\n        ...payload,\r\n        interval: 'day',\r\n        from: 0,\r\n        to: curTime,\r\n      };\r\n\r\n      const weekParams: GetRTStatsPayload = {\r\n        ...payload,\r\n        interval: 'day',\r\n        from: weekAgoTime,\r\n        to: curTime,\r\n      };\r\n\r\n      const allTimeData = yield call(trygetRTStats, allTimeParams);\r\n      const weekData = yield call(trygetRTStats, weekParams);\r\n      yield put(\r\n        actions.getRTStatsSuccess({\r\n          allTimeData,\r\n          weekData,\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      yield put(actions.getRTStatsFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nfunction* tryGetPoolEarningDetails(payload: string) {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe: Can't infer type of `basePath` here - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getEarningDetail;\r\n      const { data }: UnpackPromiseResponse<typeof fn> = yield call(\r\n        {\r\n          context: midgardApi,\r\n          fn,\r\n        },\r\n        payload,\r\n      );\r\n\r\n      return data;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error(\r\n    'Midgard API request failed to get RT Volume changes by asset',\r\n  );\r\n}\r\n\r\nexport function* getPoolEarningDetails() {\r\n  yield takeEvery('GET_POOL_EARNING_DETAILS', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.getPoolEarningDetails>) {\r\n    try {\r\n      const symbol = payload;\r\n\r\n      const poolEarningDetail: PoolEarningDetail = yield call(\r\n        tryGetPoolEarningDetails,\r\n        symbol,\r\n      );\r\n\r\n      yield put(\r\n        actions.getPoolEarningDetailsSuccess({\r\n          symbol,\r\n          poolEarningDetail,\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      yield put(actions.getPoolEarningDetailsFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(getPoolAssets),\r\n    fork(getPools),\r\n    fork(getPoolData),\r\n    fork(getStats),\r\n    fork(getRTStats),\r\n    fork(getStakerPoolData),\r\n    fork(getPoolAddress),\r\n    fork(setBasePriceAsset),\r\n    fork(getTx),\r\n    fork(getRTAggregateByAsset),\r\n    fork(getPoolEarningDetails),\r\n    fork(getPoolDetailByAsset),\r\n    fork(getNetworkInfo),\r\n  ]);\r\n}\r\n","import { Balance, Address } from '@thorchain/asgardex-binance';\r\nimport {\r\n  baseToToken,\r\n  baseAmount,\r\n  tokenAmount,\r\n} from '@thorchain/asgardex-token';\r\nimport { bnOrZero } from '@thorchain/asgardex-util';\r\nimport { AxiosResponse } from 'axios';\r\nimport { push } from 'connected-react-router';\r\nimport { isEmpty as _isEmpty } from 'lodash';\r\nimport {\r\n  all,\r\n  takeEvery,\r\n  put,\r\n  fork,\r\n  call,\r\n  delay,\r\n  select,\r\n} from 'redux-saga/effects';\r\n\r\nimport * as api from 'helpers/apiHelper';\r\nimport { isBEP8Token } from 'helpers/utils/walletUtils';\r\nimport { saveWallet, clearWallet } from 'helpers/webStorageHelper';\r\n\r\nimport {\r\n  StakersAddressData,\r\n  PoolDetail,\r\n  StakersAssetData,\r\n} from 'types/generated/midgard';\r\nimport { UnpackPromiseResponse } from 'types/util';\r\n\r\nimport { asgardexBncClient, getNet } from '../../env';\r\nimport {\r\n  getApiBasePath,\r\n  MIDGARD_MAX_RETRY,\r\n  MIDGARD_RETRY_DELAY,\r\n} from '../midgard/saga';\r\nimport { getAssetFromString } from '../midgard/utils';\r\nimport { RootState } from '../store';\r\nimport * as actions from './actions';\r\nimport { AssetData } from './types';\r\n\r\nexport function* saveWalletSaga() {\r\n  yield takeEvery('SAVE_WALLET', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.saveWallet>) {\r\n    const { wallet } = payload;\r\n\r\n    saveWallet(payload);\r\n\r\n    // update wallet balance and stake data\r\n    yield put(actions.refreshBalance(wallet));\r\n    yield put(actions.refreshStakes(wallet));\r\n  });\r\n}\r\n\r\nexport function* forgetWalletSaga() {\r\n  yield takeEvery('FORGET_WALLET', function*() {\r\n    clearWallet();\r\n\r\n    yield put(push('/connect'));\r\n  });\r\n}\r\n\r\nexport function* refreshBalance() {\r\n  yield takeEvery('REFRESH_BALANCE', function*({\r\n    payload,\r\n  }: ReturnType<typeof actions.refreshBalance>) {\r\n    const address = payload;\r\n\r\n    try {\r\n      const balances: Balance[] = yield call(\r\n        asgardexBncClient.getBalance,\r\n        address,\r\n      );\r\n\r\n      try {\r\n        const filteredBalance = balances.filter(\r\n          (balance: Balance) => !isBEP8Token(balance.symbol),\r\n        );\r\n        const coins = filteredBalance.map((coin: Balance) => {\r\n          return {\r\n            asset: coin.symbol,\r\n            assetValue: tokenAmount(coin.free),\r\n          } as AssetData;\r\n        });\r\n\r\n        yield put(actions.refreshBalanceSuccess(coins));\r\n      } catch (error) {\r\n        yield put(actions.refreshBalanceFailed(error));\r\n      }\r\n    } catch (error) {\r\n      yield put(actions.refreshBalanceFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\ntype StakersAssetDataMap = {\r\n  [symbol: string]: StakersAssetData;\r\n};\r\n\r\nexport function* getUserStakeData(\r\n  payload: {\r\n    address: Address;\r\n    assets: string[];\r\n  },\r\n  basePath: string,\r\n) {\r\n  const { address, assets } = payload;\r\n\r\n  let midgardApi = api.getMidgardDefaultApi(basePath);\r\n  // (Request 1) Load list of possible `StakersAssetData`\r\n  const { data }: AxiosResponse<StakersAssetData[]> = yield call(\r\n    { context: midgardApi, fn: midgardApi.getStakersAddressAndAssetData },\r\n    address,\r\n    assets.join(),\r\n  );\r\n\r\n  // Transform `StakersAssetData[]` into a map of `{[symbol]: StakersAssetData}` to access data it more easily\r\n  const poolDetailMap: StakersAssetDataMap =\r\n    data && !_isEmpty(data)\r\n      ? data.reduce((acc: StakersAssetDataMap, assetData: StakersAssetData) => {\r\n          const asset = assetData.asset;\r\n          return asset\r\n            ? {\r\n                ...acc,\r\n                [asset]: assetData,\r\n              }\r\n            : acc;\r\n        }, {})\r\n      : {};\r\n\r\n  // (Request 2) Load list of possible `PoolDetail`\r\n  midgardApi = api.getMidgardDefaultApi(basePath);\r\n  const { data: poolDataList }: AxiosResponse<PoolDetail[]> = yield call(\r\n    { context: midgardApi, fn: midgardApi.getPoolsDetails },\r\n    assets.join(),\r\n  );\r\n\r\n  // Transform results of requests 1 + 2 into `StakeData[]`\r\n  const stakeDataList: AssetData[] = poolDataList.reduce(\r\n    (acc: AssetData[], poolData: PoolDetail) => {\r\n      const userStakerData = poolData.asset\r\n        ? poolDetailMap[poolData.asset]\r\n        : null;\r\n      if (userStakerData && poolData.asset) {\r\n        const { symbol = '' } = getAssetFromString(poolData.asset);\r\n        const { poolUnits, runeDepth } = poolData;\r\n        const { units: stakeUnits } = userStakerData;\r\n\r\n        const poolUnitsBN = bnOrZero(poolUnits);\r\n        const runeDepthBN = bnOrZero(runeDepth);\r\n        const stakeUnitsBN = bnOrZero(stakeUnits);\r\n\r\n        // formula: units / poolUnits * runeDepth * 2\r\n        const value = stakeUnitsBN\r\n          .dividedBy(poolUnitsBN)\r\n          .multipliedBy(runeDepthBN)\r\n          .multipliedBy(2);\r\n\r\n        const stakeData: AssetData = {\r\n          asset: symbol,\r\n          assetValue: baseToToken(baseAmount(value)),\r\n        };\r\n        return [...acc, stakeData];\r\n      } else {\r\n        return acc;\r\n      }\r\n    },\r\n    [],\r\n  );\r\n  return stakeDataList;\r\n}\r\n\r\nfunction* tryRefreshStakes(address: Address) {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      const midgardApi = api.getMidgardDefaultApi(basePath);\r\n      const fn = midgardApi.getStakersAddressData;\r\n      const { data }: UnpackPromiseResponse<typeof fn> = yield call(\r\n        { context: midgardApi, fn },\r\n        address,\r\n      );\r\n      return data;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Midgard API request failed to get stakers address data');\r\n}\r\n\r\nexport function* tryGetUserStakeData(address: Address, pools: string[]) {\r\n  for (let i = 0; i < MIDGARD_MAX_RETRY; i++) {\r\n    try {\r\n      const noCache = i > 0;\r\n      // Unsafe type match of `basePath`: Can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const basePath: string = yield call(getApiBasePath, getNet(), noCache);\r\n      // Unsafe: `StakeData[]` can't be inferred by `tsc` from a return value of a Generator function - known TS/Generator/Saga issue\r\n      const result: AssetData[] = yield call(\r\n        getUserStakeData,\r\n        {\r\n          address,\r\n          assets: pools,\r\n        },\r\n        basePath,\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      if (i < MIDGARD_MAX_RETRY - 1) {\r\n        yield delay(MIDGARD_RETRY_DELAY);\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Midgard API request failed to get user staked data');\r\n}\r\n\r\nexport function* refreshStakes() {\r\n  yield takeEvery('REFRESH_STAKES', function*({\r\n    payload: address,\r\n  }: ReturnType<typeof actions.refreshStakes>) {\r\n    try {\r\n      const data: StakersAddressData = yield call(tryRefreshStakes, address);\r\n\r\n      if (data?.poolsArray && !_isEmpty(data?.poolsArray)) {\r\n        const result = yield call(\r\n          tryGetUserStakeData,\r\n          address,\r\n          data.poolsArray,\r\n        );\r\n        yield put(actions.refreshStakesSuccess(result));\r\n      } else {\r\n        yield put(actions.refreshStakesSuccess([]));\r\n      }\r\n    } catch (error) {\r\n      yield put(actions.refreshStakesFailed(error));\r\n    }\r\n  });\r\n}\r\n\r\nexport function* refreshWallet() {\r\n  yield takeEvery('REFRESH_WALLET', function*() {\r\n    const user = yield select((state: RootState) => state.Wallet.user);\r\n    const wallet = user?.wallet;\r\n\r\n    if (wallet) {\r\n      yield put(actions.refreshBalance(wallet));\r\n      yield put(actions.refreshStakes(wallet));\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(saveWalletSaga),\r\n    fork(forgetWalletSaga),\r\n    fork(refreshBalance),\r\n    fork(refreshStakes),\r\n    fork(refreshWallet),\r\n  ]);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\n\r\nimport appSaga from './app/saga';\r\nimport binanceSaga from './binance/saga';\r\nimport midgardSaga from './midgard/saga';\r\nimport walletSaga from './wallet/saga';\r\n\r\nexport default function* rootSaga(/* getState */) {\r\n  yield all([appSaga(), walletSaga(), binanceSaga(), midgardSaga()]);\r\n}\r\n","import { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { createBrowserHistory as createHistory } from 'history';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nconst history = createHistory();\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst routeMiddleware = routerMiddleware(history);\r\n\r\nconst middlewares = [thunk, sagaMiddleware, routeMiddleware];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  ...reducers,\r\n  router: connectRouter(history),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middlewares)),\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport { store, history };\r\n","export default __webpack_public_path__ + \"static/media/Exo2-Regular.af769842.otf\";","import { transparentize } from 'polished';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { palette } from 'styled-theme';\r\n\r\nimport { media } from 'helpers/styleHelper';\r\n\r\nimport normalFont from 'assets/font/Exo2-Regular.otf';\r\n\r\nimport 'antd/dist/antd.dark.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nexport const fontConfig = {\r\n  custom: {\r\n    families: ['Exo 2'],\r\n  },\r\n};\r\n\r\nexport const ThemedGlobalStyle = createGlobalStyle`\r\n  body {\r\n    min-height: 100vh;\r\n    background-color: ${palette('background', 3)};\r\n  }\r\n`;\r\n\r\nexport const AppHolder = styled.div`\r\n  @font-face {\r\n    font-family: 'Exo 2';\r\n    src: url(${normalFont});\r\n    font-weight: normal;\r\n    font-display: fallback;\r\n  }\r\n\r\n  font-family: 'Exo 2';\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6,\r\n  a,\r\n  p,\r\n  li,\r\n  input,\r\n  textarea,\r\n  span,\r\n  div,\r\n  img,\r\n  th,\r\n  td,\r\n  svg {\r\n    margin-bottom: 0;\r\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.004);\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    &::selection {\r\n      background: ${palette('primary', 0)};\r\n      color: ${palette('background', 1)};\r\n    }\r\n  }\r\n\r\n  a,\r\n  button,\r\n  input,\r\n  .ant-slider > div,\r\n  .ant-table-thead > tr > th,\r\n  .ant-table-tbody > tr > td,\r\n  .ant-tabs-nav .ant-tabs-tab {\r\n    transition: none;\r\n  }\r\n\r\n  .ant-spin.ant-spin-spinning {\r\n    .ant-spin-dot-item {\r\n      background-color: ${palette('primary', 0)};\r\n    }\r\n  }\r\n\r\n  .ant-notification-notice {\r\n    background: ${palette('background', 1)};\r\n    color: ${palette('text', 0)};\r\n\r\n    .ant-notification-notice-message {\r\n      color: ${palette('text', 0)};\r\n    }\r\n    .ant-notification-notice-close {\r\n      svg {\r\n        color: ${palette('text', 0)} !important;\r\n      }\r\n    }\r\n  }\r\n\r\n  .app-layout {\r\n    background-repeat: no-repeat;\r\n    background-image: ${({ theme }) =>\r\n      `radial-gradient(50% 50% at 50% 50%, ${transparentize(\r\n        0.9,\r\n        '#23DCC8',\r\n      )} 0%, ${transparentize(1, theme.palette.background[0])} 100%)`};\r\n    }\r\n  }\r\n\r\n  .ant-popover {\r\n    .ant-popover-content {\r\n      background: ${props => transparentize(0.4, props.theme.palette.background[0])};\r\n      border: 1px solid ${palette('gray', 0)};\r\n      border-radius: 8px;\r\n    }\r\n    .ant-popover-arrow {\r\n      border-bottom: none;\r\n      border-right: none;\r\n      border-color: ${palette('gray', 0)};\r\n    }\r\n    .ant-popover-inner {\r\n      border: 1px solid ${palette('gray', 0)};\r\n      background-color: ${props => transparentize(0.4, props.theme.palette.background[0])};\r\n    }\r\n  }\r\n\r\n  .ant-popover-inner-content {\r\n    padding: 6px;\r\n    font-size: 11px;\r\n    letter-spacing: 0.5px;\r\n    font-family: 'Exo 2';\r\n    src: url(${normalFont});\r\n  }\r\n\r\n  .ant-row:not(.ant-form-item) {\r\n    ${'' /* margin-left: -8px;\r\n    margin-right: -8px; */};\r\n    &:before,\r\n    &:after {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  .ant-row > div {\r\n    padding: 0;\r\n  }\r\n\r\n  .ant-table table,\r\n  .ant-table th,\r\n  .ant-table td {\r\n    border-radius: 0px !important;\r\n  }\r\n\r\n  .desktop-view {\r\n    display: none;\r\n    ${media.sm`\r\n      display: block;\r\n    `}\r\n  }\r\n`;\r\n","\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport { ConfigProvider } from 'antd';\r\nimport en_US from 'antd/es/locale-provider/en_US'; // same as default `locale` of `antd`\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport * as H from 'history';\r\n\r\n\r\nimport { RootState } from 'redux/store';\r\n\r\nimport asyncComponent from 'helpers/AsyncFunc';\r\n\r\nimport { isMainnet } from './env';\r\n\r\nconst maintenanceRoute = [\r\n  {\r\n    path: '*',\r\n    component: asyncComponent(() => import('./containers/500')),\r\n  },\r\n];\r\n\r\ntype RouteType = {\r\n  path: string;\r\n  exact?: boolean;\r\n  component: ReturnType<typeof asyncComponent>;\r\n};\r\n\r\nconst publicRoutes: RouteType[] = [\r\n  {\r\n    path: '',\r\n    component: asyncComponent(() => import('./containers/App')),\r\n    exact: true,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/404',\r\n    component: asyncComponent(() => import('./containers/404')),\r\n  },\r\n  {\r\n    exact: true,\r\n    path: '/500',\r\n    component: asyncComponent(() => import('./containers/500')),\r\n  },\r\n];\r\n\r\nconst isInMaintenance = () => {\r\n  if (isMainnet && process.env.REACT_APP_MAINNET_STATUS === 'maintenance') {\r\n    return true;\r\n  } else if (\r\n    !isMainnet &&\r\n    process.env.REACT_APP_WEBSITE_STATUS === 'maintenance'\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst routes = isInMaintenance() ? maintenanceRoute : publicRoutes;\r\n\r\ntype Props = {\r\n  history: H.History;\r\n};\r\n\r\nconst PublicRoutes = (props: Props) => {\r\n  const { history } = props;\r\n\r\n  return (\r\n    <ConfigProvider locale={en_US}>\r\n      <ConnectedRouter history={history}>\r\n        <div>\r\n          {routes.map((singleRoute: RouteType) => {\r\n            const { exact = false, ...otherProps } = singleRoute;\r\n            return (\r\n              <Route exact={exact} key={singleRoute.path} {...otherProps} />\r\n            );\r\n          })}\r\n        </div>\r\n      </ConnectedRouter>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default connect((state: RootState) => ({\r\n  user: state.Wallet.user,\r\n}))(PublicRoutes);\r\n","import React from 'react';\r\n\r\nimport { IntlProvider } from 'react-intl';\r\nimport { Provider as ReduxProvider, useSelector } from 'react-redux';\r\n\r\nimport themes, { ThemeType } from '@thorchain/asgardex-theme';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport WebFontLoader from 'components/utility/webfontloader';\r\n\r\nimport { store as reduxStore, history, RootState } from 'redux/store';\r\n\r\nimport { AppHolder, fontConfig, ThemedGlobalStyle } from 'settings/appStyle';\r\n\r\nimport Routes from './router';\r\n\r\nconst Main = () => {\r\n  const themeType = useSelector((state: RootState) => state.App.themeType);\r\n  const isLight = themeType === ThemeType.LIGHT;\r\n  const { light, dark } = themes;\r\n  const defaultTheme = isLight ? light : dark;\r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <ThemedGlobalStyle />\r\n      <AppHolder id=\"app-global\">\r\n        <Routes history={history} />\r\n      </AppHolder>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <WebFontLoader config={fontConfig}>\r\n      <ReduxProvider store={reduxStore}>\r\n        <IntlProvider locale={navigator.language}>\r\n          <Main />\r\n        </IntlProvider>\r\n      </ReduxProvider>\r\n    </WebFontLoader>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      /* eslint-disable no-param-reassign */\r\n      registration.onupdatefound = () => {\r\n        /* eslint-enable no-param-reassign */\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport { DEFAULT_BN_FORMAT } from 'settings/constants';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'settings/appStyle/global.css';\r\n\r\n// Set default format - it can be updated in future (i18n)\r\nBigNumber.config({ FORMAT: DEFAULT_BN_FORMAT });\r\n\r\n// disable all console logs in the production\r\nconst noop = () => {};\r\nif (process.env.NODE_ENV !== 'development') {\r\n  console.log = noop;\r\n  console.warn = noop;\r\n  console.error = noop;\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n//\r\n","import { Nothing, Maybe } from 'types/bepswap';\r\n\r\n/**\r\n * Returns a given ENV if it's valid only or returns a default value\r\n * @param env {string} ENV\r\n * @param defaultValue {string} Default value\r\n */\r\nexport const envOrDefault = (env: string | undefined, defaultValue: string) =>\r\n  env && env.length > 0 ? env : defaultValue;\r\n\r\n// $COMMIT_HASH is generated by webpack\r\nexport const COMMIT_HASH: Maybe<string> = $COMMIT_HASH || Nothing;\r\n"],"sourceRoot":""}
{"version":3,"sources":["views/Home/Home.style.ts","views/Home/Home.tsx","views/Home/index.ts"],"names":["HomeContainer","styled","ContentView","palette","PoolTableView","div","ActionContainer","Section","Table","UnstyledTable","Home","history","useHistory","dispatch","useDispatch","runeToCurrency","useGlobalState","useMidgard","actions","pools","poolLoading","useState","selectedPoolStatus","setSelectedPoolStatus","keyword","setKeyword","handleLoadPoolData","useCallback","getPools","handleSelectPoolStatus","status","handleChangeKeyword","e","target","value","centerAlign","rightAlign","poolActions","useMemo","key","align","title","onClick","typevalue","round","fixedWidth","SyncOutlined","render","_","pool","swapRouter","getSwapRoute","Asset","BNB","asset","to","stopPropagation","SwapOutlined","poolColumns","ticker","sortDirections","sorter","a","b","sortsBefore","chainToString","chain","localeCompare","Amount","fromAssetAmount","detail","assetPriceUSD","toFixed","fromMidgard","runeDepth","mul","toCurrencyFormat","defaultSortOrder","volume24h","Percent","poolAPY","filteredPools","filter","toString","toLowerCase","includes","renderPoolview","columns","dataSource","loading","onRow","record","push","getPoolDetailRoute","rowKey","content","selected","prefix","SearchOutlined","sizevalue","placeholder","onChange"],"mappings":"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","file":"static/js/9.408a2991.chunk.js","sourcesContent":["import { ContentView, Table as UnstyledTable } from 'components'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const HomeContainer = styled(ContentView)`\r\n  background: ${palette('background', 3)};\r\n`\r\nexport const PoolTableView = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 10px;\r\n`\r\n\r\nexport const ActionContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const Section = styled.div`\r\n  margin-bottom: 20px;\r\n`\r\n\r\nexport const Table = styled(UnstyledTable)`\r\n  .ant-table-row {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { SyncOutlined, SwapOutlined, SearchOutlined } from '@ant-design/icons'\r\nimport { chainToString } from '@xchainjs/xchain-util'\r\nimport { ColumnType } from 'antd/lib/table'\r\nimport {\r\n  TxTable,\r\n  GlobalStats,\r\n  GlobalChart,\r\n  AssetIcon,\r\n  Helmet,\r\n  PoolStatusFilter,\r\n  Button,\r\n  Input,\r\n} from 'components'\r\nimport { PoolStatus } from 'midgard-sdk'\r\nimport { Amount, Asset, Percent, Pool } from 'multichain-sdk'\r\nimport { AlignType } from 'rc-table/lib/interface'\r\n\r\nimport { useGlobalState } from 'redux/hooks'\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport { getSwapRoute, getPoolDetailRoute } from 'settings/constants'\r\n\r\nimport * as Styled from './Home.style'\r\n\r\nconst Home = () => {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const { runeToCurrency } = useGlobalState()\r\n  const { actions, pools, poolLoading } = useMidgard()\r\n\r\n  const [selectedPoolStatus, setSelectedPoolStatus] = useState<PoolStatus>(\r\n    'available',\r\n  )\r\n\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const handleLoadPoolData = useCallback(() => {\r\n    dispatch(actions.getPools(selectedPoolStatus))\r\n  }, [dispatch, actions, selectedPoolStatus])\r\n\r\n  const handleSelectPoolStatus = useCallback((status: PoolStatus) => {\r\n    setSelectedPoolStatus(status)\r\n  }, [])\r\n\r\n  const handleChangeKeyword = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setKeyword(e.target.value)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const centerAlign = 'center' as AlignType\r\n  const rightAlign = 'right' as AlignType\r\n\r\n  const poolActions = useMemo(\r\n    () => ({\r\n      key: 'action',\r\n      align: centerAlign,\r\n      title: (\r\n        <Styled.ActionContainer>\r\n          <Button\r\n            onClick={handleLoadPoolData}\r\n            typevalue=\"outline\"\r\n            round\r\n            fixedWidth={false}\r\n          >\r\n            <SyncOutlined />\r\n            refresh\r\n          </Button>\r\n        </Styled.ActionContainer>\r\n      ),\r\n      render: (_: string, pool: Pool) => {\r\n        const swapRouter = getSwapRoute(Asset.BNB(), pool.asset)\r\n\r\n        return (\r\n          <Styled.ActionContainer>\r\n            <Link to={swapRouter} onClick={(e) => e.stopPropagation()}>\r\n              <Button round>\r\n                <SwapOutlined />\r\n                SWAP\r\n              </Button>\r\n            </Link>\r\n          </Styled.ActionContainer>\r\n        )\r\n      },\r\n    }),\r\n    [handleLoadPoolData],\r\n  )\r\n\r\n  const poolColumns: ColumnType<Pool>[] = useMemo(\r\n    () => [\r\n      {\r\n        key: 'Pool',\r\n        title: 'Pool',\r\n        render: (pool: Pool) => (\r\n          <Styled.ActionContainer>\r\n            <AssetIcon asset={pool.asset} />\r\n          </Styled.ActionContainer>\r\n        ),\r\n        align: centerAlign,\r\n      },\r\n      {\r\n        key: 'Symbol',\r\n        title: 'Symbol',\r\n        align: centerAlign,\r\n        render: (pool: Pool) => pool.asset.ticker,\r\n        sortDirections: ['descend', 'ascend'],\r\n        sorter: (a: Pool, b: Pool) => a.asset.sortsBefore(b.asset),\r\n      },\r\n      {\r\n        key: 'Chain',\r\n        title: 'Chain',\r\n        align: centerAlign,\r\n        render: (pool: Pool) => chainToString(pool.asset.chain),\r\n        sortDirections: ['descend', 'ascend'],\r\n        sorter: (a: Pool, b: Pool) =>\r\n          chainToString(a.asset.chain).localeCompare(\r\n            chainToString(b.asset.chain),\r\n          ),\r\n      },\r\n      {\r\n        key: 'Price',\r\n        title: 'USD Price',\r\n        render: (pool: Pool) =>\r\n          `$${Amount.fromAssetAmount(pool.detail.assetPriceUSD, 8).toFixed(3)}`,\r\n        align: rightAlign,\r\n        sortDirections: ['descend', 'ascend'],\r\n        sorter: (a: Pool, b: Pool) =>\r\n          Amount.sorter(\r\n            Amount.fromAssetAmount(a.detail.assetPriceUSD, 8),\r\n            Amount.fromAssetAmount(b.detail.assetPriceUSD, 8),\r\n          ),\r\n      },\r\n      {\r\n        key: 'Depth',\r\n        title: 'Depth',\r\n        render: (pool: Pool) =>\r\n          runeToCurrency(\r\n            Amount.fromMidgard(pool.detail.runeDepth).mul(2),\r\n          ).toCurrencyFormat(0),\r\n        align: rightAlign,\r\n        sortDirections: ['descend', 'ascend'],\r\n        defaultSortOrder: 'descend',\r\n        sorter: (a: Pool, b: Pool) =>\r\n          Amount.sorter(\r\n            Amount.fromMidgard(a.detail.runeDepth),\r\n            Amount.fromMidgard(b.detail.runeDepth),\r\n          ),\r\n      },\r\n      {\r\n        key: 'Volume24h',\r\n        title: 'Volume 24h',\r\n        render: (pool: Pool) =>\r\n          runeToCurrency(\r\n            Amount.fromMidgard(pool.detail.volume24h),\r\n          ).toCurrencyFormat(0),\r\n        align: rightAlign,\r\n        sortDirections: ['descend', 'ascend'],\r\n        sorter: (a: Pool, b: Pool) =>\r\n          Amount.sorter(\r\n            Amount.fromMidgard(a.detail.volume24h),\r\n            Amount.fromMidgard(b.detail.volume24h),\r\n          ),\r\n      },\r\n      {\r\n        key: 'APY',\r\n        title: 'APY',\r\n        render: (pool: Pool) =>\r\n          `${new Percent(pool.detail.poolAPY).toFixed(0)}`,\r\n        align: rightAlign,\r\n        sortDirections: ['descend', 'ascend'],\r\n        sorter: (a: Pool, b: Pool) =>\r\n          Amount.sorter(\r\n            Percent.fromMidgard(a.detail.poolAPY),\r\n            Percent.fromMidgard(b.detail.poolAPY),\r\n          ),\r\n      },\r\n      poolActions,\r\n    ],\r\n    [poolActions, runeToCurrency],\r\n  )\r\n\r\n  const filteredPools = useMemo(() => {\r\n    if (!keyword) return pools\r\n\r\n    return pools.filter((pool) =>\r\n      pool.asset.toString().toLowerCase().includes(keyword),\r\n    )\r\n  }, [pools, keyword])\r\n\r\n  const renderPoolview = useMemo(\r\n    () => (\r\n      <Styled.Table\r\n        columns={poolColumns}\r\n        dataSource={filteredPools}\r\n        loading={poolLoading}\r\n        onRow={(record: Pool) => ({\r\n          onClick: () => history.push(getPoolDetailRoute(record)),\r\n        })}\r\n        rowKey=\"key\"\r\n      />\r\n    ),\r\n    [poolColumns, filteredPools, poolLoading, history],\r\n  )\r\n\r\n  return (\r\n    <Styled.HomeContainer>\r\n      <Helmet title=\"BEPSwap\" content=\"Multichain BEPSwap web app\" />\r\n      <Styled.Section>\r\n        <GlobalStats />\r\n      </Styled.Section>\r\n      <Styled.Section>\r\n        <GlobalChart />\r\n      </Styled.Section>\r\n      <PoolStatusFilter\r\n        selected={selectedPoolStatus}\r\n        onClick={handleSelectPoolStatus}\r\n      />\r\n      <Styled.PoolTableView>\r\n        <Input\r\n          prefix={<SearchOutlined />}\r\n          sizevalue=\"big\"\r\n          placeholder=\"Search pools...\"\r\n          value={keyword}\r\n          onChange={handleChangeKeyword}\r\n        />\r\n        {renderPoolview}\r\n      </Styled.PoolTableView>\r\n      <TxTable />\r\n    </Styled.HomeContainer>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import Home from './Home'\r\n\r\nexport default Home\r\n"],"sourceRoot":""}
{"version":3,"sources":["assets/SVG/asset-bnb.svg","assets/SVG/asset-code-icon.svg","assets/SVG/asset-rune.svg","assets/SVG/logo-bepswap.svg","assets/SVG/logo-thorchain-black.svg","assets/SVG/telegram.svg","assets/timer/icon-tick-fill.svg","assets/timer/refund.svg","assets/timer/timerchart-1.svg","assets/timer/timerchart-2.svg","assets/timer/timerchart-3.svg","assets/timer/timerchart-4.svg","assets/timer/timerchart-full.svg","settings/constants/router.ts","redux/midgard/slice.ts","redux/rootReducer.ts","redux/store.ts","assets/font/Exo2-Regular.otf","settings/appStyle/appStyle.tsx","helpers/history.ts","router.tsx","App.tsx","reportWebVitals.ts","settings/init.ts","index.tsx","midgard-sdk/api/api.ts","midgard-sdk/api/base.ts","midgard-sdk/api/configuration.ts","midgard-sdk/config.ts","midgard-sdk/Midgard.ts","multichain-sdk/constants/amount.ts","redux/midgard/hooks.ts","services/midgard.ts","services/multichain.ts","redux/app/types.ts","redux/app/hooks.ts","services/binance/util.ts","components/UIElements/Button/Button.style.ts","components/UIElements/Button/Button.tsx","helpers/storage.ts","multichain-sdk/constants/decimals.ts","redux/wallet/hooks.ts","hooks/useInterval.ts","redux/app/slice.ts","settings/style-util.ts","redux/wallet/actions.ts","redux/hooks.ts","settings/constants/global.ts","helpers/color.ts","components/Assets/AssetIcon/AssetIcon.style.ts","settings/logoData.ts","components/Assets/AssetIcon/AssetIcon.tsx","hooks/useRemoteImage.ts","components/Assets/AssetIcon/utils.ts","components/UIElements/InputAmount/InputAmount.style.ts","components/UIElements/InputAmount/InputAmount.tsx","components/UIElements/InputAmount/utils.ts","components/Logo/Logo.style.ts","components/Logo/Logo.tsx","components/UIElements/Input/Input.style.ts","components/UIElements/Input/Input.tsx","components/UIElements/Tooltip/Tooltip.style.ts","components/UIElements/Tooltip/Tooltip.tsx","components/UIElements/StatsCard/StatsCard.tsx","helpers/element.ts","settings/config.ts","multichain-sdk/index.ts","redux/wallet/slice.ts","components/Chart/index.ts","multichain-sdk/clients/types.ts","multichain-sdk/clients/binance.ts","hooks/usePrevious.ts","settings/constants/currency.ts","components/Assets/AssetData/AssetData.style.tsx","components/Assets/AssetData/AssetData.tsx","components/Assets/AssetMenu/AssetMenu.tsx","components/Assets/AssetSelect/AssetSelect.style.ts","components/Assets/AssetSelect/AssetSelect.tsx","components/Assets/AssetInput/AssetInput.style.ts","components/Assets/AssetCard/AssetCard.style.ts","components/Assets/AssetInputCard/AssetInputCard.style.ts","components/Assets/AssetInput/AssetInput.tsx","components/Assets/AssetInputCard/AssetInputCard.tsx","hooks/useNetwork.ts","components/Header/Header.style.ts","components/Header/Header.tsx","components/NetworkStatus/NetworkStatus.style.ts","components/NetworkStatus/NetworkStatus.tsx","helpers/api.ts","components/UIElements/FilterMenu/FilterMenu.style.ts","components/UIElements/FilterMenu/FilterMenu.tsx","hooks/useOutsideClick.ts","components/ContentView/ContentView.style.ts","components/ContentView/ContentView.tsx","components/Footer/Footer.style.ts","components/Footer/Footer.tsx","components/CurrencySelector/CurrencySelector.style.ts","components/CurrencySelector/CurrencySelector.tsx","components/Refresh/Refresh.style.tsx","components/Refresh/Refresh.tsx","components/ThemeSwitch/ThemeSwitch.style.ts","components/ThemeSwitch/ThemeSwitch.tsx","components/WalletDrawer/WalletDrawer.style.ts","components/WalletDrawer/WalletDrawer.tsx","components/BalanceView/BalanceView.style.ts","components/BalanceView/BalanceView.tsx","components/ChainHeader/ChainHeader.style.ts","components/ChainHeader/ChainHeader.tsx","components/UIElements/Slider/Slider.style.ts","components/UIElements/Slider/Slider.tsx","components/UIElements/Table/Table.style.ts","components/UIElements/Table/Table.tsx","components/Panel/Panel.tsx","components/UIElements/WalletButton/WalletButton.tsx","components/Loaders/ChartLoader/ChartLoader.tsx","services/binance/index.ts","components/UIElements/index.ts","multichain-sdk/entities/amount.ts","multichain-sdk/entities/swap.ts","multichain-sdk/entities/asset.ts","multichain-sdk/entities/pool.ts","multichain-sdk/entities/price.ts","multichain-sdk/entities/assetAmount.ts","multichain-sdk/entities/percent.ts","multichain-sdk/entities/memo.ts","multichain-sdk/clients/index.ts","services/binance/client.ts","helpers/style.ts","services/binance/types/index.ts","services/binance/types/binance.ts","services/binance/types/binance-ws.ts","../node_modules/@binance-chain/javascript-sdk/lib/ledger sync","components/UIElements/FancyButton/index.tsx","components/Link/index.tsx","helpers/string.ts","components/Tx/TxTable/TxTable.style.ts","components/Tx/TxTable/TxTable.tsx","components/Tx/TxStatus/TxStatus.style.ts","components/Tx/TxStatus/TxStatus.tsx","components/Tx/TxInfo/TxInfo.style.ts","components/Tx/TxInfo/TxInfo.tsx","components/Tx/TxLabel/TxLabel.style.ts","components/Tx/TxLabel/TxLabel.tsx","components/Tx/TxFilter/TxFilter.style.ts","components/Tx/TxFilter/TxFilter.tsx","hooks/useTimeout.ts","components/Modals/ConfirmModal/ConfirmModal.style.ts","components/Modals/ConfirmModal/ConfirmModal.tsx","components/Modals/VerifyModal/VerifyModal.style.ts","components/WalletModal/Keystore/Keystore.style.ts","components/WalletModal/Keystore/index.ts","components/WalletModal/Keystore/Keystore.tsx","components/WalletModal/WalletModal.style.ts","components/WalletModal/index.ts","components/WalletModal/WalletModal.tsx","components/Layout/Layout.style.ts","components/Layout/Layout.tsx","multichain-sdk/clients/bitcoin.ts","multichain-sdk/clients/ethereum.ts","multichain-sdk/config/index.ts","multichain-sdk/clients/litecoin.ts","multichain-sdk/clients/thorchain.ts","multichain-sdk/clients/multichain.ts","components/Loaders/PageLoader/PageLoader.tsx","helpers/number.ts","components/Chart/Chart.style.ts","components/Chart/utils.ts","components/Chart/Chart.tsx","redux/midgard/actions.ts","components/BackLink/BackLink.style.ts","components/BackLink/BackLink.tsx","components/PoolStatusFilter/PoolStatusFilter.style.ts","components/PoolStatusFilter/PoolStatusFilter.tsx","components/ToolCard/ToolCard.style.ts","components/ToolCard/ToolCard.tsx","components/Popover/Popover.style.ts","components/SettingsOverlay/SettingsOverlay.tsx","hooks/useOnClickOutside.ts","components/UIElements/AddWallet/AddWallet.style.ts","components/UIElements/Collapse/Collapse.style.ts","components/UIElements/Collapse/Collapse.tsx","components/UIElements/ContentTitle/ContentTitle.style.ts","components/UIElements/ContentTitle/ContentTitle.tsx","components/UIElements/Description/Description.style.ts","components/UIElements/Drag/Drag.style.tsx","components/UIElements/InputNumber/InputNumber.style.ts","components/UIElements/Modal/Modal.style.ts","components/UIElements/Modal/Modal.tsx","components/UIElements/StatusBadge/StatusBadge.style.ts","components/UIElements/StatusBadge/StatusBadge.tsx","components/UIElements/StepBar/StepBar.style.ts","components/UIElements/Tabs/Tabs.style.ts","components/UIElements/Tabs/Tabs.tsx","components/UIElements/TxProgress/TxProgress.style.ts","components/UIElements/TxTimer/TxTimer.style.ts","components/UIElements/Information/Information.style.ts","components/UIElements/Information/Information.tsx","multichain-sdk/utils/wallet.ts","multichain-sdk/utils/asset.ts","components/Helmet/Helmet.tsx","components/WebFontLoader/WebFontLoader.tsx","components/GlobalStats/GlobalStats.tsx","components/GlobalChart/GlobalChart.tsx","components/PoolStats/PoolStats.tsx","components/PoolChart/PoolChart.tsx","components/UIElements/Menu/Menu.tsx","components/UIElements/Notification/Notification.tsx","components/UIElements/IconButton/IconButton.ts","components/UIElements/CoreButton/CoreButton.ts","components/UIElements/Overlay/Overlay.tsx","components/UIElements/FancyButton/FancyButton.style.ts","components/UIElements/FancyButton/FancyButton.tsx","components/UIElements/Label/Label.style.ts","components/UIElements/Label/Label.tsx","components/index.ts"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","x1","y1","x2","y2","stroke","strokeWidth","_ref3","_ref4","_ref5","_ref6","strokeLinecap","SvgAssetCodeIcon","_ref","svgRef","title","titleId","props","width","height","viewBox","xmlns","xmlnsXlink","ref","undefined","id","ForwardRef","stopColor","offset","fill","fillRule","transform","d","SvgLogoBepswap","points","SvgLogoThorchainBlack","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","SvgTelegram","x","y","style","enableBackground","xmlSpace","SvgIconTickFill","SvgRefund","SvgTimerchartFull","HOME_ROUTE","TOOLS_ROUTE","EXPLORERS_ROUTE","EDUCATION_ROUTE","STATS_ROUTE","FAQS_ROUTE","TX_ROUTE","POOL_DETAIL_ROUTE","getPoolDetailRoute","pool","asset","toString","getPoolDetailRouteFromAsset","SEND_ROUTE","getSendRoute","SWAP_ROUTE","getSwapRoute","input","output","slice","createSlice","name","initialState","pools","poolLoading","stats","networkData","constants","queue","poolStats","poolStatsLoading","depthHistory","depthHistoryLoading","earningsHistory","earningsHistoryLoading","swapHistory","swapHistoryLoading","liquidityHistory","liquidityHistoryLoading","txData","txDataLoading","reducers","extraReducers","builder","addCase","midgardActions","pending","state","fulfilled","action","payload","reduce","res","poolDetail","poolObj","Pool","fromPoolData","push","rejected","reducer","actions","rootReducer","combineReducers","app","appReducer","midgard","midgardReducer","wallet","walletReducer","middlewares","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","concat","devTools","process","useReduxSelector","fontConfig","custom","families","ThemedGlobalStyle","createGlobalStyle","palette","AppHolder","styled","div","normalFont","theme","transparentize","background","history","createHistory","routes","exact","path","component","lazy","PublicRoutes","fallback","map","route","index","Component","render","transparent","Main","isLight","useSelector","themeType","ThemeType","LIGHT","light","themes","dark","defaultTheme","App","config","reduxStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","noop","console","log","warn","error","appInit","ReactDOM","StrictMode","document","getElementById","ActionStatusEnum","ActionTypeEnum","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","RequiredError","field","msg","Error","DefaultApiAxiosParamCreator","getActions","limit","address","txid","type","a","options","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","queryParameters","URLSearchParams","search","set","query","headersFromBaseOptions","headers","url","pathname","hash","getDepthHistory","interval","count","to","from","encodeURIComponent","String","getEarningsHistory","getHealth","getLiquidityHistory","getMemberDetail","getMembersAdresses","getNetworkData","getNodes","getPool","getPoolStats","period","getPoolStatsLegacy","getPools","status","getProxiedConstants","getProxiedInboundAddresses","getProxiedLastblock","getProxiedQueue","getStats","getSwapHistory","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","DefaultApi","Configuration","param","apiKey","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","MIDGARD_TESTNET_URL","MidgardV2","network","baseUrl","version","setBaseUrl","noCache","getMidgardBaseUrl","getMidgard","apiConfig","getVersion","getBaseUrl","data","Promise","reject","getPoolDetail","getPoolStatsV1","params","txId","getMembersAddresses","getConstants","getInboundAddresses","getInboundAddressByChain","chain","inboundData","chainAddress","find","item","getLastblock","getQueue","Midgard","DEFAULT_SLIP_LIMIT","MAX_HISTORY_COUNT","PER_DAY","useMidgard","dispatch","useDispatch","midgardState","isGlobalHistoryLoading","useMemo","getGlobalHistory","useCallback","getPoolHistory","getTxData","TX_PUBLIC_PAGE_LIMIT","midgardApi","multichain","MultiChain","FeeOptions","useApp","appState","baseCurrencyAsset","Asset","fromAssetString","baseCurrency","USD","setTheme","setThemeType","setBaseCurrency","baseAsset","toggleSettings","setSlippage","slip","setFeeOptionType","feeOption","isTransferFee","v","msg_type","fee","fee_for","isFee","fixed_fee_params","multi_transfer_fee","parseTx","tx","t","assetFromString","AssetBNB","txAsset","fromAddr","amount","assetToBase","assetAmount","value","toAddr","date","Date","timeStamp","txType","txHash","getPrefix","fontSettings","small","size","spacing","normal","big","sizes","borderBottom","colorGroups","primary","main","darken","lighten","text","success","warning","forEach","colorType","gradient","default","border","focus","outline","ghost","getThemes","getThemeValue","color","typeValue","ButtonWrapper","Button","round","sizevalue","fixedWidth","weight","typevalue","children","focused","className","otherProps","THEME_TYPE","BEPSWAP_MULTICHAIN_KEYSTORE","BEPSWAP_MULTICHAIN_ADDR","BASE_CURRENCY","saveBaseCurrency","currency","localStorage","setItem","getBaseCurrency","getItem","saveTheme","getTheme","DARK","saveKeystore","keystore","sessionStorage","JSON","stringify","getKeystore","parse","saveAddress","getAddress","THORCHAIN_DECIMAL","BNB_DECIMAL","BTC_DECIMAL","ETH_DECIMAL","LTC_DECIMAL","DEFAULT_CHAIN_DECIMAL","MULTICHAIN_DECIMAL","useWallet","walletState","unlockWallet","connectWallet","walletActions","setIsConnectModalOpen","visible","INACTIVE_INTERVAL","NaN","useInterval","callback","delay","savedCallback","useRef","useEffect","current","Number","isNaN","setInterval","clearInterval","isSettingOpen","slippageTolerance","DEFAULT_SLIPPAGE_TOLERANCE","feeOptionType","assetString","setSettingsOpen","slippage","transition","timing","boxShadow","shadow","loadWallet","createAsyncThunk","useGlobalState","loadInitialData","refreshPage","runeToCurrency","runeAmount","quoteAsset","runeToAsset","rainbowStop","h","f","n","k","Math","max","min","rgb2hex","floor","r","g","b","padStart","fontSizes","large","IconWrapper","IconFallback","Icon","img","assetIconMap","ABCD","AERGO","ALA","ANKR","ARN","ARPA","ART","ATP","AVA","AWC","AXPR","BAW","BCH","BCPT","BEAR","BET","BETX","BGBP","BHC","BHFT","BIDR","BKBT","BKRW","BLINK","BOLT","BST2","BTC","BTCB","BTTB","BULL","BUSD","BZNT","CAN","CAS","CBIX","CBM","CHZ","CNNS","COS","COTI","COVA","CRPT","CSM","DARC","DEEP","DEFI","DOS","DREP","DUSK","EBST","ECO","EET","ENTRP","EOS","EOSBEAR","EOSBULL","EQL","ERD","ETH","ETHBEAR","ETHBULL","EVT","FRM","FSN","FTM","GIV","GMAT","GTEX","GTO","HNST","HYN","IDRTB","IRIS","JDXU","KAT","KAVA","LBA","LIT","LOKI","LTC","LTO","LYFE","MATIC","MCASH","MDAB","MEDB","MEETONE","MITH","MITX","MTV","MTXLT","MVL","MZK","NEW","NEXO","NODE","NOIZB","NOW","NPXB","NPXSXEM","ONE","ONT","OWTX","PCAT","PHB","PHV","PIBNB","PLG","PVT","PYN","QBX","RAVEN","RNO","RUNE","SBC","SHR","SLV","SPNDB","STYL","SWINGBY","SWIPE","SXP","TAUDB","TCADB","TGBPB","THKDB","TM2","TOMOB","TOP","TROY","TRUE","TRXB","TUSDB","TWT","UGAS","UND","UPX","USDH","USDT","USDSB","VDX","VIDT","VNDC","VOTE","VRAB","WICC","WINB","WISH","WRX","XBASE","XNS","XRP","XRPBEAR","XRPBULL","XTZ","ZEBI","AssetIcon","React","memo","rest","remoteIconImage","src","useState","RD","remoteImage","setRemoteImage","onLoadHandler","onErrorHandler","image","Image","addEventListener","removeEventListener","useRemoteImage","isBNB","bnbIcon","isRUNE","nativeRuneIcon","ticker","logoSymbol","symbol","getAssetIconUrl","renderIcon","renderPendingIcon","LoadingOutlined","renderFallbackIcon","numbers","str","inputStr","toUpperCase","firstInt","charCodeAt","secondInt","toFixed","getIntFromName","backgroundImage","StyledInput","Input","outlined","InputAmount","Amount","fromAssetAmount","onChange","decimal","disabled","others","rawValue","setRawValue","handleChange","e","newValue","trim","split","includes","bn","BigNumber","getAmountFromString","LogoWrapper","BepswapIconWrapper","Logo","colors","InputWrapper","TooltipContent","InfoIcon","InfoCircleOutlined","Tooltip","placement","tooltip","content","getPopupContainer","getAppContainer","overlayStyle","animationDuration","animation","mouseEnterDelay","Question","StatsCard","Statistic","defaultEnv","env","walletLoading","isConnectModalOpen","supportedChains","BTCChain","BNBChain","THORChain","ETHChain","LTCChain","BnbChain","phrase","balances","client","loadBalance","getBalance","assetObj","amountObj","AmountType","BASE_AMOUNT","AssetAmount","hasAmountInBalance","assetBalance","eq","gte","getAssetBalance","transfer","recipient","baseAmount","multiSend","assetAmount1","assetAmount2","transactions","coins","BncClient","usePrevious","currencyIndexAssets","BNB","Wrapper","Row","attrs","align","UIAssetIcon","TickerLabel","Label","textTransform","AmountLabel","PriceLabel","AssetData","price","showLabel","labelSize","filterFunction","searchTerm","AssetMenu","searchPlaceholder","assets","withSearch","searchDisable","onSelect","closeMenu","filteredData","filter","cellRenderer","node","disableItemFilterHandler","FilterMenu","placeholder","searchEnabled","disableItemFilter","AssetSelectWrapper","AssetSelectMenuWrapper","DropdownIcon","CaretDownOutlined","open","DropdownIconHolder","AssetDropdownButton","button","css","UnstyledAssetData","Selector","DropdownCarret","onClick","AssetSelect","minWidth","openDropdown","setOpenDropdown","handleChangeAsset","assetId","changedAsset","renderMenu","sortedAssetData","sort","sortsBefore","overlay","trigger","stopPropagation","renderDropDownButton","AssetInputWrapper","BaseAssetSelect","UnstyledInputAmount","CardWrapper","CardContent","AssetInputContent","AssetInput","info","label","inputProps","inputRef","onChangeHandler","handleClickWrapper","firstChild","UnstyledAssetSelect","AssetInfo","BalanceLabel","MaxBtn","Balance","AssetInputCard","balance","usdPrice","onMax","toCurrencyFormat","QueueLevel","useNetwork","queueValue","outboundQueue","outbound","outboundQueueLevel","BUSY","SLOW","GOOD","isOutboundBusy","isOutboundDelayed","statusColor","totalPooledRune","fromMidgard","globalRunePooledStatus","isValidFundCaps","getOutboundBusyTooltip","HeaderContainer","HeaderLogo","HeaderAction","HeaderCenterWrapper","WalletBtn","WalletButton","TxIcon","ToolWrapper","Header","useHistory","drawerVisible","setDrawerVisible","isConnected","handleClickWalletBtn","handleCloseDrawer","handleClickTx","handleSelectCurrency","NetworkStatus","ThemeSwitch","CurrencySelector","selected","currencies","connected","WalletDrawer","onClose","Refresh","onRefresh","StatusItem","DropdownLink","globalStatus","midgardUrl","u","parsed","hostname","getHostnameFromUrl","menuItems","menu","fontWeight","letterSpacing","Item","display","alignItems","padding","paddingLeft","href","DownOutlined","AntdMenu","MenuItem","Menu","setSearchTerm","handleClick","event","handleSearchChanged","newSearchTerm","currentTarget","callbackRef","clickHandler","contains","window","useClickOutside","suffix","SearchOutlined","disableItem","ContentViewWrapper","ContentView","FooterItem","FooterContainer","media","sm","StyledFooter","md","Footer","rel","link","TwitterOutlined","RedditOutlined","MediumOutlined","TelegramIcon","GithubOutlined","handleSelect","selectedKeys","currencyAsset","StyledButton","loading","setLoading","handleRefresh","setTimeout","SyncOutlined","spin","IconButton","toggleTheme","Drawer","AntDrawer","handleSendAsset","closable","BalanceView","onSendAsset","Container","ChainContainer","BalanceRow","SendBtn","renderBalance","chainBalance","getTotalUSDPriceInBalance","totalPrice","formatBigNumber","ChainHeader","renderChainBalance","ChainInfo","InfoLabel","Address","AddressLabel","Tools","miniAddress","accountUrl","getExplorerAddressUrl","handleCopyAddress","copy","chainToString","CopyOutlined","SliderWrapper","Slider","SliderLabel","withLabel","sliderRef","onAfterChange","blur","TableWrapper","Table","sizeValue","lg","pagination","Panel","LoaderWrapper","ChartLoader","Rounding","SwapType","QuoteType","roundingMode","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","EMPTY_FORMAT","groupSeparator","NUMBER_FORMAT","prefix","decimalSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","decimalAmount","dividedBy","multipliedBy","ASSET_AMOUNT","plus","minus","isGreaterThanOrEqualTo","isGreaterThan","isLessThanOrEqualTo","isLessThan","isEqualTo","significantDigits","format","rounding","invariant","isInteger","FORMAT","significant","toPrecision","toFormat","decimalPlaces","fixed","toFixedDecimal","toNumber","getTicker","getDecimalByChain","assetToString","getAssetObj","currencySymbolByAsset","AssetRuneNative","AssetBTC","AssetETH","AssetLTC","runeDepth","assetDepth","detail","assetUSDPrice","assetPriceUSD","involvesAsset","runePriceInAsset","assetPriceInRune","fromBaseAmount","Price","priceAmount","unitPrice","mul","byAsset","baseAssetPool","quoteAssetPool","raw","fixedLabel","toFixedRaw","isUSDBased","invert","add","sub","isPrefix","significantValue","currencySymbol","Percent","toSignificant","Memo","limitString","percent","Swap","inputAsset","outputAsset","slipLimitPercent","swapType","swapPools","quoteType","inputAmount","outputAmount","outputAmountAfterFee","outputPercent","feePercent","estimatedNetworkFee","hasInSufficientFee","_0_AMOUNT","SINGLE_SWAP","firstSwapPool","DOUBLE_SWAP","secondSwapPool","lastPool","getNetworkFee","EXACT_IN","getOutputAmount","getOutputAfterNetworkFee","lt","EXACT_OUT","getInputAmount","getFee","getOutputPercent","getFeePercent","getSlip","gt","lte","isSlipValid","getSingleSwapOutput","firstSwapOutput","toRUNE","swapOutputAmount","runeDepthAfterSwap","assetDepthAfterSwap","poolAfterSwap","networkFee","networkFeeInRune","feeAmount","priceOf","getSingleSwapOutputAfterNetworkFee","doubleSwapOutput","inputAmountInOutputAsset","totalPriceIn","getSingleSwapInput","secondSwapInput","getSingleSwapSlip","firstSlip","secondSlip","getSingleSwapFee","firstSwapFeeInRune","secondSwapFeeInAsset","firstSwapFeeInAsset","X","Y","numerator","denominator","pow","part1","part2","sqrt","depthOf","Client","bncClient","privateKey","setAddress","setPrivateKey","crypto","getClientUrl","getExplorerUrl","getExplorerTxUrl","txID","setPhrase","xchainCrypto","getPrivateKey","validateAddress","checkAddress","free","searchTransactions","clientUrl","endTime","now","diffTime","searchParams","parseInt","get","response","txHistory","total","txs","Boolean","getTransactions","startTime","getTime","getTransactionData","txResult","blockHeight","msgs","inputs","outputs","transaction","initChain","catch","coin","denom","baseToAsset","transferResult","result","getTransferFee","feesArray","transferFee","getFees","singleTxFee","fast","fastest","average","getMultiSendFees","multiTxFee","getSingleAndMultiFees","single","multi","chooseNetwork","mediaQueries","xs","xl","xxl","acc","segment","OrderStatus","Taker","webpackEmptyContext","req","code","resolve","module","exports","ExternalButtonLink","ButtonLink","truncateAddress","addr","first","substr","last","StyledText","StyledTx","StyledLink","StyledLinkText","TransactionWrapper","StyledPagination","Pagination","tags","swap","addLiquidity","withdraw","donate","refund","TxTable","isDesktopView","Grid","useBreakpoint","currentTxPage","setCurrentTxPage","renderTxAssets","txObj","coinAsset","txUrl","LinkOutlined","assetName","assetValue","amountValue","displayLabel","getColumnRenderer","_","row","in","out","moment","unix","fromNow","columnRenders","addressColumn","dataIndex","dateColumn","typeColumn","inColumn","outColumn","desktopColumns","mobileColumns","columns","dataSource","defaultCurrent","showSizeChanger","TxStatusWrapper","TxStatusContent","Seperator","TxStatus","TxInfoWrapper","Dash","TxInfo","metadata","inData","outData","slipValueLabel","tradeSlip","TxLabelWrapper","TxLabel","SwapOutlined","Withdraw","ImportOutlined","AddLiquidity","DoubleRightOutlined","Unstyled","DesktopButton","MobileButton","TxFilter","items","icon","DatabaseOutlined","handleClickItem","menuLabel","FilterOutlined","useTimeout","clearTimeout","Content","ModalIcon","ModalData","FancyButton","ConfirmModal","onOk","onCancel","setPassword","invalidPassword","setInvalidPassword","validating","setValidating","handleCancel","handleConfirm","onChangePasswordHandler","handleOK","validateKeystore","isOpen","onDismiss","modalIcon","LockOutlined","onFinish","autoComplete","extra","data-test","renderModalContent","UnstyledModal","FormLabel","PasswordLabel","PasswordInput","FooterContent","Keystore","onConnect","setKeystore","invalideStatus","setInvalideStatus","keystoreError","setKeystoreError","processing","setProcessing","onChangeFile","file","reader","FileReader","readAsText","onErrorFile","onPasswordChange","handleUnlock","getPrivateKeyFromKeyStore","getAddressFromPrivateKey","bnb","getClient","ready","onError","CheckCircleTwoTone","twoToneColor","UploadOutlined","QuestionCircleOutlined","allowClear","htmlType","ConnectContainer","TabContent","WalletModal","handleConnect","AntLayout","LayoutWrapper","ContentWrapper","Layout","BtcChain","feeOptionKey","getFeeRates","feeRates","feeRate","BtcClient","EthChain","EthClient","etherscanApiKey","LtcChain","blockchairUrl","LtcClient","nodeUrl","ThorChain","ThorClient","deposit","chains","thor","btc","eth","ltc","initWallet","getPhrase","getPoolAddressByChain","poolAddress","getChainClient","chainClient","recipientAddress","swapMemo","minOutputAmount","depositMemo","withdrawMemo","getMinAmountByChain","getMidgardNetwork","PageLoader","abbreviateNumber","suffixes","suffixNum","ChartContainer","gradientStart","gradientStop","TypeContainer","TimeContainer","HeaderToggle","span","ChartWrapper","LineChart","Line","BarChart","Bar","ComingSoonWrapper","ComingSoonText","p","BlurWrapper","isBlur","getRandomChartData","randomSeries","minValue","maxValue","series","itr","subtract","isBefore","time","random","generateRandomTimeSeries","labels","values","join","getDisplayData","canvas","gradientStroke","ctx","getContext","createLinearGradient","addColorStop","datasets","lineTension","backgroundColor","borderColor","line","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","borderWidth","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","defaults","global","defaultFontSize","defaultFontStyle","Chart","chartIndexes","chartData","selectedIndex","selectChart","chartTimeframe","setChartTimeframe","backgroundGradientStart","backgroundGradientStop","randomData","selectedChartData","isComingSoonChart","comingSoon","isChartLoading","selectedChartType","selectedChartValues","unit","filteredByTime","takeRight","getData","getRandomSeries","maintainAspectRatio","legend","layout","left","right","top","bottom","duration","tooltips","titleFontSize","bodyFontSize","callbacks","yLabel","Intl","NumberFormat","scales","xAxes","gridLines","ticks","fontSize","fontColor","maxTicksLimit","autoSkipPadding","maxRotation","yAxes","stacked","autoSkip","renderComingSoonChart","chartIndex","BackLinkWrapper","BackLink","handleGoBack","LeftOutlined","PoolFilterWrapper","PoolStatusFilter","CheckCircleOutlined","FieldTimeOutlined","Card","Title","Description","Info","ToolCard","description","StyledMenuIcon","Settings","text1","StyledMenu","MenuFlyout","StyledCol","StyledRow","StyledToggleBtn","slipOptions","SettingsOverlay","toggle","handler","handlerRef","handleClickOutside","useOnClickOutside","slipOption","AntPanel","Collapse","CollapseWrapper","bordered","header","ContentTitleWrapper","gray","ContentTitle","NoWrapLabel","ICON_SIZE","dragging","missed","overlap","BaseAssetIcon","CheckOutlined","InputNumber","ModalWrapper","Modal","okButtonProps","cancelButtonProps","red","yellow","green","StatusBadgeWrapper","StatusBadge","Tabs","withBorder","AntTabs","TabPane","Information","getWalletAssets","getWalletAddressByChain","emptyAmount","assetData","assetPool","getAssetUSDPrice","Helmet","WebFontLoader","onStatus","setStatus","handleLoading","handleActive","handleInactive","WebFont","load","active","inactive","GlobalStats","bondingAPYLabel","bondingAPY","liquidityAPYLabel","liquidityAPY","swapVolume","addLiquidityVolume","withdrawVolume","swapCount","fromNormalAmount","addLiquidityCount","withdrawCount","totalVolume","totalTx","statsData","monthlyActiveUsers","gutter","statProps","GlobalChart","volumeChartIndex","setVolumeChartIndex","earningChartIndex","setEarningChartIndex","volumeChartIndexes","earningChartIndexes","chartValueUnit","initialChartData","initialData","defaultChartValues","volumeChartData","swapData","intervals","liquidityData","addVolume","liquidityValue","swapValue","addValue","withdrawValue","Total","Add","earningChartData","earningsData","totalEarning","bondingEarning","liquidityEarning","liquidityFee","earnings","bondingEarnings","liquidityEarnings","liquidityFees","Liquidity","Bonding","Fee","PoolStats","poolAPY","volume24h","units","uniqueMemberCount","PoolChart","isLoading","setChartIndex","depthData","volumeChart","liquidityChart","priceChart","swapValues","liquidity","Volume","Notification","message","btn","notification","getContainer","CoreButton","AnimatedDialogOverlay","animated","DialogOverlay","StyledDialogOverlay","AnimatedDialogContent","DialogContent","StyledDialogContent","minHeight","maxHeight","mobile","Overlay","initialFocusRef","fadeTransition","useTransition","opacity","enter","leave","useSpring","mass","tension","friction","bind","useGesture","onDrag","down","movement","velocity","direction","isMobile","interpolate","tabIndex","tiny","white","LabelWrapper"],"mappings":"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","file":"static/js/main.4e77ba6e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/asset-bnb.a1a44bd9.svg\";","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 1,\n  y1: 13,\n  x2: 8,\n  y2: 5,\n  stroke: \"currentColor\",\n  strokeWidth: 3\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 1,\n  y1: 12,\n  x2: 8,\n  y2: 20,\n  stroke: \"currentColor\",\n  strokeWidth: 3\n});\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 22,\n  y1: 5,\n  x2: 29,\n  y2: 13,\n  stroke: \"currentColor\",\n  strokeWidth: 3\n});\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 22,\n  y1: 20,\n  x2: 29,\n  y2: 12,\n  stroke: \"currentColor\",\n  strokeWidth: 3\n});\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 12,\n  y1: 24,\n  x2: 18,\n  y2: 1,\n  strokeLinecap: \"round\",\n  stroke: \"currentColor\",\n  strokeWidth: 3\n});\n\nfunction SvgAssetCodeIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"30px\",\n    height: \"25px\",\n    viewBox: \"0 0 30 25\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Code Icon\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAssetCodeIcon);\nexport default __webpack_public_path__ + \"static/media/asset-code-icon.877533a5.svg\";\nexport { ForwardRef as ReactComponent };","export default __webpack_public_path__ + \"static/media/asset-rune.d6f244cd.svg\";","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n  x1: \"30.2159209%\",\n  y1: \"100%\",\n  x2: \"69.7840791%\",\n  y2: \"9.09203013%\",\n  id: \"linearGradient-1\"\n}, /*#__PURE__*/React.createElement(\"stop\", {\n  stopColor: \"#33FF99\",\n  offset: \"0%\"\n}), /*#__PURE__*/React.createElement(\"stop\", {\n  stopColor: \"#00CCFF\",\n  offset: \"100%\"\n})));\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Symbols\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Logo/BEPSwap-Copy\",\n  transform: \"translate(-1.000000, -2.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Group\",\n  transform: \"translate(0.500000, -0.500000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Group-3\",\n  transform: \"translate(72.500000, 6.500000)\",\n  fill: \"#00CCFF\",\n  fillRule: \"nonzero\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M47.7692308,26.9819136 L28.0384615,27 L28.0384615,0 L47.5851917,0 L47.5851917,5.29027577 L33.7021155,5.29027577 L33.7021155,10.7659373 L45.9184508,10.7659373 L45.9184508,16.056213 L33.7021155,16.056213 L33.7021155,21.6901306 L47.7692308,21.6901306 L47.7692308,26.9804064 L47.7692308,26.9819136 Z M22.8461538,19.5980515 C22.8461538,24.5522002 18.8526954,27.0194778 12.7824539,26.9998842 L0,27 L0,0 L12.4760937,0 C17.9674839,0 21.3482221,2.73706539 21.3482221,6.97981826 L21.3482221,7.05668516 C21.3482221,10.107247 19.7302094,11.8043482 17.8150736,12.8819923 C20.931018,14.080212 22.8461538,15.8933671 22.8461538,19.5196774 L22.8461538,19.5980515 L22.8461538,19.5980515 Z M61.0645838,15.506587 C61.0645838,18.809367 61.0645838,22.6256559 61.0645838,26.9554538 L55.0384615,27 L55.0384615,0 L67.1092609,0 C71.7689444,0 75.8076923,3.53731719 75.8076923,8.22094452 C75.8076923,12.9045718 71.7406279,15.506587 67.1651804,15.506587 L61.0645838,15.506587 Z M15.5769231,7.77744335 L15.5769231,7.73337075 C15.5769231,6.11094674 14.2453554,5.19230769 11.8443862,5.19230769 L6.23076923,5.19230769 L6.23076923,10.3846154 L11.4770572,10.3846154 C13.9876326,10.3846154 15.5769231,9.61058969 15.5769231,7.77744335 L15.5769231,7.77744335 Z M17.6538462,18.7153376 L17.6538462,18.664513 C17.6538462,16.7538285 16.2832024,15.5769231 13.1921968,15.5769231 L6.23076923,15.5769231 L6.23076923,21.8076923 L13.3850906,21.8076923 C16.0479661,21.8076923 17.6522779,20.8293202 17.6522779,18.7153376 L17.6538462,18.7153376 Z M70.6153846,7.77744335 L70.6153846,7.73337075 C70.6153846,6.11094674 69.2838169,5.19230769 66.8828477,5.19230769 L61.2692308,5.19230769 L61.2692308,10.3846154 L66.5155187,10.3846154 C69.0260941,10.3846154 70.6153846,9.61058969 70.6153846,7.77744335 L70.6153846,7.77744335 Z\",\n  id: \"Shape\"\n})), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M154.694669,24.1546159 C154.774369,25.6609716 155.110245,26.8841141 155.702306,27.8240801 C156.829498,29.5835035 158.816287,30.4632021 161.662733,30.4632021 C162.937941,30.4632021 164.099273,30.2703914 165.146765,29.8847644 C167.173434,29.1376119 168.186754,27.7999881 168.186754,25.8718528 C168.186754,24.4257513 167.759793,23.3954195 166.90586,22.7808263 C166.04054,22.1782841 164.685652,21.6540801 162.841156,21.2081988 L159.442517,20.3947708 C157.222289,19.8645336 155.651074,19.2800764 154.728826,18.6413815 C153.134817,17.5327037 152.337824,15.8757373 152.337824,13.6704325 C152.337824,11.2843651 153.117738,9.32613203 154.67759,7.79567463 C156.237443,6.26521722 158.446251,5.5 161.304083,5.5 C163.934198,5.5 166.168625,6.17182457 168.007429,7.51549387 C169.846233,8.85916316 170.765621,11.0071942 170.765621,13.9596514 L167.571925,13.9596514 C167.401138,12.5376516 167.036798,11.4470664 166.478895,10.6878631 C165.442789,9.30201588 163.683712,8.60910265 161.201611,8.60910265 C159.197713,8.60910265 157.757433,9.05497725 156.880728,9.94673983 C156.004023,10.8385024 155.565677,11.8748596 155.565677,13.0558425 C155.565677,14.3573338 156.078029,15.3093363 157.10275,15.9118786 C157.774511,16.2975057 159.29449,16.7795323 161.662733,17.3579729 L165.180922,18.2075533 C166.877404,18.617282 168.186749,19.1776379 169.108998,19.8886378 C170.703007,21.1298749 171.5,22.9314493 171.5,25.2934151 C171.5,28.2338215 170.489527,30.3366625 168.468551,31.6020013 C166.447574,32.8673401 164.099292,33.5 161.423633,33.5 C158.303928,33.5 155.861715,32.6564535 154.096918,30.9693351 C152.332122,29.2942675 151.466816,27.0227172 151.500973,24.1546159 L154.694669,24.1546159 Z M177.200214,6.5 L181.945396,28.463921 L187.632762,6.5 L191.332976,6.5 L197.020343,28.463921 L201.765525,6.5 L205.5,6.5 L198.88758,33.5 L195.307281,33.5 L189.5,11.1133424 L183.658458,33.5 L180.078158,33.5 L173.5,6.5 L177.200214,6.5 Z M220.5,22.5 L216.621739,10.5 L212.5,22.5 L220.5,22.5 Z M215.201754,6.5 L219.149123,6.5 L228.5,33.5 L224.675439,33.5 L222.061404,25.4128659 L211.868421,25.4128659 L209.078947,33.5 L205.5,33.5 L215.201754,6.5 Z M231.5,6.5 L242.948496,6.5 C245.211649,6.5 247.036,7.17698438 248.421604,8.53097345 C249.807208,9.88496252 250.5,11.787258 250.5,14.237917 C250.5,16.3454836 249.882261,18.180387 248.646764,19.7426821 C247.411267,21.3049772 245.511863,22.086113 242.948496,22.086113 L234.946673,22.086113 L234.946673,33.5 L231.5,33.5 L231.5,6.5 Z M247.5,13.9381139 C247.5,12.0284777 246.811341,10.7318305 245.434003,10.0481336 C244.676467,9.68270937 243.63774,9.5 242.317791,9.5 L235.5,9.5 L235.5,18.5 L242.317791,18.5 C243.855818,18.5 245.104012,18.1640505 246.06241,17.4921415 C247.020808,16.8202324 247.5,15.6355684 247.5,13.9381139 Z\",\n  id: \"SWAP\",\n  fill: \"#50E3C2\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Logo/Swap\",\n  transform: \"translate(0.000000, 0.000000)\",\n  fill: \"url(#linearGradient-1)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.7304301,4.35393783 L31.5,-11 L47.332257,4.41497274 C49.3107779,6.34134657 49.3530515,9.50688922 47.4266776,11.4854101 C47.3993159,11.5135125 47.3716245,11.541292 47.3436091,11.5687427 L43.8417722,15 L31.5,3.14883721 L19.4050633,15 L15.7800691,11.5664654 C13.775221,9.66750647 13.6893809,6.50284555 15.5883399,4.49799745 C15.6347267,4.44902403 15.6820998,4.40099432 15.7304301,4.35393783 Z M15.7304301,35.6460622 C15.6820998,35.5990057 15.6347267,35.550976 15.5883399,35.5020026 C13.6893809,33.4971544 13.775221,30.3324935 15.7800691,28.4335346 L19.4050633,25 L31.5,36.8511628 L43.8417722,25 L47.3436091,28.4312573 C47.3716245,28.458708 47.3993159,28.4864875 47.4266776,28.5145899 C49.3530515,30.4931108 49.3107779,33.6586534 47.332257,35.5850273 L31.5,51 L15.7304301,35.6460622 Z M32,28 C27.581722,28 24,24.418278 24,20 C24,15.581722 27.581722,12 32,12 C36.418278,12 40,15.581722 40,20 C40,24.418278 36.418278,28 32,28 Z\",\n  id: \"Combined-Shape\",\n  transform: \"translate(31.500000, 20.000000) rotate(90.000000) translate(-31.500000, -20.000000) \"\n})))));\n\nfunction SvgLogoBepswap(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"250px\",\n    height: \"35px\",\n    viewBox: \"0 0 250 35\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Group\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogoBepswap);\nexport default __webpack_public_path__ + \"static/media/logo-bepswap.858d8b0d.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n  x1: \"0%\",\n  y1: \"50%\",\n  x2: \"100%\",\n  y2: \"50%\",\n  id: \"linearGradient-1\"\n}, /*#__PURE__*/React.createElement(\"stop\", {\n  stopColor: \"#00CCFF\",\n  offset: \"0%\"\n}), /*#__PURE__*/React.createElement(\"stop\", {\n  stopColor: \"#33FF99\",\n  offset: \"100%\"\n})));\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Symbols\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Footer\",\n  transform: \"translate(-97.000000, -35.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"LOGO/THORChain-Black\",\n  transform: \"translate(97.000000, 35.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Thorchain_logo-copy\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0,30 L20.7669527,21.1796902 L14.197219,14.4578313 L0,30 Z M7.62748535,7.74526678 L14.197219,14.4578313 L25.9328358,0 L7.62748535,7.74526678 Z\",\n  id: \"Shape\",\n  fill: \"url(#linearGradient-1)\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  id: \"Path\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\",\n  points: \"36.4071715 11.0204291 33.1940299 11.0204291 33.1940299 9.31034483 41.4925373 9.31034483 41.4925373 11.0235141 38.2895158 11.0235141 38.2895158 20.6896552 36.4071715 20.6896552\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  id: \"Path\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\",\n  points: \"45.641791 9.31034483 47.4710319 9.31034483 47.4710319 14.230072 52.0961857 14.230072 52.0961857 9.31034483 53.9402985 9.31034483 53.9402985 20.6896552 52.0961857 20.6896552 52.0961857 15.9405663 47.4710319 15.9405663 47.4710319 20.6896552 45.641791 20.6896552\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M61.119553,20.2573483 C60.4605541,19.9677985 59.9636898,19.4190007 59.6289601,18.6109549 C59.2942305,17.802909 59.1268657,16.6137349 59.1268657,15.0434324 C59.1268657,13.4778436 59.2966712,12.2809257 59.6362823,11.4526787 C59.9758934,10.6244317 60.4755472,10.0594729 61.1352435,9.75780249 C61.7942425,9.46017227 62.6781379,9.31102047 63.7869298,9.3103471 C64.8957217,9.30967373 65.7872881,9.45882552 66.4616288,9.75780249 C67.1255092,10.0561061 67.625163,10.6166879 67.9605899,11.4395479 C68.2960169,12.2624079 68.4633818,13.4620194 68.4626844,15.0383821 C68.4626844,16.603971 68.2925302,17.7931451 67.9522217,18.6059046 C67.6119132,19.418664 67.1150489,19.9691453 66.4616288,20.2573483 C65.8082087,20.5448779 64.9166423,20.6889795 63.7869298,20.6896528 C62.6572173,20.6903262 61.7680917,20.5462247 61.119553,20.2573483 Z M65.4417494,18.7038801 C65.8238991,18.5018687 66.0986564,18.1207404 66.2660212,17.5604953 C66.433386,17.0002501 66.5170684,16.1585357 66.5170684,15.035352 C66.5170684,13.8737861 66.4305966,13.0051368 66.2576529,12.4294041 C66.0847093,11.8536714 65.8103007,11.469513 65.4344272,11.2769287 C65.0578564,11.0863645 64.5086906,10.9907458 63.7869298,10.9900724 C63.0860896,10.9900724 62.5473841,11.0883847 62.1708133,11.2850092 C61.7942425,11.4816336 61.5170445,11.8654554 61.3392194,12.4364745 C61.1613942,13.0068202 61.0724817,13.8731127 61.0724817,15.035352 C61.0724817,16.1666162 61.1533747,17.0083306 61.3151607,17.5604953 C61.4769467,18.1126599 61.7482171,18.4937882 62.1289721,18.7038801 C62.5055429,18.9058916 63.0599389,19.0068973 63.79216,19.0068973 C64.510434,19.0068973 65.0602971,18.9058916 65.4417494,18.7038801 L65.4417494,18.7038801 Z\",\n  id: \"Shape\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M72.6119403,9.31034483 L77.3903515,9.31034483 C78.3885085,9.31034483 79.179601,9.56500064 79.7636291,10.0743123 C80.3476571,10.5836239 80.6396711,11.5055945 80.6396711,12.840224 C80.6396711,13.8478795 80.4563217,14.5827141 80.0896229,15.0447276 C79.7237178,15.5077905 79.2212361,15.8523615 78.6486665,16.032847 L80.9104478,20.6896552 L78.9194431,20.6896552 L76.8806543,16.3104663 C76.2329141,16.3104663 75.463059,16.2998414 74.5710889,16.2785915 L74.5710889,20.6896552 L72.6119403,20.6896552 L72.6119403,9.31034483 Z M77.0558627,14.7856161 C77.5655599,14.7856161 77.9609292,14.6444073 78.2419706,14.3619895 C78.5230119,14.0795718 78.6645945,13.5733448 78.6667182,12.8433086 C78.6667182,12.144119 78.5251357,11.6642831 78.2419706,11.4038007 C77.9588055,11.1433183 77.5634362,11.0147908 77.0558627,11.0182182 L74.5710889,11.0182182 L74.5710889,14.780475 L77.0558627,14.7856161 Z\",\n  id: \"Shape\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M86.7564737,20.2431678 C86.2056382,19.9448377 85.7849704,19.3815123 85.4944703,18.5531916 C85.2039701,17.7248709 85.059048,16.5281832 85.0597037,14.9631285 C85.0597037,13.4768653 85.2072489,12.3226037 85.5023394,11.5003439 C85.7974298,10.6780841 86.2302291,10.107351 86.8007372,9.78814445 C87.3699339,9.46961137 88.10766,9.31034483 89.0139155,9.31034483 C89.6091484,9.31093766 90.2034287,9.35923464 90.7913435,9.45479588 C91.3073504,9.53321721 91.817681,9.64694351 92.3189283,9.79521548 L92.3189283,11.2377057 C92.0238378,11.1777703 91.60317,11.1225489 91.0569249,11.0720415 C90.5106797,11.0215342 89.9532866,10.9962805 89.3847458,10.9962805 C88.7355468,10.9962805 88.2361882,11.0996522 87.88667,11.3063957 C87.5371518,11.5131391 87.2840298,11.8996888 87.127304,12.4660446 C86.9699224,13.0317271 86.8912316,13.8735164 86.8912316,14.9914126 C86.8912316,16.1093088 86.9650042,16.9527817 87.1125495,17.5218313 C87.2600947,18.0888606 87.5060034,18.4777673 87.8502755,18.6885513 C88.1945477,18.8993354 88.7011196,19.0054008 89.3699912,19.0067477 C90.3560653,19.015191 91.3416709,18.9595216 92.3208955,18.8400734 L92.3208955,20.2795331 C91.4257879,20.5489057 90.3093624,20.6856123 88.9716192,20.6896529 C88.045691,20.6903263 87.3073091,20.541498 86.7564737,20.2431678 Z\",\n  id: \"Path\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  id: \"Path\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\",\n  points: \"96.4701493 9.31034483 98.2993901 9.31034483 98.2993901 14.230072 102.924544 14.230072 102.924544 9.31034483 104.768657 9.31034483 104.768657 20.6896552 102.924544 20.6896552 102.924544 15.9405663 98.2993901 15.9405663 98.2993901 20.6896552 96.4701493 20.6896552\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M113.472076,9.31034483 L115.764397,9.31034483 L119.291045,20.6896552 L117.395471,20.6896552 L116.557893,17.9882254 L112.639395,17.9882254 L111.81651,20.6865713 L109.955224,20.6865713 L113.472076,9.31034483 Z M116.117062,16.2797869 L114.588847,10.9457995 L113.060633,16.2797869 L116.117062,16.2797869 Z\",\n  id: \"Shape\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  id: \"Path\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\",\n  points: \"123.440299 9.31034483 125.514925 9.31034483 125.514925 20.6896552 123.440299 20.6896552\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  id: \"Path\",\n  fill: \"#101921\",\n  fillRule: \"nonzero\",\n  points: \"130.701493 9.31034483 132.171175 9.31034483 137.159186 17.4362209 137.159186 9.31034483 139 9.31034483 139 20.6896552 137.530318 20.6896552 132.542306 12.5689188 132.542306 20.6896552 130.701493 20.6896552\"\n})))));\n\nfunction SvgLogoThorchainBlack(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"139px\",\n    height: \"30px\",\n    viewBox: \"0 0 139 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"LOGO/THORChain-white\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogoThorchainBlack);\nexport default __webpack_public_path__ + \"static/media/logo-thorchain-black.dd02c6d4.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"XMLID_496_\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  id: \"XMLID_497_\",\n  d: \"M5.299,144.645l69.126,25.8l26.756,86.047c1.712,5.511,8.451,7.548,12.924,3.891l38.532-31.412 c4.039-3.291,9.792-3.455,14.013-0.391l69.498,50.457c4.785,3.478,11.564,0.856,12.764-4.926L299.823,29.22 c1.31-6.316-4.896-11.585-10.91-9.259L5.218,129.402C-1.783,132.102-1.722,142.014,5.299,144.645z M96.869,156.711l135.098-83.207 c2.428-1.491,4.926,1.792,2.841,3.726L123.313,180.87c-3.919,3.648-6.447,8.53-7.163,13.829l-3.798,28.146 c-0.503,3.758-5.782,4.131-6.819,0.494l-14.607-51.325C89.253,166.16,91.691,159.907,96.869,156.711z\"\n}));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref11 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref12 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref13 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref14 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref15 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref16 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref17 = /*#__PURE__*/React.createElement(\"g\", null);\n\nfunction SvgTelegram(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 300 300\",\n    style: {\n      enableBackground: \"new 0 0 300 300\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTelegram);\nexport default __webpack_public_path__ + \"static/media/telegram.c70336ec.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Desktop\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Modal-Complete\",\n  transform: \"translate(-293.000000, -119.000000)\",\n  fill: \"#33CCFF\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Icon/Tick-Fill\",\n  transform: \"translate(293.000000, 119.000000)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M49,0 C76.0619527,0 98,21.9380473 98,49 C98,76.0619527 76.0619527,98 49,98 C21.9380473,98 0,76.0619527 0,49 C0,21.9380473 21.9380473,0 49,0 Z M69.6906965,29.2930947 L40.5956732,57.9111504 L28.5940876,45.9095649 C28.2069126,45.5223899 27.5813765,45.5201914 27.1868205,45.9147473 L21.7593935,51.3421743 C21.3693564,51.7322115 21.3760606,52.371291 21.7602421,52.7554725 L39.8885999,70.8838302 C40.2791057,71.274336 40.9124471,71.2783533 41.3111851,70.8849318 L76.5223571,36.1432421 C76.9175234,35.7533447 76.9262002,35.1256015 76.5316442,34.7310456 L71.1042172,29.3036186 C70.7141801,28.9135814 70.0834632,28.9067668 69.6906965,29.2930947 Z\",\n  id: \"Combined-Shape\"\n}))));\n\nfunction SvgIconTickFill(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"98px\",\n    height: \"98px\",\n    viewBox: \"0 0 98 98\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Icon/Tick Fill\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTickFill);\nexport default __webpack_public_path__ + \"static/media/icon-tick-fill.dc6a8135.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#33CCFF\",\n  d: \"M150,0C67.159,0,0.002,67.159,0.002,150c0,82.838,67.157,150.005,149.997,150.005S300.003,232.841,300.003,150 C300,67.159,232.841,0,150,0z M235.661,168.822c-6.756,42.93-43.939,73.662-86.101,73.662c-4.487,0-9.028-0.35-13.598-1.066 c-47.497-7.485-80.063-52.215-72.593-99.707c3.621-23.011,15.985-43.236,34.814-56.946c16.21-11.801,35.538-17.543,55.286-16.607 l-14.527-13.834l9.521-9.991l22.29,21.239l0.005-0.003l9.97,9.513l-9.513,9.991l-0.005-0.008l-21.237,22.295l-9.98-9.521 l13.456-14.112c-16.457-0.934-32.605,3.789-46.107,13.619c-15.471,11.264-25.628,27.879-28.603,46.784 c-6.134,39.019,20.622,75.768,59.643,81.915c39.019,6.131,75.765-20.617,81.904-59.641c4.054-25.76-6.225-51.72-26.834-67.751 l9.56-12.281C228.083,105.877,240.595,137.47,235.661,168.822z M121.096,175.443l-0.511-1.196l12.823-5.436l0.506,1.198 c2.039,4.84,9.088,8.489,16.394,8.489c3.284,0,13.995-0.599,13.995-8.339c0-4.054-4.58-6.481-14.415-7.641 c-11.036-1.237-26.162-2.928-26.162-19.587c0-10.214,7.641-17.354,20.508-19.255v-7.851h13.821v7.885 c5.973,1.05,13.855,3.652,18.251,12.644l0.584,1.19l-11.804,5.46l-0.597-0.993c-2.067-3.413-8.147-6.092-13.834-6.092 c-3.836,0-12.755,0.685-12.755,7.011c0,4.547,5.747,5.594,13.264,6.494c11.752,1.447,27.84,3.429,27.84,20.733 c0,12.735-10.328,19.439-20.946,20.627v8.953H144.24v-8.523C133.09,189.903,124.893,184.329,121.096,175.443z\"\n})));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref11 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref12 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref13 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref14 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref15 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref16 = /*#__PURE__*/React.createElement(\"g\", null);\n\nvar _ref17 = /*#__PURE__*/React.createElement(\"g\", null);\n\nfunction SvgRefund(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"98px\",\n    height: \"98px\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 300.005 300.005\",\n    style: {\n      enableBackground: \"new 0 0 300.005 300.005\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRefund);\nexport default __webpack_public_path__ + \"static/media/refund.2ca72321.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Desktop\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Artboard\",\n  transform: \"translate(-31.000000, -54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"timerchart-1\",\n  transform: \"translate(31.000000, 54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Group\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,199.986603 C43.8805717,199.103524 0,154.67619 0,100 L100,100 L100,200 L98.3463172,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#F5A623\",\n  opacity: 0.500418527\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,99.9866029 C43.8805717,99.1035238 0,54.6761902 0,0 L100,0 L100,100 L98.3463172,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#EE5366\",\n  transform: \"translate(50.000000, 50.000000) rotate(90.000000) translate(-50.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,99.9866029 C143.880572,99.1035238 100,54.6761902 100,0 L200,0 L200,100 L198.346317,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#33CCFF\",\n  opacity: 0.499465216,\n  transform: \"translate(150.000000, 50.000000) scale(-1, 1) rotate(90.000000) translate(-150.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,199.986603 C143.880572,199.103524 100,154.67619 100,100 L200,100 L200,200 L198.346317,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#50E3C2\",\n  opacity: 0.499465216,\n  transform: \"translate(150.000000, 150.000000) scale(-1, -1) rotate(90.000000) translate(-150.000000, -150.000000) \"\n})), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Oval\",\n  fill: \"#FFFFFF\",\n  cx: 100,\n  cy: 100,\n  r: 50\n}))));\n\nfunction SvgTimerchart1(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 200 200\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"timerchart-1\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTimerchart1);\nexport default __webpack_public_path__ + \"static/media/timerchart-1.5aed6fb1.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Desktop\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Artboard\",\n  transform: \"translate(-254.000000, -54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"timerchart-2\",\n  transform: \"translate(254.000000, 54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Group\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,199.986603 C43.8805717,199.103524 0,154.67619 0,100 L100,100 L100,200 L98.3463172,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#F5A623\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,99.9866029 C43.8805717,99.1035238 0,54.6761902 0,0 L100,0 L100,100 L98.3463172,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#EE5366\",\n  transform: \"translate(50.000000, 50.000000) rotate(90.000000) translate(-50.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,99.9866029 C143.880572,99.1035238 100,54.6761902 100,0 L200,0 L200,100 L198.346317,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#33CCFF\",\n  opacity: 0.500906808,\n  transform: \"translate(150.000000, 50.000000) scale(-1, 1) rotate(90.000000) translate(-150.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,199.986603 C143.880572,199.103524 100,154.67619 100,100 L200,100 L200,200 L198.346317,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#50E3C2\",\n  opacity: 0.500906808,\n  transform: \"translate(150.000000, 150.000000) scale(-1, -1) rotate(90.000000) translate(-150.000000, -150.000000) \"\n})), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Oval\",\n  fill: \"#FFFFFF\",\n  cx: 100,\n  cy: 100,\n  r: 50\n}))));\n\nfunction SvgTimerchart2(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 200 200\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"timerchart-2\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTimerchart2);\nexport default __webpack_public_path__ + \"static/media/timerchart-2.8e380b67.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Desktop\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Artboard\",\n  transform: \"translate(-486.000000, -54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"timerchart-3\",\n  transform: \"translate(486.000000, 54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Group\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,199.986603 C43.8805717,199.103524 0,154.67619 0,100 L100,100 L100,200 L98.3463172,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#F5A623\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,99.9866029 C43.8805717,99.1035238 0,54.6761902 0,0 L100,0 L100,100 L98.3463172,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#EE5366\",\n  transform: \"translate(50.000000, 50.000000) rotate(90.000000) translate(-50.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,99.9866029 C143.880572,99.1035238 100,54.6761902 100,0 L200,0 L200,100 L198.346317,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#33CCFF\",\n  opacity: 0.49609375,\n  transform: \"translate(150.000000, 50.000000) scale(-1, 1) rotate(90.000000) translate(-150.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,199.986603 C143.880572,199.103524 100,154.67619 100,100 L200,100 L200,200 L198.346317,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#50E3C2\",\n  transform: \"translate(150.000000, 150.000000) scale(-1, -1) rotate(90.000000) translate(-150.000000, -150.000000) \"\n})), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Oval\",\n  fill: \"#FFFFFF\",\n  cx: 100,\n  cy: 100,\n  r: 50\n}))));\n\nfunction SvgTimerchart3(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 200 200\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"timerchart-3\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTimerchart3);\nexport default __webpack_public_path__ + \"static/media/timerchart-3.b3c14fc5.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Desktop\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Artboard\",\n  transform: \"translate(-716.000000, -54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"timerchart-4\",\n  transform: \"translate(716.000000, 54.000000)\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Group\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,199.986603 C43.8805717,199.103524 0,154.67619 0,100 L100,100 L100,200 L98.3463172,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#F5A623\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M98.3463172,99.9866029 C43.8805717,99.1035238 0,54.6761902 0,0 L100,0 L100,100 L98.3463172,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#EE5366\",\n  transform: \"translate(50.000000, 50.000000) rotate(90.000000) translate(-50.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,99.9866029 C143.880572,99.1035238 100,54.6761902 100,0 L200,0 L200,100 L198.346317,99.9866029 Z\",\n  id: \"Path\",\n  fill: \"#33CCFF\",\n  transform: \"translate(150.000000, 50.000000) scale(-1, 1) rotate(90.000000) translate(-150.000000, -50.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M198.346317,199.986603 C143.880572,199.103524 100,154.67619 100,100 L200,100 L200,200 L198.346317,199.986603 Z\",\n  id: \"Path\",\n  fill: \"#50E3C2\",\n  transform: \"translate(150.000000, 150.000000) scale(-1, -1) rotate(90.000000) translate(-150.000000, -150.000000) \"\n})), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Oval\",\n  fill: \"#FFFFFF\",\n  cx: 100,\n  cy: 100,\n  r: 50\n}))));\n\nfunction SvgTimerchart4(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 200 200\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"timerchart-4\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTimerchart4);\nexport default __webpack_public_path__ + \"static/media/timerchart-4.0940051c.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\");\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Desktop\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"transaction\",\n  transform: \"translate(100.000000, 101.000000) scale(-1, 1) translate(-100.000000, -101.000000) \"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M100,101.042957 C100,34.3762906 100,1.0429573 100,1.0429573 C45,1.0429573 0,45.8144823 0,101.042957 C0,101.042957 33.3333333,101.042957 100,101.042957 Z\",\n  id: \"Oval\",\n  fill: \"#33CCFF\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M100,201.042957 C100,134.376291 100,101.042957 100,101.042957 C44,101.042957 0,145.814482 0,201.042957 C0,201.042957 33.3333333,201.042957 100,201.042957 Z\",\n  id: \"Oval\",\n  fill: \"#50E3C2\",\n  transform: \"translate(50.000000, 151.042957) scale(1, -1) translate(-50.000000, -151.042957) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M200.042957,101 C200.042957,34.3333333 200.042957,1 200.042957,1 C150.042957,1 97.5429573,41 100.042957,101 C100.042957,101 133.376291,101 200.042957,101 Z\",\n  id: \"Oval-Copy\",\n  fill: \"#EE5366\",\n  transform: \"translate(150.000000, 51.000000) rotate(90.000000) translate(-150.000000, -51.000000) \"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M200,201.042957 C200,134.376291 200,101.042957 200,101.042957 C150,101.042957 100,141.542957 100,201.042957 C100,201.042957 133.333333,201.042957 200,201.042957 Z\",\n  id: \"Oval-Copy-2\",\n  fill: \"#F5A623\",\n  transform: \"translate(150.000000, 151.042957) scale(1, -1) rotate(90.000000) translate(-150.000000, -151.042957) \"\n})));\n\nfunction SvgTimerchartFull(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"200px\",\n    height: \"202px\",\n    viewBox: \"0 0 200 202\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"transaction\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTimerchartFull);\nexport default __webpack_public_path__ + \"static/media/timerchart-full.5c830414.svg\";\nexport { ForwardRef as ReactComponent };","import { Pool, Asset } from 'multichain-sdk'\r\n\r\nexport const HOME_ROUTE = '/'\r\n\r\nexport const TOOLS_ROUTE = '/tools'\r\nexport const EXPLORERS_ROUTE = '/explorer'\r\nexport const EDUCATION_ROUTE = '/education'\r\nexport const STATS_ROUTE = '/stats'\r\nexport const FAQS_ROUTE = '/faq'\r\n\r\nexport const TX_ROUTE = '/tx'\r\n\r\nexport const POOL_DETAIL_ROUTE = '/pool'\r\n\r\nexport const getPoolDetailRoute = (pool: Pool) => {\r\n  return `${POOL_DETAIL_ROUTE}/${pool.asset.toString()}`\r\n}\r\n\r\nexport const getPoolDetailRouteFromAsset = (asset: Asset) => {\r\n  return `${POOL_DETAIL_ROUTE}/${asset.toString()}`\r\n}\r\n\r\nexport const SEND_ROUTE = '/send'\r\n\r\nexport const getSendRoute = (asset: Asset) => {\r\n  return `${SEND_ROUTE}/${asset.toString()}`\r\n}\r\n\r\nexport const SWAP_ROUTE = '/swap'\r\n\r\nexport const getSwapRoute = (input: Asset, output: Asset) => {\r\n  return `${SWAP_ROUTE}/${input.toString()}_${output.toString()}`\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { Pool } from 'multichain-sdk'\r\n\r\nimport * as midgardActions from './actions'\r\nimport { State } from './types'\r\n\r\nconst initialState: State = {\r\n  pools: [],\r\n  poolLoading: false,\r\n  stats: null,\r\n  networkData: null,\r\n  constants: null,\r\n  queue: null,\r\n  poolStats: null,\r\n  poolStatsLoading: false,\r\n  depthHistory: null,\r\n  depthHistoryLoading: false,\r\n  earningsHistory: null,\r\n  earningsHistoryLoading: false,\r\n  swapHistory: null,\r\n  swapHistoryLoading: false,\r\n  liquidityHistory: null,\r\n  liquidityHistoryLoading: false,\r\n  txData: null,\r\n  txDataLoading: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(midgardActions.getPools.pending, (state) => {\r\n        state.poolLoading = true\r\n      })\r\n      .addCase(midgardActions.getPools.fulfilled, (state, action) => {\r\n        const pools = action.payload\r\n\r\n        state.pools = pools.reduce((res: Pool[], poolDetail) => {\r\n          const poolObj = Pool.fromPoolData(poolDetail)\r\n          if (poolObj) {\r\n            res.push(poolObj)\r\n          }\r\n          return res\r\n        }, [])\r\n\r\n        state.poolLoading = false\r\n      })\r\n      .addCase(midgardActions.getPools.rejected, (state) => {\r\n        state.poolLoading = false\r\n      })\r\n      .addCase(midgardActions.getStats.fulfilled, (state, action) => {\r\n        state.stats = action.payload\r\n      })\r\n      .addCase(midgardActions.getNetworkData.fulfilled, (state, action) => {\r\n        state.networkData = action.payload\r\n      })\r\n      .addCase(midgardActions.getConstants.fulfilled, (state, action) => {\r\n        state.constants = action.payload\r\n      })\r\n      .addCase(midgardActions.getQueue.fulfilled, (state, action) => {\r\n        state.queue = action.payload\r\n      })\r\n      // get pool stats\r\n      .addCase(midgardActions.getPoolStats.pending, (state) => {\r\n        state.poolStatsLoading = true\r\n      })\r\n      .addCase(midgardActions.getPoolStats.fulfilled, (state, action) => {\r\n        state.poolStatsLoading = false\r\n        state.poolStats = action.payload\r\n      })\r\n      .addCase(midgardActions.getPoolStats.rejected, (state) => {\r\n        state.poolStatsLoading = true\r\n      })\r\n      // get depth history\r\n      .addCase(midgardActions.getDepthHistory.pending, (state) => {\r\n        state.depthHistoryLoading = true\r\n      })\r\n      .addCase(midgardActions.getDepthHistory.fulfilled, (state, action) => {\r\n        state.depthHistoryLoading = false\r\n        state.depthHistory = action.payload\r\n      })\r\n      .addCase(midgardActions.getDepthHistory.rejected, (state) => {\r\n        state.depthHistoryLoading = true\r\n      })\r\n      // get earnings history\r\n      .addCase(midgardActions.getEarningsHistory.pending, (state) => {\r\n        state.earningsHistoryLoading = true\r\n      })\r\n      .addCase(midgardActions.getEarningsHistory.fulfilled, (state, action) => {\r\n        state.earningsHistoryLoading = false\r\n        state.earningsHistory = action.payload\r\n      })\r\n      .addCase(midgardActions.getEarningsHistory.rejected, (state) => {\r\n        state.earningsHistoryLoading = true\r\n      })\r\n      // get swap history\r\n      .addCase(midgardActions.getSwapHistory.pending, (state) => {\r\n        state.swapHistoryLoading = true\r\n      })\r\n      .addCase(midgardActions.getSwapHistory.fulfilled, (state, action) => {\r\n        state.swapHistoryLoading = false\r\n        state.swapHistory = action.payload\r\n      })\r\n      .addCase(midgardActions.getSwapHistory.rejected, (state) => {\r\n        state.swapHistoryLoading = true\r\n      })\r\n      // get liquidity history\r\n      .addCase(midgardActions.getLiquidityHistory.pending, (state) => {\r\n        state.liquidityHistoryLoading = true\r\n      })\r\n      .addCase(\r\n        midgardActions.getLiquidityHistory.fulfilled,\r\n        (state, action) => {\r\n          state.liquidityHistoryLoading = false\r\n          state.liquidityHistory = action.payload\r\n        },\r\n      )\r\n      .addCase(midgardActions.getLiquidityHistory.rejected, (state) => {\r\n        state.liquidityHistoryLoading = true\r\n      })\r\n      // get tx\r\n      .addCase(midgardActions.getActions.pending, (state) => {\r\n        state.txDataLoading = true\r\n      })\r\n      .addCase(midgardActions.getActions.fulfilled, (state, action) => {\r\n        state.txDataLoading = false\r\n        state.txData = action.payload\r\n      })\r\n      .addCase(midgardActions.getActions.rejected, (state) => {\r\n        state.txDataLoading = true\r\n      })\r\n  },\r\n})\r\n\r\nexport const { reducer, actions } = slice\r\n\r\nexport default slice\r\n","import { combineReducers } from '@reduxjs/toolkit'\r\n\r\nimport { reducer as appReducer } from './app/slice'\r\nimport { reducer as midgardReducer } from './midgard/slice'\r\nimport { reducer as walletReducer } from './wallet/slice'\r\n\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  midgard: midgardReducer,\r\n  wallet: walletReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import {\r\n  useDispatch as useReduxDispatch,\r\n  useSelector as useReduxSelector,\r\n} from 'react-redux'\r\nimport type { TypedUseSelectorHook } from 'react-redux'\r\n\r\nimport { configureStore } from '@reduxjs/toolkit'\r\nimport type { Action } from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport type { ThunkAction } from 'redux-thunk'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nconst middlewares = process.env.NODE_ENV !== 'production' ? [logger] : []\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({ serializableCheck: false }).concat(middlewares),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\r\n\r\nexport const useSelector: TypedUseSelectorHook<RootState> = useReduxSelector\r\n\r\nexport const useDispatch = () => useReduxDispatch<AppDispatch>()\r\n\r\nexport { store }\r\n","export default __webpack_public_path__ + \"static/media/Exo2-Regular.0d72bcb5.otf\";","import { transparentize } from 'polished'\r\nimport styled, { createGlobalStyle } from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport normalFont from 'assets/font/Exo2-Regular.otf'\r\n\r\nimport 'antd/dist/antd.dark.css'\r\nimport 'antd/dist/antd.css'\r\n\r\nexport const fontConfig = {\r\n  custom: {\r\n    families: ['Exo 2'],\r\n  },\r\n}\r\n\r\nexport const ThemedGlobalStyle = createGlobalStyle`\r\n  body {\r\n    min-height: 100vh;\r\n    background-color: ${palette('background', 3)};\r\n  }\r\n`\r\n\r\nexport const AppHolder = styled.div`\r\n  @font-face {\r\n    font-family: 'Exo 2';\r\n    src: url(${normalFont});\r\n    font-weight: normal;\r\n    font-display: fallback;\r\n  }\r\n\r\n  font-family: 'Exo 2';\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6,\r\n  a,\r\n  b,\r\n  p,\r\n  li,\r\n  input,\r\n  textarea,\r\n  span,\r\n  div,\r\n  img,\r\n  th,\r\n  td,\r\n  svg {\r\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.004);\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    &::selection {\r\n      background: ${palette('primary', 0)};\r\n      color: ${palette('background', 1)};\r\n    }\r\n  }\r\n\r\n  a,\r\n  button,\r\n  input,\r\n  span,\r\n  .ant-tabs-tab-btn,\r\n  .ant-slider > div,\r\n  .ant-table-thead > tr > th,\r\n  .ant-table-tbody > tr > td,\r\n  .ant-tabs-nav .ant-tabs-tab {\r\n    transition: none;\r\n  }\r\n\r\n  .ant-spin.ant-spin-spinning {\r\n    .ant-spin-dot-item {\r\n      background-color: ${palette('primary', 0)};\r\n    }\r\n  }\r\n\r\n  .ant-notification-notice {\r\n    background: ${palette('background', 1)};\r\n    color: ${palette('text', 0)};\r\n\r\n    .ant-notification-notice-message {\r\n      color: ${palette('text', 0)};\r\n    }\r\n    .ant-notification-notice-close {\r\n      svg {\r\n        color: ${palette('text', 0)} !important;\r\n      }\r\n    }\r\n  }\r\n  \r\n  .app-layout {\r\n    background-repeat: no-repeat;\r\n    background-image: ${({ theme }) =>\r\n      `radial-gradient(50% 50% at 50% 50%, ${transparentize(\r\n        0.9,\r\n        '#23DCC8',\r\n      )} 0%, ${transparentize(1, theme.palette.background[0])} 100%)`};\r\n    }\r\n  }\r\n\r\n  .ant-popover {\r\n    .ant-popover-content {\r\n      background: ${(props) =>\r\n        transparentize(0.4, props.theme.palette.background[0])};\r\n      border: 1px solid ${palette('gray', 0)};\r\n      border-radius: 8px;\r\n    }\r\n    .ant-popover-arrow {\r\n      border-bottom: none;\r\n      border-right: none;\r\n      border-color: ${palette('gray', 0)};\r\n    }\r\n    .ant-popover-inner {\r\n      border: 1px solid ${palette('gray', 0)};\r\n      background-color: ${(props) =>\r\n        transparentize(0.4, props.theme.palette.background[0])};\r\n    }\r\n  }\r\n\r\n  .ant-popover-inner-content {\r\n    padding: 6px;\r\n    font-size: 11px;\r\n    letter-spacing: 0.5px;\r\n    font-family: 'Exo 2';\r\n    src: url(${normalFont});\r\n  }\r\n\r\n  .ant-row:not(.ant-form-item) {\r\n    ${'' /* margin-left: -8px;\r\n    margin-right: -8px; */};\r\n    &:before,\r\n    &:after {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  .ant-row > div {\r\n    padding: 0;\r\n  }\r\n\r\n  .ant-table table,\r\n  .ant-table th,\r\n  .ant-table td {\r\n    border-radius: 0px !important;\r\n  }\r\n`\r\n","import { createBrowserHistory as createHistory } from 'history'\r\n\r\nexport const history = createHistory()\r\n","import React, { Suspense, lazy } from 'react'\r\n\r\nimport { Router, Route, Switch } from 'react-router'\r\n\r\nimport { Layout, PageLoader, BackLink } from 'components'\r\n\r\nimport { history } from 'helpers/history'\r\n\r\nimport {\r\n  HOME_ROUTE,\r\n  SEND_ROUTE,\r\n  SWAP_ROUTE,\r\n  TOOLS_ROUTE,\r\n  EXPLORERS_ROUTE,\r\n  EDUCATION_ROUTE,\r\n  STATS_ROUTE,\r\n  FAQS_ROUTE,\r\n  TX_ROUTE,\r\n  POOL_DETAIL_ROUTE,\r\n} from 'settings/constants'\r\n\r\nexport type Routes = {\r\n  exact?: boolean\r\n  path?: string | string[]\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  component?: any\r\n  background?: boolean\r\n}[]\r\n\r\nconst routes: Routes = [\r\n  {\r\n    exact: true,\r\n    path: HOME_ROUTE,\r\n    component: lazy(() => import('views/Home')),\r\n  },\r\n  {\r\n    exact: true,\r\n    path: `${POOL_DETAIL_ROUTE}/:asset`,\r\n    component: lazy(() => import('views/PoolDetail')),\r\n  },\r\n  {\r\n    exact: true,\r\n    path: `${SEND_ROUTE}/:asset`,\r\n    component: lazy(() => import('views/Send')),\r\n  },\r\n  {\r\n    exact: true,\r\n    path: `${SWAP_ROUTE}/:pair`,\r\n    component: lazy(() => import('views/Swap')),\r\n  },\r\n  {\r\n    exact: true,\r\n    path: TX_ROUTE,\r\n    component: lazy(() => import('views/Transaction')),\r\n    background: false,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: TOOLS_ROUTE,\r\n    component: lazy(() => import('views/Tools')),\r\n    background: false,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: EXPLORERS_ROUTE,\r\n    component: lazy(() => import('views/Explorer')),\r\n    background: false,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: EDUCATION_ROUTE,\r\n    component: lazy(() => import('views/Education')),\r\n    background: false,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: STATS_ROUTE,\r\n    component: lazy(() => import('views/Statistics')),\r\n    background: false,\r\n  },\r\n  {\r\n    exact: true,\r\n    path: FAQS_ROUTE,\r\n    component: lazy(() => import('views/Faqs')),\r\n    background: false,\r\n  },\r\n]\r\n\r\nconst PublicRoutes = () => (\r\n  <Router history={history}>\r\n    <Suspense fallback={<PageLoader />}>\r\n      <Switch>\r\n        {routes.map((route, index) => {\r\n          const Component = route.component\r\n          const { background = true } = route\r\n\r\n          return (\r\n            <Route\r\n              key={index}\r\n              path={route.path}\r\n              exact={route.exact}\r\n              render={(props) => (\r\n                <Layout transparent={!background}>\r\n                  {route.path !== HOME_ROUTE && <BackLink />}\r\n                  <Component {...props} />\r\n                </Layout>\r\n              )}\r\n            />\r\n          )\r\n        })}\r\n      </Switch>\r\n    </Suspense>\r\n  </Router>\r\n)\r\n\r\nexport default PublicRoutes\r\n","import React from 'react'\r\n\r\nimport { Provider as ReduxProvider, useSelector } from 'react-redux'\r\n\r\nimport themes, { ThemeType } from '@thorchain/asgardex-theme'\r\nimport { WebFontLoader } from 'components'\r\nimport { ThemeProvider } from 'styled-components'\r\n\r\nimport { store as reduxStore, RootState } from 'redux/store'\r\n\r\nimport { AppHolder, fontConfig, ThemedGlobalStyle } from 'settings/appStyle'\r\n\r\nimport Router from './router'\r\n\r\nconst Main = () => {\r\n  const themeType = useSelector((state: RootState) => state.app.themeType)\r\n  const isLight = themeType === ThemeType.LIGHT\r\n  const { light, dark } = themes\r\n  const defaultTheme = isLight ? light : dark\r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <ThemedGlobalStyle />\r\n      <AppHolder id=\"app-global\">\r\n        <Router />\r\n      </AppHolder>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <WebFontLoader config={fontConfig}>\r\n      <ReduxProvider store={reduxStore}>\r\n        <Main />\r\n      </ReduxProvider>\r\n    </WebFontLoader>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","/* eslint-disable no-console */\r\n\r\nexport const appInit = () => {\r\n  // disable console log for production\r\n  const noop = () => {}\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    console.log = noop\r\n    console.warn = noop\r\n    console.error = noop\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { appInit } from 'settings/init'\r\n\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\n// initialize app\r\nappInit()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Midgard Public API\r\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\r\n *\r\n * The version of the OpenAPI document: 2.0.0-alpha.3\r\n * Contact: devs@thorchain.org\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { Configuration } from './configuration';\r\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * action details among with related transactions\r\n * @export\r\n * @interface Action\r\n */\r\nexport interface Action {\r\n    /**\r\n     * Int64, Unix timestamp for when the action was registered\r\n     * @type {string}\r\n     * @memberof Action\r\n     */\r\n    date: string;\r\n    /**\r\n     * Int64, block height at which the action was registered\r\n     * @type {string}\r\n     * @memberof Action\r\n     */\r\n    height: string;\r\n    /**\r\n     * Inbound transactions related to the action\r\n     * @type {Array<Transaction>}\r\n     * @memberof Action\r\n     */\r\n    in: Array<Transaction>;\r\n    /**\r\n     * \r\n     * @type {Metadata}\r\n     * @memberof Action\r\n     */\r\n    metadata: Metadata;\r\n    /**\r\n     * Outbound transactions related to the action\r\n     * @type {Array<Transaction>}\r\n     * @memberof Action\r\n     */\r\n    out: Array<Transaction>;\r\n    /**\r\n     * Pools involved in the action\r\n     * @type {Array<string>}\r\n     * @memberof Action\r\n     */\r\n    pools: Array<string>;\r\n    /**\r\n     * Indicates if the action is completed or if related outbound transactions are still pending.\r\n     * @type {string}\r\n     * @memberof Action\r\n     */\r\n    status: ActionStatusEnum;\r\n    /**\r\n     * Type of action\r\n     * @type {string}\r\n     * @memberof Action\r\n     */\r\n    type: ActionTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum ActionStatusEnum {\r\n    Success = 'success',\r\n    Pending = 'pending'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum ActionTypeEnum {\r\n    Swap = 'swap',\r\n    AddLiquidity = 'addLiquidity',\r\n    Withdraw = 'withdraw',\r\n    Donate = 'donate',\r\n    Refund = 'refund'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface AddLiquidityMetadata\r\n */\r\nexport interface AddLiquidityMetadata {\r\n    /**\r\n     * Int64, amount of liquidity units assigned to the member as result of the liquidity deposit\r\n     * @type {string}\r\n     * @memberof AddLiquidityMetadata\r\n     */\r\n    liquidityUnits: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface BlockRewards\r\n */\r\nexport interface BlockRewards {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof BlockRewards\r\n     */\r\n    blockReward: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof BlockRewards\r\n     */\r\n    bondReward: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof BlockRewards\r\n     */\r\n    poolReward: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface BondMetrics\r\n */\r\nexport interface BondMetrics {\r\n    /**\r\n     * Int64, Average bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    averageActiveBond: string;\r\n    /**\r\n     * Int64, Average bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    averageStandbyBond: string;\r\n    /**\r\n     * Int64, Maxinum bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    maximumActiveBond: string;\r\n    /**\r\n     * Int64, Maximum bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    maximumStandbyBond: string;\r\n    /**\r\n     * Int64, Median bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    medianActiveBond: string;\r\n    /**\r\n     * Int64, Median bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    medianStandbyBond: string;\r\n    /**\r\n     * Int64, Minumum bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    minimumActiveBond: string;\r\n    /**\r\n     * Int64, Minumum bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    minimumStandbyBond: string;\r\n    /**\r\n     * Int64, Total bond of active nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    totalActiveBond: string;\r\n    /**\r\n     * Int64, Total bond of standby nodes\r\n     * @type {string}\r\n     * @memberof BondMetrics\r\n     */\r\n    totalStandbyBond: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface BoolConstants\r\n */\r\nexport interface BoolConstants {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof BoolConstants\r\n     */\r\n    StrictBondLiquidityRatio: boolean;\r\n}\r\n/**\r\n * Represents a digital currency amount\r\n * @export\r\n * @interface Coin\r\n */\r\nexport interface Coin {\r\n    /**\r\n     * Int64 (10^8), asset Amount.\r\n     * @type {string}\r\n     * @memberof Coin\r\n     */\r\n    amount: string;\r\n    /**\r\n     * Asset in CHAIN.SYMBOL format\r\n     * @type {string}\r\n     * @memberof Coin\r\n     */\r\n    asset: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Constants\r\n */\r\nexport interface Constants {\r\n    /**\r\n     * \r\n     * @type {BoolConstants}\r\n     * @memberof Constants\r\n     */\r\n    bool_values: BoolConstants;\r\n    /**\r\n     * \r\n     * @type {Int64Constants}\r\n     * @memberof Constants\r\n     */\r\n    int_64_values: Int64Constants;\r\n    /**\r\n     * \r\n     * @type {StringConstants}\r\n     * @memberof Constants\r\n     */\r\n    string_values: StringConstants;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface DepthHistory\r\n */\r\nexport interface DepthHistory {\r\n    /**\r\n     * \r\n     * @type {Array<DepthHistoryItem>}\r\n     * @memberof DepthHistory\r\n     */\r\n    intervals: Array<DepthHistoryItem>;\r\n    /**\r\n     * \r\n     * @type {DepthHistoryMeta}\r\n     * @memberof DepthHistory\r\n     */\r\n    meta: DepthHistoryMeta;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface DepthHistoryItem\r\n */\r\nexport interface DepthHistoryItem {\r\n    /**\r\n     * Int64, the amount of Asset in the pool at the end of the interval\r\n     * @type {string}\r\n     * @memberof DepthHistoryItem\r\n     */\r\n    assetDepth: string;\r\n    /**\r\n     * Float, price of asset in rune. I.e. rune amount / asset amount\r\n     * @type {string}\r\n     * @memberof DepthHistoryItem\r\n     */\r\n    assetPrice: string;\r\n    /**\r\n     * Float, the price of asset in USD (based on the deepest USD pool).\r\n     * @type {string}\r\n     * @memberof DepthHistoryItem\r\n     */\r\n    assetPriceUSD: string;\r\n    /**\r\n     * Int64, The end time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof DepthHistoryItem\r\n     */\r\n    endTime: string;\r\n    /**\r\n     * Int64, Liquidity Units in the pool at the end of the interval\r\n     * @type {string}\r\n     * @memberof DepthHistoryItem\r\n     */\r\n    liquidityUnits: string;\r\n    /**\r\n     * Int64, the amount of Rune in the pool at the end of the interval\r\n     * @type {string}\r\n     * @memberof DepthHistoryItem\r\n     */\r\n    runeDepth: string;\r\n    /**\r\n     * Int64, The beginning time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof DepthHistoryItem\r\n     */\r\n    startTime: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface DepthHistoryMeta\r\n */\r\nexport interface DepthHistoryMeta {\r\n    /**\r\n     * Int64, The end time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof DepthHistoryMeta\r\n     */\r\n    endTime: string;\r\n    /**\r\n     * Int64, The beginning time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof DepthHistoryMeta\r\n     */\r\n    startTime: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface EarningsHistory\r\n */\r\nexport interface EarningsHistory {\r\n    /**\r\n     * \r\n     * @type {Array<EarningsHistoryItem>}\r\n     * @memberof EarningsHistory\r\n     */\r\n    intervals: Array<EarningsHistoryItem>;\r\n    /**\r\n     * \r\n     * @type {EarningsHistoryItem}\r\n     * @memberof EarningsHistory\r\n     */\r\n    meta: EarningsHistoryItem;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface EarningsHistoryItem\r\n */\r\nexport interface EarningsHistoryItem {\r\n    /**\r\n     * float64, Average amount of active nodes during the time interval\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    avgNodeCount: string;\r\n    /**\r\n     * Int64, Total block rewards emitted during the time interval\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    blockRewards: string;\r\n    /**\r\n     * Int64, Share of earnings sent to nodes during the time interval\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    bondingEarnings: string;\r\n    /**\r\n     * Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    earnings: string;\r\n    /**\r\n     * Int64, The end time of interval in unix timestamp\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    endTime: string;\r\n    /**\r\n     * Int64, Share of earnings sent to pools during the time interval\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    liquidityEarnings: string;\r\n    /**\r\n     * Int64, Total liquidity fees, converted to RUNE, collected during the time interval\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    liquidityFees: string;\r\n    /**\r\n     * Earnings data for each pool for the time interval\r\n     * @type {Array<EarningsHistoryItemPool>}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    pools: Array<EarningsHistoryItemPool>;\r\n    /**\r\n     * Int64, The beginning time of interval in unix timestamp\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItem\r\n     */\r\n    startTime: string;\r\n}\r\n/**\r\n * pool earnings data during the time interval\r\n * @export\r\n * @interface EarningsHistoryItemPool\r\n */\r\nexport interface EarningsHistoryItemPool {\r\n    /**\r\n     * Int64, Share of earnings sent to the pool during the time interval\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItemPool\r\n     */\r\n    earnings: string;\r\n    /**\r\n     * asset for the given pool\r\n     * @type {string}\r\n     * @memberof EarningsHistoryItemPool\r\n     */\r\n    pool: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Health\r\n */\r\nexport interface Health {\r\n    /**\r\n     * True means healthy, connected to database\r\n     * @type {boolean}\r\n     * @memberof Health\r\n     */\r\n    database: boolean;\r\n    /**\r\n     * True means healthy. False means Midgard is still catching up to the chain\r\n     * @type {boolean}\r\n     * @memberof Health\r\n     */\r\n    inSync: boolean;\r\n    /**\r\n     * Int64, the current block count\r\n     * @type {string}\r\n     * @memberof Health\r\n     */\r\n    scannerHeight: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface InboundAddressesItem\r\n */\r\nexport interface InboundAddressesItem {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof InboundAddressesItem\r\n     */\r\n    address: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof InboundAddressesItem\r\n     */\r\n    chain: string;\r\n    /**\r\n     * indicate whether this chain has halted\r\n     * @type {boolean}\r\n     * @memberof InboundAddressesItem\r\n     */\r\n    halted: boolean;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof InboundAddressesItem\r\n     */\r\n    pub_key: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface InlineResponse200\r\n */\r\nexport interface InlineResponse200 {\r\n    /**\r\n     * \r\n     * @type {Array<Action>}\r\n     * @memberof InlineResponse200\r\n     */\r\n    actions: Array<Action>;\r\n    /**\r\n     * Int64, number of results matching the given filters.\r\n     * @type {string}\r\n     * @memberof InlineResponse200\r\n     */\r\n    count: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Int64Constants\r\n */\r\nexport interface Int64Constants {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    AsgardSize: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    BadValidatorRate: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    BlocksPerYear: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    ChurnInterval: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    ChurnRetryInterval: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    CliTxCost: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    DesiredValidatorSet: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    DoubleSignMaxAge: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    EmissionCurve: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    FailKeygenSlashPoints: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    FailKeysignSlashPoints: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    FundMigrationInterval: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    JailTimeKeygen: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    JailTimeKeysign: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    LackOfObservationPenalty: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    LiquidityLockUpBlocks: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    MinimumBondInRune: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    MinimumNodesForBFT: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    MinimumNodesForYggdrasil: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    NativeChainGasFee: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    NewPoolCycle: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    ObservationDelayFlexibility: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    ObserveSlashPoints: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    OldValidatorRate: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    OutboundTransactionFee: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    SigningTransactionPeriod: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof Int64Constants\r\n     */\r\n    YggFundLimit: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Lastblock\r\n */\r\nexport interface Lastblock {\r\n    /**\r\n     * \r\n     * @type {Array<LastblockItem>}\r\n     * @memberof Lastblock\r\n     */\r\n    current: Array<LastblockItem>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface LastblockItem\r\n */\r\nexport interface LastblockItem {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof LastblockItem\r\n     */\r\n    chain: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof LastblockItem\r\n     */\r\n    last_observed_in: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof LastblockItem\r\n     */\r\n    last_signed_out: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof LastblockItem\r\n     */\r\n    thorchain: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface LiquidityHistory\r\n */\r\nexport interface LiquidityHistory {\r\n    /**\r\n     * \r\n     * @type {Array<LiquidityHistoryItem>}\r\n     * @memberof LiquidityHistory\r\n     */\r\n    intervals: Array<LiquidityHistoryItem>;\r\n    /**\r\n     * \r\n     * @type {LiquidityHistoryItem}\r\n     * @memberof LiquidityHistory\r\n     */\r\n    meta: LiquidityHistoryItem;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface LiquidityHistoryItem\r\n */\r\nexport interface LiquidityHistoryItem {\r\n    /**\r\n     * Int64 (10^8), total assets deposited during the time interval. Denoted in Rune using the price at deposit time. \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    addAssetLiquidityVolume: string;\r\n    /**\r\n     * Int64, number of deposits during the time interval. \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    addLiquidityCount: string;\r\n    /**\r\n     * Int64 (10^8), total of rune and asset deposits. Denoted in Rune (using the price at deposit time). \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    addLiquidityVolume: string;\r\n    /**\r\n     * Int64 (10^8), total Rune deposited during the time interval. \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    addRuneLiquidityVolume: string;\r\n    /**\r\n     * Int64, The end time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    endTime: string;\r\n    /**\r\n     * Int64, net liquidity changes (withdrawals - deposits) during the time interval\r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    net: string;\r\n    /**\r\n     * Int64, The beginning time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    startTime: string;\r\n    /**\r\n     * Int64 (10^8), total assets withdrawn during the time interval. Denoted in Rune using the price at withdraw time. \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    withdrawAssetVolume: string;\r\n    /**\r\n     * Int64, number of withdraw during the time interval. \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    withdrawCount: string;\r\n    /**\r\n     * Int64 (10^8), total Rune withdrawn during the time interval. \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    withdrawRuneVolume: string;\r\n    /**\r\n     * Int64 (10^8), total of rune and asset withdrawals. Denoted in Rune (using the price at withdraw time). \r\n     * @type {string}\r\n     * @memberof LiquidityHistoryItem\r\n     */\r\n    withdrawVolume: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface MemberDetails\r\n */\r\nexport interface MemberDetails {\r\n    /**\r\n     * List details of all the liquidity providers identified with the given address\r\n     * @type {Array<MemberPool>}\r\n     * @memberof MemberDetails\r\n     */\r\n    pools: Array<MemberPool>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface MemberPool\r\n */\r\nexport interface MemberPool {\r\n    /**\r\n     * Int64, total asset added to the pool by member\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    assetAdded: string;\r\n    /**\r\n     * asset address used by the member\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    assetAddress: string;\r\n    /**\r\n     * Int64, total asset withdrawn from the pool by member\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    assetWithdrawn: string;\r\n    /**\r\n     * Int64, Unix timestamp for the first time member deposited into the pool\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    dateFirstAdded: string;\r\n    /**\r\n     * Int64, Unix timestamp for the last time member deposited into the pool\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    dateLastAdded: string;\r\n    /**\r\n     * Int64, pool liquidity units that belong the the member\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    liquidityUnits: string;\r\n    /**\r\n     * Pool rest of the data refers to\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    pool: string;\r\n    /**\r\n     * Int64, total RUNE added to the pool by member\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    runeAdded: string;\r\n    /**\r\n     * rune address used by the member\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    runeAddress: string;\r\n    /**\r\n     * Int64, total RUNE withdrawn from the pool by member\r\n     * @type {string}\r\n     * @memberof MemberPool\r\n     */\r\n    runeWithdrawn: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Metadata\r\n */\r\nexport interface Metadata {\r\n    /**\r\n     * \r\n     * @type {AddLiquidityMetadata}\r\n     * @memberof Metadata\r\n     */\r\n    addLiquidity?: AddLiquidityMetadata;\r\n    /**\r\n     * \r\n     * @type {RefundMetadata}\r\n     * @memberof Metadata\r\n     */\r\n    refund?: RefundMetadata;\r\n    /**\r\n     * \r\n     * @type {SwapMetadata}\r\n     * @memberof Metadata\r\n     */\r\n    swap?: SwapMetadata;\r\n    /**\r\n     * \r\n     * @type {WithdrawMetadata}\r\n     * @memberof Metadata\r\n     */\r\n    withdraw?: WithdrawMetadata;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Network\r\n */\r\nexport interface Network {\r\n    /**\r\n     * \r\n     * @type {Array<string>}\r\n     * @memberof Network\r\n     */\r\n    activeBonds: Array<string>;\r\n    /**\r\n     * Int64, Number of Active Nodes\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    activeNodeCount: string;\r\n    /**\r\n     * \r\n     * @type {BlockRewards}\r\n     * @memberof Network\r\n     */\r\n    blockRewards: BlockRewards;\r\n    /**\r\n     * \r\n     * @type {BondMetrics}\r\n     * @memberof Network\r\n     */\r\n    bondMetrics: BondMetrics;\r\n    /**\r\n     * Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    bondingAPY: string;\r\n    /**\r\n     * Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    liquidityAPY: string;\r\n    /**\r\n     * Int64, next height of blocks\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    nextChurnHeight: string;\r\n    /**\r\n     * Int64, the remaining time of pool activation (in blocks)\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    poolActivationCountdown: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    poolShareFactor: string;\r\n    /**\r\n     * Array of Standby Bonds\r\n     * @type {Array<string>}\r\n     * @memberof Network\r\n     */\r\n    standbyBonds: Array<string>;\r\n    /**\r\n     * Int64, Number of Standby Nodes\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    standbyNodeCount: string;\r\n    /**\r\n     * Int64, Total Rune pooled in all pools\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    totalPooledRune: string;\r\n    /**\r\n     * Int64, Total left in Reserve\r\n     * @type {string}\r\n     * @memberof Network\r\n     */\r\n    totalReserve: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Node\r\n */\r\nexport interface Node {\r\n    /**\r\n     * ed25519 public key\r\n     * @type {string}\r\n     * @memberof Node\r\n     */\r\n    ed25519: string;\r\n    /**\r\n     * node thorchain address\r\n     * @type {string}\r\n     * @memberof Node\r\n     */\r\n    nodeAddress: string;\r\n    /**\r\n     * secp256k1 public key\r\n     * @type {string}\r\n     * @memberof Node\r\n     */\r\n    secp256k1: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface PoolDetail\r\n */\r\nexport interface PoolDetail {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    asset: string;\r\n    /**\r\n     * Int64, the amount of Asset in the pool.\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    assetDepth: string;\r\n    /**\r\n     * Float, price of asset in rune. I.e. rune amount / asset amount.\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    assetPrice: string;\r\n    /**\r\n     * Float, the price of asset in USD (based on the deepest USD pool).\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    assetPriceUSD: string;\r\n    /**\r\n     * Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    poolAPY: string;\r\n    /**\r\n     * Int64, the amount of Rune in the pool.\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    runeDepth: string;\r\n    /**\r\n     * The state of the pool, e.g. Available, Staged.\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    status: string;\r\n    /**\r\n     * Int64, Liquidity Units in the pool.\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    units: string;\r\n    /**\r\n     * Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.\r\n     * @type {string}\r\n     * @memberof PoolDetail\r\n     */\r\n    volume24h: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface PoolLegacyDetail\r\n */\r\nexport interface PoolLegacyDetail {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    asset: string;\r\n    /**\r\n     * same as assetDepth from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    assetDepth: string;\r\n    /**\r\n     * same as addAssetLiquidityVolume from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    assetStakedTotal: string;\r\n    /**\r\n     * same as toAssetCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    buyAssetCount: string;\r\n    /**\r\n     * same as toAssetFees / toAssetCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    buyFeeAverage: string;\r\n    /**\r\n     * same as toAssetFees from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    buyFeesTotal: string;\r\n    /**\r\n     * same as toAssetAverageSlip from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    buySlipAverage: string;\r\n    /**\r\n     * same as toAssetVolume / toAssetCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    buyTxAverage: string;\r\n    /**\r\n     * same as toAssetVolume from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    buyVolume: string;\r\n    /**\r\n     * Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolAPY: string;\r\n    /**\r\n     * same as 2*runeDepth from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolDepth: string;\r\n    /**\r\n     * same as totalFees / swapCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolFeeAverage: string;\r\n    /**\r\n     * same as totalFees from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolFeesTotal: string;\r\n    /**\r\n     * same as averageSlip from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolSlipAverage: string;\r\n    /**\r\n     * same as addLiquidityVolume from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolStakedTotal: string;\r\n    /**\r\n     * same as swapVolume / swapCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolTxAverage: string;\r\n    /**\r\n     * same as units from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolUnits: string;\r\n    /**\r\n     * Int64, same as buyVolume + sellVolume\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    poolVolume: string;\r\n    /**\r\n     * same as assetPrice from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    price: string;\r\n    /**\r\n     * same as runeDepth from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    runeDepth: string;\r\n    /**\r\n     * same as addRuneLiquidityVolume from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    runeStakedTotal: string;\r\n    /**\r\n     * same as toRuneCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    sellAssetCount: string;\r\n    /**\r\n     * same as toRuneFees / toRuneCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    sellFeeAverage: string;\r\n    /**\r\n     * same as toRuneFees from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    sellFeesTotal: string;\r\n    /**\r\n     * same as toRuneAverageSlip from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    sellSlipAverage: string;\r\n    /**\r\n     * same as toRuneVolume / toRuneCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    sellTxAverage: string;\r\n    /**\r\n     * same as toRuneVolume from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    sellVolume: string;\r\n    /**\r\n     * same as addLiquidityCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    stakeTxCount: string;\r\n    /**\r\n     * same as uniqueMemberCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    stakersCount: string;\r\n    /**\r\n     * same as addLiquidityCount + withdrawCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    stakingTxCount: string;\r\n    /**\r\n     * same as status from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    status: string;\r\n    /**\r\n     * Int64, same as history/swaps:uniqueSwapperCount\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    swappersCount: string;\r\n    /**\r\n     * Int64, same as history/swaps:totalCount\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    swappingTxCount: string;\r\n    /**\r\n     * Int64, same as swapVolume pool/stats?period=24h\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    volume24h: string;\r\n    /**\r\n     * same as withdrawCount from pool/stats\r\n     * @type {string}\r\n     * @memberof PoolLegacyDetail\r\n     */\r\n    withdrawTxCount: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface PoolStatsDetail\r\n */\r\nexport interface PoolStatsDetail {\r\n    /**\r\n     * Int64, same as history/liquidity_changes:addAssetLiquidityVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    addAssetLiquidityVolume: string;\r\n    /**\r\n     * Int64, same as history/liquidity_changes:addLiquidityCount\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    addLiquidityCount: string;\r\n    /**\r\n     * Int64, same as history/liquidity_changes:addLiquidityVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    addLiquidityVolume: string;\r\n    /**\r\n     * Int64, same as history/liquidity_changes:addRuneLiquidityVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    addRuneLiquidityVolume: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    asset: string;\r\n    /**\r\n     * Int64, the amount of Asset in the pool\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    assetDepth: string;\r\n    /**\r\n     * Float, price of asset in rune. I.e. rune amount / asset amount\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    assetPrice: string;\r\n    /**\r\n     * Float, the price of asset in USD (based on the deepest USD pool).\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    assetPriceUSD: string;\r\n    /**\r\n     * Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    averageSlip: string;\r\n    /**\r\n     * Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    poolAPY: string;\r\n    /**\r\n     * Int64, the amount of Rune in the pool\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    runeDepth: string;\r\n    /**\r\n     * The state of the pool, e.g. Available, Staged\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    status: string;\r\n    /**\r\n     * Int64, same as history/swaps:totalCount\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    swapCount: string;\r\n    /**\r\n     * Int64, same as history/swaps:totalVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    swapVolume: string;\r\n    /**\r\n     * Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toAssetAverageSlip: string;\r\n    /**\r\n     * Int64, same as history/swaps:toAssetCount\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toAssetCount: string;\r\n    /**\r\n     * Int64, same as history/swaps:toAssetFees\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toAssetFees: string;\r\n    /**\r\n     * Int64, same as history/swaps:toAssetVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toAssetVolume: string;\r\n    /**\r\n     * Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toRuneAverageSlip: string;\r\n    /**\r\n     * Int64, same as history/swaps:toRuneCount\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toRuneCount: string;\r\n    /**\r\n     * Int64, same as history/swaps:toRuneFees\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toRuneFees: string;\r\n    /**\r\n     * Int64, same as history/swaps:toRuneVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    toRuneVolume: string;\r\n    /**\r\n     * Int64, same as history/swaps:totalFees\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    totalFees: string;\r\n    /**\r\n     * Int64, same as len(history/members?pool=POOL)\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    uniqueMemberCount: string;\r\n    /**\r\n     * Int64, number of unique adresses that initiated swaps transactions in the period. \r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    uniqueSwapperCount: string;\r\n    /**\r\n     * Int64, Liquidity Units in the pool\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    units: string;\r\n    /**\r\n     * Int64, same as history/liquidity_changes:withdrawAssetVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    withdrawAssetVolume: string;\r\n    /**\r\n     * Int64, same as history/liquidity_changes:withdrawCount\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    withdrawCount: string;\r\n    /**\r\n     * Int64, same as history/liquidity_changes:withdrawRuneVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    withdrawRuneVolume: string;\r\n    /**\r\n     * Int64, same as history/liquidity_changes:withdrawVolume\r\n     * @type {string}\r\n     * @memberof PoolStatsDetail\r\n     */\r\n    withdrawVolume: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface Queue\r\n */\r\nexport interface Queue {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Queue\r\n     */\r\n    outbound: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof Queue\r\n     */\r\n    swap: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RefundMetadata\r\n */\r\nexport interface RefundMetadata {\r\n    /**\r\n     * List of network fees associated to an action. One network fee is charged for each outbound transaction\r\n     * @type {Array<Coin>}\r\n     * @memberof RefundMetadata\r\n     */\r\n    networkFees: Array<Coin>;\r\n    /**\r\n     * Reason for the refund\r\n     * @type {string}\r\n     * @memberof RefundMetadata\r\n     */\r\n    reason: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface StatsData\r\n */\r\nexport interface StatsData {\r\n    /**\r\n     * Int64, number of deposits since beginning.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    addLiquidityCount: string;\r\n    /**\r\n     * Int64 (10^8), total of deposits since beginning. \r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    addLiquidityVolume: string;\r\n    /**\r\n     * Int64, unique users (addresses) initiating swaps in the last 24 hours.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    dailyActiveUsers: string;\r\n    /**\r\n     * Int64, unique users (addresses) initiating swaps in the last 30 days.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    monthlyActiveUsers: string;\r\n    /**\r\n     * Int64 (10^8), current total Rune in the pools.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    runeDepth: string;\r\n    /**\r\n     * Float, the price of Rune based on the deepest USD pool.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    runePriceUSD: string;\r\n    /**\r\n     * Int64, number of swaps since beginning.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    swapCount: string;\r\n    /**\r\n     * Int64, number of swaps in the last 24h.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    swapCount24h: string;\r\n    /**\r\n     * Int64, number of swaps in the last 30d.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    swapCount30d: string;\r\n    /**\r\n     * Int64, total volume of swaps denoted in Rune since beginning.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    swapVolume: string;\r\n    /**\r\n     * Int64, number of swaps from Rune to Asset since beginning.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    toAssetCount: string;\r\n    /**\r\n     * Int64, number of swaps from Asset to Rune since beginning.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    toRuneCount: string;\r\n    /**\r\n     * Int64, unique users (addresses) initiating swaps since beginning.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    uniqueSwapperCount: string;\r\n    /**\r\n     * Int64, number of withdraws since beginning.\r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    withdrawCount: string;\r\n    /**\r\n     * Int64 (10^8), total of withdraws since beginning. \r\n     * @type {string}\r\n     * @memberof StatsData\r\n     */\r\n    withdrawVolume: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface StringConstants\r\n */\r\nexport interface StringConstants {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof StringConstants\r\n     */\r\n    DefaultPoolStatus: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface SwapHistory\r\n */\r\nexport interface SwapHistory {\r\n    /**\r\n     * \r\n     * @type {Array<SwapHistoryItem>}\r\n     * @memberof SwapHistory\r\n     */\r\n    intervals: Array<SwapHistoryItem>;\r\n    /**\r\n     * \r\n     * @type {SwapHistoryItem}\r\n     * @memberof SwapHistory\r\n     */\r\n    meta: SwapHistoryItem;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface SwapHistoryItem\r\n */\r\nexport interface SwapHistoryItem {\r\n    /**\r\n     * Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap. Big swaps have the same weight as small swaps \r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    averageSlip: string;\r\n    /**\r\n     * Int64, The end time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    endTime: string;\r\n    /**\r\n     * Int64, The beginning time of bucket in unix timestamp\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    startTime: string;\r\n    /**\r\n     * Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset. Big swaps have the same weight as small swaps \r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toAssetAverageSlip: string;\r\n    /**\r\n     * Int64, count of swaps from rune to asset\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toAssetCount: string;\r\n    /**\r\n     * Int64, the fees collected from swaps to asset denoted in rune\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toAssetFees: string;\r\n    /**\r\n     * Int64, volume of swaps from rune to asset denoted in rune\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toAssetVolume: string;\r\n    /**\r\n     * Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune. Big swaps have the same weight as small swaps \r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toRuneAverageSlip: string;\r\n    /**\r\n     * Int64, count of swaps from asset to rune\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toRuneCount: string;\r\n    /**\r\n     * Int64, the fees collected from swaps to rune\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toRuneFees: string;\r\n    /**\r\n     * Int64, volume of swaps from asset to rune denoted in rune\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    toRuneVolume: string;\r\n    /**\r\n     * Int64, toAssetCount + toRuneCount\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    totalCount: string;\r\n    /**\r\n     * Int64, the sum of all fees collected denoted in rune\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    totalFees: string;\r\n    /**\r\n     * Int64, toAssetVolume + toRuneVolume (denoted in rune)\r\n     * @type {string}\r\n     * @memberof SwapHistoryItem\r\n     */\r\n    totalVolume: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface SwapMetadata\r\n */\r\nexport interface SwapMetadata {\r\n    /**\r\n     * Int64 (10^8), RUNE amount charged as swap liquidity fee\r\n     * @type {string}\r\n     * @memberof SwapMetadata\r\n     */\r\n    liquidityFee: string;\r\n    /**\r\n     * List of network fees associated to an action. One network fee is charged for each outbound transaction\r\n     * @type {Array<Coin>}\r\n     * @memberof SwapMetadata\r\n     */\r\n    networkFees: Array<Coin>;\r\n    /**\r\n     * Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage\r\n     * @type {string}\r\n     * @memberof SwapMetadata\r\n     */\r\n    tradeSlip: string;\r\n    /**\r\n     * Int64 (10^8), minimum output amount specified for the swap\r\n     * @type {string}\r\n     * @memberof SwapMetadata\r\n     */\r\n    tradeTarget: string;\r\n}\r\n/**\r\n * Transaction data\r\n * @export\r\n * @interface Transaction\r\n */\r\nexport interface Transaction {\r\n    /**\r\n     * Sender address\r\n     * @type {string}\r\n     * @memberof Transaction\r\n     */\r\n    address: string;\r\n    /**\r\n     * \r\n     * @type {Array<Coin>}\r\n     * @memberof Transaction\r\n     */\r\n    coins: Array<Coin>;\r\n    /**\r\n     * Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.\r\n     * @type {string}\r\n     * @memberof Transaction\r\n     */\r\n    txID: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface WithdrawMetadata\r\n */\r\nexport interface WithdrawMetadata {\r\n    /**\r\n     * Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical\r\n     * @type {string}\r\n     * @memberof WithdrawMetadata\r\n     */\r\n    asymmetry: string;\r\n    /**\r\n     * Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn\r\n     * @type {string}\r\n     * @memberof WithdrawMetadata\r\n     */\r\n    basisPoints: string;\r\n    /**\r\n     * Int64, amount of liquidity units removed from the member as result of the withdrawal\r\n     * @type {string}\r\n     * @memberof WithdrawMetadata\r\n     */\r\n    liquidityUnits: string;\r\n    /**\r\n     * List of network fees associated to an action. One network fee is charged for each outbound transaction\r\n     * @type {Array<Coin>}\r\n     * @memberof WithdrawMetadata\r\n     */\r\n    networkFees: Array<Coin>;\r\n}\r\n\r\n/**\r\n * DefaultApi - axios parameter creator\r\n * @export\r\n */\r\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \r\n         * @summary Actions List\r\n         * @param {number} limit pagination limit\r\n         * @param {number} offset pagination offset\r\n         * @param {string} [address] Address of sender or recipient of any in/out transaction related to the action\r\n         * @param {string} [txid] ID of any in/out tx related to the action\r\n         * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\r\n         * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getActions: async (limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'limit' is not null or undefined\r\n            if (limit === null || limit === undefined) {\r\n                throw new RequiredError('limit','Required parameter limit was null or undefined when calling getActions.');\r\n            }\r\n            // verify required parameter 'offset' is not null or undefined\r\n            if (offset === null || offset === undefined) {\r\n                throw new RequiredError('offset','Required parameter offset was null or undefined when calling getActions.');\r\n            }\r\n            const localVarPath = `/v2/actions`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (address !== undefined) {\r\n                localVarQueryParameter['address'] = address;\r\n            }\r\n\r\n            if (txid !== undefined) {\r\n                localVarQueryParameter['txid'] = txid;\r\n            }\r\n\r\n            if (asset !== undefined) {\r\n                localVarQueryParameter['asset'] = asset;\r\n            }\r\n\r\n            if (type !== undefined) {\r\n                localVarQueryParameter['type'] = type;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (offset !== undefined) {\r\n                localVarQueryParameter['offset'] = offset;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Depth and Price History\r\n         * @param {string} pool Return stats for this single pool.\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getDepthHistory: async (pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'pool' is not null or undefined\r\n            if (pool === null || pool === undefined) {\r\n                throw new RequiredError('pool','Required parameter pool was null or undefined when calling getDepthHistory.');\r\n            }\r\n            const localVarPath = `/v2/history/depths/{pool}`\r\n                .replace(`{${\"pool\"}}`, encodeURIComponent(String(pool)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (interval !== undefined) {\r\n                localVarQueryParameter['interval'] = interval;\r\n            }\r\n\r\n            if (count !== undefined) {\r\n                localVarQueryParameter['count'] = count;\r\n            }\r\n\r\n            if (to !== undefined) {\r\n                localVarQueryParameter['to'] = to;\r\n            }\r\n\r\n            if (from !== undefined) {\r\n                localVarQueryParameter['from'] = from;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Earnings History\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getEarningsHistory: async (interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/history/earnings`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (interval !== undefined) {\r\n                localVarQueryParameter['interval'] = interval;\r\n            }\r\n\r\n            if (count !== undefined) {\r\n                localVarQueryParameter['count'] = count;\r\n            }\r\n\r\n            if (to !== undefined) {\r\n                localVarQueryParameter['to'] = to;\r\n            }\r\n\r\n            if (from !== undefined) {\r\n                localVarQueryParameter['from'] = from;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing the health response of the API\r\n         * @summary Health Info\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getHealth: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/health`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Liquidity Changes History\r\n         * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100]\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getLiquidityHistory: async (pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/history/liquidity_changes`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (pool !== undefined) {\r\n                localVarQueryParameter['pool'] = pool;\r\n            }\r\n\r\n            if (interval !== undefined) {\r\n                localVarQueryParameter['interval'] = interval;\r\n            }\r\n\r\n            if (count !== undefined) {\r\n                localVarQueryParameter['count'] = count;\r\n            }\r\n\r\n            if (to !== undefined) {\r\n                localVarQueryParameter['to'] = to;\r\n            }\r\n\r\n            if (from !== undefined) {\r\n                localVarQueryParameter['from'] = from;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array of statistics for all the liquidity providers associated with a given member address.\r\n         * @summary Member Details\r\n         * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getMemberDetail: async (address: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'address' is not null or undefined\r\n            if (address === null || address === undefined) {\r\n                throw new RequiredError('address','Required parameter address was null or undefined when calling getMemberDetail.');\r\n            }\r\n            const localVarPath = `/v2/member/{address}`\r\n                .replace(`{${\"address\"}}`, encodeURIComponent(String(address)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \r\n         * @summary Members List\r\n         * @param {string} [pool] Return only members present in the pool.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getMembersAdresses: async (pool?: string, options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/members`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (pool !== undefined) {\r\n                localVarQueryParameter['pool'] = pool;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing Network data\r\n         * @summary Network Data\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNetworkData: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/network`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns a list of Node public keys and adresses.\r\n         * @summary Nodes List\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNodes: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/nodes`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns details of the pool: depths, price, 24h volume, APY. \r\n         * @summary Details of a Pool\r\n         * @param {string} asset pool name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPool: async (asset: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'asset' is not null or undefined\r\n            if (asset === null || asset === undefined) {\r\n                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getPool.');\r\n            }\r\n            const localVarPath = `/v2/pool/{asset}`\r\n                .replace(`{${\"asset\"}}`, encodeURIComponent(String(asset)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \r\n         * @summary Pool Statistics\r\n         * @param {string} asset pool name\r\n         * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolStats: async (asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'asset' is not null or undefined\r\n            if (asset === null || asset === undefined) {\r\n                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getPoolStats.');\r\n            }\r\n            const localVarPath = `/v2/pool/{asset}/stats`\r\n                .replace(`{${\"asset\"}}`, encodeURIComponent(String(asset)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (period !== undefined) {\r\n                localVarQueryParameter['period'] = period;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \r\n         * @summary Pool Statistics (v1 naming)\r\n         * @param {string} asset pool name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolStatsLegacy: async (asset: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'asset' is not null or undefined\r\n            if (asset === null || asset === undefined) {\r\n                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getPoolStatsLegacy.');\r\n            }\r\n            const localVarPath = `/v2/pool/{asset}/stats/legacy`\r\n                .replace(`{${\"asset\"}}`, encodeURIComponent(String(asset)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing details for a set of pools\r\n         * @summary Pools List\r\n         * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPools: async (status?: 'available' | 'staged' | 'suspended', options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/pools`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (status !== undefined) {\r\n                localVarQueryParameter['status'] = status;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Constant values used by THORChain , some of the values can be overrided by mimir\r\n         * @summary Proxied THORChain Constants\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedConstants: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/thorchain/constants`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\r\n         * @summary Proxied THORChain Inbound Addresses\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedInboundAddresses: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/thorchain/inbound_addresses`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Retrieve lastest block infomation across all chains.\r\n         * @summary Proxied THORChain Lastblock\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedLastblock: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/thorchain/lastblock`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns the proxied queue endpoint from a local thornode\r\n         * @summary Proxied THORChain Queue\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedQueue: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/thorchain/queue`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing global stats for all pools and all transactions\r\n         * @summary Global Stats\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStats: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/stats`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Swaps History\r\n         * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSwapHistory: async (pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/history/swaps`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (pool !== undefined) {\r\n                localVarQueryParameter['pool'] = pool;\r\n            }\r\n\r\n            if (interval !== undefined) {\r\n                localVarQueryParameter['interval'] = interval;\r\n            }\r\n\r\n            if (count !== undefined) {\r\n                localVarQueryParameter['count'] = count;\r\n            }\r\n\r\n            if (to !== undefined) {\r\n                localVarQueryParameter['to'] = to;\r\n            }\r\n\r\n            if (from !== undefined) {\r\n                localVarQueryParameter['from'] = from;\r\n            }\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DefaultApi - functional programming interface\r\n * @export\r\n */\r\nexport const DefaultApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \r\n         * @summary Actions List\r\n         * @param {number} limit pagination limit\r\n         * @param {number} offset pagination offset\r\n         * @param {string} [address] Address of sender or recipient of any in/out transaction related to the action\r\n         * @param {string} [txid] ID of any in/out tx related to the action\r\n         * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\r\n         * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getActions(limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getActions(limit, offset, address, txid, asset, type, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Depth and Price History\r\n         * @param {string} pool Return stats for this single pool.\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getDepthHistory(pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepthHistory>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDepthHistory(pool, interval, count, to, from, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Earnings History\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getEarningsHistory(interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsHistory>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getEarningsHistory(interval, count, to, from, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing the health response of the API\r\n         * @summary Health Info\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getHealth(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Health>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getHealth(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Liquidity Changes History\r\n         * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100]\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getLiquidityHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiquidityHistory>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getLiquidityHistory(pool, interval, count, to, from, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array of statistics for all the liquidity providers associated with a given member address.\r\n         * @summary Member Details\r\n         * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getMemberDetail(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberDetails>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMemberDetail(address, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \r\n         * @summary Members List\r\n         * @param {string} [pool] Return only members present in the pool.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getMembersAdresses(pool?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMembersAdresses(pool, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing Network data\r\n         * @summary Network Data\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getNetworkData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Network>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getNetworkData(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns a list of Node public keys and adresses.\r\n         * @summary Nodes List\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getNodes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Node>>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getNodes(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns details of the pool: depths, price, 24h volume, APY. \r\n         * @summary Details of a Pool\r\n         * @param {string} asset pool name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getPool(asset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolDetail>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPool(asset, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \r\n         * @summary Pool Statistics\r\n         * @param {string} asset pool name\r\n         * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getPoolStats(asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolStatsDetail>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPoolStats(asset, period, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \r\n         * @summary Pool Statistics (v1 naming)\r\n         * @param {string} asset pool name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getPoolStatsLegacy(asset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolLegacyDetail>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPoolStatsLegacy(asset, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an array containing details for a set of pools\r\n         * @summary Pools List\r\n         * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getPools(status?: 'available' | 'staged' | 'suspended', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PoolDetail>>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPools(status, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Constant values used by THORChain , some of the values can be overrided by mimir\r\n         * @summary Proxied THORChain Constants\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getProxiedConstants(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Constants>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProxiedConstants(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\r\n         * @summary Proxied THORChain Inbound Addresses\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getProxiedInboundAddresses(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InboundAddressesItem>>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProxiedInboundAddresses(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Retrieve lastest block infomation across all chains.\r\n         * @summary Proxied THORChain Lastblock\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getProxiedLastblock(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lastblock>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProxiedLastblock(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns the proxied queue endpoint from a local thornode\r\n         * @summary Proxied THORChain Queue\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getProxiedQueue(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Queue>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProxiedQueue(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns an object containing global stats for all pools and all transactions\r\n         * @summary Global Stats\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getStats(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsData>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStats(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Swaps History\r\n         * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getSwapHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwapHistory>> {\r\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getSwapHistory(pool, interval, count, to, from, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DefaultApi - factory interface\r\n * @export\r\n */\r\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \r\n         * @summary Actions List\r\n         * @param {number} limit pagination limit\r\n         * @param {number} offset pagination offset\r\n         * @param {string} [address] Address of sender or recipient of any in/out transaction related to the action\r\n         * @param {string} [txid] ID of any in/out tx related to the action\r\n         * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\r\n         * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getActions(limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): AxiosPromise<InlineResponse200> {\r\n            return DefaultApiFp(configuration).getActions(limit, offset, address, txid, asset, type, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Depth and Price History\r\n         * @param {string} pool Return stats for this single pool.\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getDepthHistory(pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<DepthHistory> {\r\n            return DefaultApiFp(configuration).getDepthHistory(pool, interval, count, to, from, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Earnings History\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getEarningsHistory(interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<EarningsHistory> {\r\n            return DefaultApiFp(configuration).getEarningsHistory(interval, count, to, from, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns an object containing the health response of the API\r\n         * @summary Health Info\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getHealth(options?: any): AxiosPromise<Health> {\r\n            return DefaultApiFp(configuration).getHealth(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Liquidity Changes History\r\n         * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100]\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getLiquidityHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<LiquidityHistory> {\r\n            return DefaultApiFp(configuration).getLiquidityHistory(pool, interval, count, to, from, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns an array of statistics for all the liquidity providers associated with a given member address.\r\n         * @summary Member Details\r\n         * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getMemberDetail(address: string, options?: any): AxiosPromise<MemberDetails> {\r\n            return DefaultApiFp(configuration).getMemberDetail(address, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \r\n         * @summary Members List\r\n         * @param {string} [pool] Return only members present in the pool.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getMembersAdresses(pool?: string, options?: any): AxiosPromise<Array<string>> {\r\n            return DefaultApiFp(configuration).getMembersAdresses(pool, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns an object containing Network data\r\n         * @summary Network Data\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNetworkData(options?: any): AxiosPromise<Network> {\r\n            return DefaultApiFp(configuration).getNetworkData(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns a list of Node public keys and adresses.\r\n         * @summary Nodes List\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getNodes(options?: any): AxiosPromise<Array<Node>> {\r\n            return DefaultApiFp(configuration).getNodes(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns details of the pool: depths, price, 24h volume, APY. \r\n         * @summary Details of a Pool\r\n         * @param {string} asset pool name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPool(asset: string, options?: any): AxiosPromise<PoolDetail> {\r\n            return DefaultApiFp(configuration).getPool(asset, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \r\n         * @summary Pool Statistics\r\n         * @param {string} asset pool name\r\n         * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolStats(asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options?: any): AxiosPromise<PoolStatsDetail> {\r\n            return DefaultApiFp(configuration).getPoolStats(asset, period, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \r\n         * @summary Pool Statistics (v1 naming)\r\n         * @param {string} asset pool name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPoolStatsLegacy(asset: string, options?: any): AxiosPromise<PoolLegacyDetail> {\r\n            return DefaultApiFp(configuration).getPoolStatsLegacy(asset, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns an array containing details for a set of pools\r\n         * @summary Pools List\r\n         * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getPools(status?: 'available' | 'staged' | 'suspended', options?: any): AxiosPromise<Array<PoolDetail>> {\r\n            return DefaultApiFp(configuration).getPools(status, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Constant values used by THORChain , some of the values can be overrided by mimir\r\n         * @summary Proxied THORChain Constants\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedConstants(options?: any): AxiosPromise<Constants> {\r\n            return DefaultApiFp(configuration).getProxiedConstants(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\r\n         * @summary Proxied THORChain Inbound Addresses\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedInboundAddresses(options?: any): AxiosPromise<Array<InboundAddressesItem>> {\r\n            return DefaultApiFp(configuration).getProxiedInboundAddresses(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Retrieve lastest block infomation across all chains.\r\n         * @summary Proxied THORChain Lastblock\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedLastblock(options?: any): AxiosPromise<Lastblock> {\r\n            return DefaultApiFp(configuration).getProxiedLastblock(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns the proxied queue endpoint from a local thornode\r\n         * @summary Proxied THORChain Queue\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getProxiedQueue(options?: any): AxiosPromise<Queue> {\r\n            return DefaultApiFp(configuration).getProxiedQueue(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns an object containing global stats for all pools and all transactions\r\n         * @summary Global Stats\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getStats(options?: any): AxiosPromise<StatsData> {\r\n            return DefaultApiFp(configuration).getStats(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n         * @summary Swaps History\r\n         * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\r\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n         * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n         * @param {number} [from] Start time of the query as unix timestamp\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSwapHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<SwapHistory> {\r\n            return DefaultApiFp(configuration).getSwapHistory(pool, interval, count, to, from, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * DefaultApi - object-oriented interface\r\n * @export\r\n * @class DefaultApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class DefaultApi extends BaseAPI {\r\n    /**\r\n     * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \r\n     * @summary Actions List\r\n     * @param {number} limit pagination limit\r\n     * @param {number} offset pagination offset\r\n     * @param {string} [address] Address of sender or recipient of any in/out transaction related to the action\r\n     * @param {string} [txid] ID of any in/out tx related to the action\r\n     * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\r\n     * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getActions(limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getActions(limit, offset, address, txid, asset, type, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n     * @summary Depth and Price History\r\n     * @param {string} pool Return stats for this single pool.\r\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n     * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n     * @param {number} [from] Start time of the query as unix timestamp\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getDepthHistory(pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\r\n        return DefaultApiFp(this.configuration).getDepthHistory(pool, interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n     * @summary Earnings History\r\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n     * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n     * @param {number} [from] Start time of the query as unix timestamp\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getEarningsHistory(interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\r\n        return DefaultApiFp(this.configuration).getEarningsHistory(interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing the health response of the API\r\n     * @summary Health Info\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getHealth(options?: any) {\r\n        return DefaultApiFp(this.configuration).getHealth(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n     * @summary Liquidity Changes History\r\n     * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\r\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n     * @param {number} [count] Number of intervals to return. Should be between [1..100]\r\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\r\n     * @param {number} [from] Start time of the query as unix timestamp\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getLiquidityHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\r\n        return DefaultApiFp(this.configuration).getLiquidityHistory(pool, interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns an array of statistics for all the liquidity providers associated with a given member address.\r\n     * @summary Member Details\r\n     * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getMemberDetail(address: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getMemberDetail(address, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \r\n     * @summary Members List\r\n     * @param {string} [pool] Return only members present in the pool.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getMembersAdresses(pool?: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getMembersAdresses(pool, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing Network data\r\n     * @summary Network Data\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getNetworkData(options?: any) {\r\n        return DefaultApiFp(this.configuration).getNetworkData(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns a list of Node public keys and adresses.\r\n     * @summary Nodes List\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getNodes(options?: any) {\r\n        return DefaultApiFp(this.configuration).getNodes(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns details of the pool: depths, price, 24h volume, APY. \r\n     * @summary Details of a Pool\r\n     * @param {string} asset pool name\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getPool(asset: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getPool(asset, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \r\n     * @summary Pool Statistics\r\n     * @param {string} asset pool name\r\n     * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getPoolStats(asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options?: any) {\r\n        return DefaultApiFp(this.configuration).getPoolStats(asset, period, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \r\n     * @summary Pool Statistics (v1 naming)\r\n     * @param {string} asset pool name\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getPoolStatsLegacy(asset: string, options?: any) {\r\n        return DefaultApiFp(this.configuration).getPoolStatsLegacy(asset, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing details for a set of pools\r\n     * @summary Pools List\r\n     * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getPools(status?: 'available' | 'staged' | 'suspended', options?: any) {\r\n        return DefaultApiFp(this.configuration).getPools(status, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Constant values used by THORChain , some of the values can be overrided by mimir\r\n     * @summary Proxied THORChain Constants\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getProxiedConstants(options?: any) {\r\n        return DefaultApiFp(this.configuration).getProxiedConstants(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\r\n     * @summary Proxied THORChain Inbound Addresses\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getProxiedInboundAddresses(options?: any) {\r\n        return DefaultApiFp(this.configuration).getProxiedInboundAddresses(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Retrieve lastest block infomation across all chains.\r\n     * @summary Proxied THORChain Lastblock\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getProxiedLastblock(options?: any) {\r\n        return DefaultApiFp(this.configuration).getProxiedLastblock(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns the proxied queue endpoint from a local thornode\r\n     * @summary Proxied THORChain Queue\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getProxiedQueue(options?: any) {\r\n        return DefaultApiFp(this.configuration).getProxiedQueue(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing global stats for all pools and all transactions\r\n     * @summary Global Stats\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getStats(options?: any) {\r\n        return DefaultApiFp(this.configuration).getStats(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..100]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 100 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \r\n     * @summary Swaps History\r\n     * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\r\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\r\n     * @param {number} [count] Number of intervals to return. Should be between [1..100].\r\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\r\n     * @param {number} [from] Start time of the query as unix timestamp\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DefaultApi\r\n     */\r\n    public getSwapHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\r\n        return DefaultApiFp(this.configuration).getSwapHistory(pool, interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * SpecificationApi - axios parameter creator\r\n * @export\r\n */\r\nexport const SpecificationApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Swagger/OpenAPI 3.0 specification generated documents.\r\n         * @summary Documentation\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getDocs: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/doc`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * Returns human and machine readable swagger/openapi specification\r\n         * @summary Swagger File\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSwagger: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v2/swagger.json`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\r\n            for (const key in localVarQueryParameter) {\r\n                queryParameters.set(key, localVarQueryParameter[key]);\r\n            }\r\n            for (const key in options.query) {\r\n                queryParameters.set(key, options.query[key]);\r\n            }\r\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SpecificationApi - functional programming interface\r\n * @export\r\n */\r\nexport const SpecificationApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * Swagger/OpenAPI 3.0 specification generated documents.\r\n         * @summary Documentation\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getDocs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\r\n            const localVarAxiosArgs = await SpecificationApiAxiosParamCreator(configuration).getDocs(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * Returns human and machine readable swagger/openapi specification\r\n         * @summary Swagger File\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async getSwagger(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\r\n            const localVarAxiosArgs = await SpecificationApiAxiosParamCreator(configuration).getSwagger(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SpecificationApi - factory interface\r\n * @export\r\n */\r\nexport const SpecificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * Swagger/OpenAPI 3.0 specification generated documents.\r\n         * @summary Documentation\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getDocs(options?: any): AxiosPromise<void> {\r\n            return SpecificationApiFp(configuration).getDocs(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * Returns human and machine readable swagger/openapi specification\r\n         * @summary Swagger File\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        getSwagger(options?: any): AxiosPromise<void> {\r\n            return SpecificationApiFp(configuration).getSwagger(options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * SpecificationApi - object-oriented interface\r\n * @export\r\n * @class SpecificationApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class SpecificationApi extends BaseAPI {\r\n    /**\r\n     * Swagger/OpenAPI 3.0 specification generated documents.\r\n     * @summary Documentation\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SpecificationApi\r\n     */\r\n    public getDocs(options?: any) {\r\n        return SpecificationApiFp(this.configuration).getDocs(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * Returns human and machine readable swagger/openapi specification\r\n     * @summary Swagger File\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SpecificationApi\r\n     */\r\n    public getSwagger(options?: any) {\r\n        return SpecificationApiFp(this.configuration).getSwagger(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Midgard Public API\r\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\r\n *\r\n * The version of the OpenAPI document: 2.0.0-alpha.3\r\n * Contact: devs@thorchain.org\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport { Configuration } from './configuration'\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios'\r\n\r\nexport const BASE_PATH = 'http://localhost'.replace(/\\/+$/, '')\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n  csv: ',',\r\n  ssv: ' ',\r\n  tsv: '\\t',\r\n  pipes: '|',\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n  url: string\r\n  options: any\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n  protected configuration: Configuration | undefined\r\n\r\n  constructor(\r\n    configuration?: Configuration,\r\n    protected basePath: string = BASE_PATH,\r\n    protected axios: AxiosInstance = globalAxios,\r\n  ) {\r\n    if (configuration) {\r\n      this.configuration = configuration\r\n      this.basePath = configuration.basePath || this.basePath\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n  name: 'RequiredError' = 'RequiredError'\r\n  constructor(public field: string, msg?: string) {\r\n    super(msg)\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Midgard Public API\r\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\r\n *\r\n * The version of the OpenAPI document: 2.0.0-alpha.3\r\n * Contact: devs@thorchain.org\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport interface ConfigurationParameters {\r\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\r\n    basePath?: string;\r\n    baseOptions?: any;\r\n    formDataCtor?: new () => any;\r\n}\r\n\r\nexport class Configuration {\r\n    /**\r\n     * parameter for apiKey security\r\n     * @param name security name\r\n     * @memberof Configuration\r\n     */\r\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\r\n    /**\r\n     * parameter for basic security\r\n     *\r\n     * @type {string}\r\n     * @memberof Configuration\r\n     */\r\n    username?: string;\r\n    /**\r\n     * parameter for basic security\r\n     *\r\n     * @type {string}\r\n     * @memberof Configuration\r\n     */\r\n    password?: string;\r\n    /**\r\n     * parameter for oauth2 security\r\n     * @param name security name\r\n     * @param scopes oauth2 scope\r\n     * @memberof Configuration\r\n     */\r\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\r\n    /**\r\n     * override base path\r\n     *\r\n     * @type {string}\r\n     * @memberof Configuration\r\n     */\r\n    basePath?: string;\r\n    /**\r\n     * base options for axios calls\r\n     *\r\n     * @type {any}\r\n     * @memberof Configuration\r\n     */\r\n    baseOptions?: any;\r\n    /**\r\n     * The FormData constructor that will be used to create multipart form data\r\n     * requests. You can inject this here so that execution environments that\r\n     * do not support the FormData class can still run the generated client.\r\n     *\r\n     * @type {new () => FormData}\r\n     */\r\n    formDataCtor?: new () => any;\r\n\r\n    constructor(param: ConfigurationParameters = {}) {\r\n        this.apiKey = param.apiKey;\r\n        this.username = param.username;\r\n        this.password = param.password;\r\n        this.accessToken = param.accessToken;\r\n        this.basePath = param.basePath;\r\n        this.baseOptions = param.baseOptions;\r\n        this.formDataCtor = param.formDataCtor;\r\n    }\r\n\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    public isJsonMime(mime: string): boolean {\r\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n}\r\n","export const MIDGARD_TESTNET_URL = 'https://testnet.midgard.thorchain.info'\r\n","import getMidgardBaseUrl from '@thorchain/asgardex-midgard'\r\n\r\nimport { DefaultApi } from './api'\r\nimport { Configuration } from './api/configuration'\r\nimport { MIDGARD_TESTNET_URL } from './config'\r\nimport {\r\n  NetworkType,\r\n  Health,\r\n  PoolDetail,\r\n  PoolStatsDetail,\r\n  PoolLegacyDetail,\r\n  PoolStatus,\r\n  StatsPeriod,\r\n  HistoryQuery,\r\n  DepthHistory,\r\n  EarningsHistory,\r\n  SwapHistory,\r\n  LiquidityHistory,\r\n  Node,\r\n  Network,\r\n  ActionsList,\r\n  ActionListParams,\r\n  MemberDetails,\r\n  StatsData,\r\n  Constants,\r\n  InboundAddressesItem,\r\n  Lastblock,\r\n  Queue,\r\n  PoolAddress,\r\n} from './types'\r\n\r\nexport interface MidgardSDKV2 {\r\n  getVersion: () => string\r\n  getBaseUrl: () => string\r\n  getHealth: () => Promise<Health>\r\n  getPools: (status?: PoolStatus) => Promise<PoolDetail[]>\r\n  getPoolDetail: (asset: string) => Promise<PoolDetail>\r\n  getPoolStats: (param: {\r\n    asset: string\r\n    period: StatsPeriod\r\n  }) => Promise<PoolStatsDetail>\r\n  getPoolStatsV1: (asset: string) => Promise<PoolLegacyDetail>\r\n  getDepthHistory: (param: {\r\n    pool: string\r\n    query?: HistoryQuery\r\n  }) => Promise<DepthHistory>\r\n  getEarningsHistory: (query: HistoryQuery) => Promise<EarningsHistory>\r\n  getSwapHistory: (param: {\r\n    pool?: string\r\n    query?: HistoryQuery\r\n  }) => Promise<SwapHistory>\r\n  getLiquidityHistory: (param: {\r\n    pool?: string\r\n    query?: HistoryQuery\r\n  }) => Promise<LiquidityHistory>\r\n  getNodes: () => Promise<Node[]>\r\n  getNetworkData: () => Promise<Network>\r\n  getActions: (params: ActionListParams) => Promise<ActionsList>\r\n  getMembersAddresses: () => Promise<string[]>\r\n  getMemberDetail: (address: string) => Promise<MemberDetails>\r\n  getStats: () => Promise<StatsData>\r\n  getConstants: () => Promise<Constants>\r\n  getInboundAddresses: () => Promise<InboundAddressesItem[]>\r\n  getInboundAddressByChain: (chain: string) => Promise<PoolAddress>\r\n  getLastblock: () => Promise<Lastblock>\r\n  getQueue: () => Promise<Queue>\r\n}\r\n\r\nclass MidgardV2 implements MidgardSDKV2 {\r\n  private baseUrl = ''\r\n\r\n  private network: NetworkType\r\n\r\n  private readonly version = 'V2'\r\n\r\n  constructor(network: NetworkType = 'testnet') {\r\n    this.network = network\r\n    this.setBaseUrl()\r\n  }\r\n\r\n  /**\r\n   * set midgard base url\r\n   */\r\n  private setBaseUrl = async (noCache = false) => {\r\n    if (this.network === 'testnet') {\r\n      this.baseUrl = MIDGARD_TESTNET_URL\r\n    } else {\r\n      this.baseUrl = await getMidgardBaseUrl(this.network, noCache)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get midgard base url\r\n   */\r\n  getMidgard = async (noCache = false): Promise<DefaultApi> => {\r\n    await this.setBaseUrl(noCache)\r\n\r\n    const apiConfig = new Configuration({ basePath: this.baseUrl })\r\n    return new DefaultApi(apiConfig)\r\n  }\r\n\r\n  getVersion = (): string => {\r\n    return this.version\r\n  }\r\n\r\n  getBaseUrl = (): string => {\r\n    return this.baseUrl\r\n  }\r\n\r\n  getHealth = async (): Promise<Health> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getHealth()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getPools = async (status?: PoolStatus): Promise<PoolDetail[]> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n\r\n      const { data } = await midgard.getPools(status)\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getPoolDetail = async (asset: string): Promise<PoolDetail> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getPool(asset)\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getPoolStats = async ({\r\n    asset,\r\n    period,\r\n  }: {\r\n    asset: string\r\n    period: StatsPeriod\r\n  }): Promise<PoolStatsDetail> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getPoolStats(asset, period)\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getPoolStatsV1 = async (asset: string): Promise<PoolLegacyDetail> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getPoolStatsLegacy(asset)\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getDepthHistory = async ({\r\n    pool,\r\n    query = {},\r\n  }: {\r\n    pool: string\r\n    query?: HistoryQuery\r\n  }): Promise<DepthHistory> => {\r\n    try {\r\n      const { interval, count, from, to } = query\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getDepthHistory(\r\n        pool,\r\n        interval,\r\n        count,\r\n        to,\r\n        from,\r\n      )\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getEarningsHistory = async (\r\n    query: HistoryQuery,\r\n  ): Promise<EarningsHistory> => {\r\n    try {\r\n      const { interval, count, from, to } = query\r\n\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getEarningsHistory(\r\n        interval,\r\n        count,\r\n        to,\r\n        from,\r\n      )\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getSwapHistory = async ({\r\n    pool,\r\n    query = {},\r\n  }: {\r\n    pool?: string\r\n    query?: HistoryQuery\r\n  }): Promise<SwapHistory> => {\r\n    try {\r\n      const { interval, count, from, to } = query\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getSwapHistory(\r\n        pool,\r\n        interval,\r\n        count,\r\n        to,\r\n        from,\r\n      )\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getLiquidityHistory = async ({\r\n    pool,\r\n    query = {},\r\n  }: {\r\n    pool?: string\r\n    query?: HistoryQuery\r\n  }): Promise<LiquidityHistory> => {\r\n    try {\r\n      const { interval, count, from, to } = query\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getLiquidityHistory(\r\n        pool,\r\n        interval,\r\n        count,\r\n        to,\r\n        from,\r\n      )\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getNodes = async (): Promise<Node[]> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getNodes()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getNetworkData = async (): Promise<Network> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getNetworkData()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getActions = async (params: ActionListParams): Promise<ActionsList> => {\r\n    try {\r\n      const { limit, offset, address, txId, asset, type } = params\r\n\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getActions(\r\n        limit,\r\n        offset,\r\n        address,\r\n        txId,\r\n        asset,\r\n        type,\r\n      )\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getMembersAddresses = async (): Promise<string[]> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getMembersAdresses()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getMemberDetail = async (address: string): Promise<MemberDetails> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getMemberDetail(address)\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getStats = async (): Promise<StatsData> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getStats()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getConstants = async (): Promise<Constants> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getProxiedConstants()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getInboundAddresses = async (): Promise<InboundAddressesItem[]> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getProxiedInboundAddresses()\r\n\r\n      return data\r\n    } catch (error) {\r\n      // try again\r\n      try {\r\n        const midgard = await this.getMidgard(true)\r\n        const { data } = await midgard.getProxiedInboundAddresses()\r\n        return data\r\n      } catch (err) {\r\n        return Promise.reject(err)\r\n      }\r\n    }\r\n  }\r\n\r\n  getInboundAddressByChain = async (chain: string): Promise<PoolAddress> => {\r\n    try {\r\n      const inboundData = await this.getInboundAddresses()\r\n      const addresses = inboundData || []\r\n\r\n      const chainAddress = addresses.find(\r\n        (item: InboundAddressesItem) => item.chain === chain,\r\n      )\r\n\r\n      if (chainAddress) {\r\n        return chainAddress.address\r\n      }\r\n      throw new Error('pool address not found')\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getLastblock = async (): Promise<Lastblock> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getProxiedLastblock()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getQueue = async (): Promise<Queue> => {\r\n    try {\r\n      const midgard = await this.getMidgard()\r\n      const { data } = await midgard.getProxiedQueue()\r\n\r\n      return data\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n\r\nexport { MidgardV2 }\r\nexport const Midgard = MidgardV2\r\n","// default slip limit is 5%\r\nexport const DEFAULT_SLIP_LIMIT = 5\r\n","import { useCallback, useMemo } from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { ActionListParams, HistoryInterval } from 'midgard-sdk'\r\n\r\nimport * as actions from 'redux/midgard/actions'\r\nimport { RootState } from 'redux/store'\r\n\r\nimport { TX_PUBLIC_PAGE_LIMIT } from 'settings/constants/global'\r\n\r\nconst MAX_HISTORY_COUNT = 100\r\nconst PER_DAY = 'day' as HistoryInterval\r\n\r\nexport const useMidgard = () => {\r\n  const dispatch = useDispatch()\r\n  const midgardState = useSelector((state: RootState) => state.midgard)\r\n\r\n  const isGlobalHistoryLoading = useMemo(\r\n    () =>\r\n      midgardState.earningsHistoryLoading ||\r\n      midgardState.swapHistoryLoading ||\r\n      midgardState.liquidityHistoryLoading,\r\n    [midgardState],\r\n  )\r\n\r\n  // get earnings, swap, liquidity history\r\n  const getGlobalHistory = useCallback(() => {\r\n    dispatch(\r\n      actions.getEarningsHistory({\r\n        interval: PER_DAY,\r\n        count: MAX_HISTORY_COUNT,\r\n      }),\r\n    )\r\n    dispatch(\r\n      actions.getSwapHistory({\r\n        query: {\r\n          interval: PER_DAY,\r\n          count: MAX_HISTORY_COUNT,\r\n        },\r\n      }),\r\n    )\r\n    dispatch(\r\n      actions.getLiquidityHistory({\r\n        query: {\r\n          interval: PER_DAY,\r\n          count: MAX_HISTORY_COUNT,\r\n        },\r\n      }),\r\n    )\r\n  }, [dispatch])\r\n\r\n  const getPoolHistory = useCallback(\r\n    (pool: string) => {\r\n      const query = {\r\n        pool,\r\n        query: {\r\n          interval: PER_DAY,\r\n          count: MAX_HISTORY_COUNT,\r\n        },\r\n      }\r\n      dispatch(actions.getSwapHistory(query))\r\n      dispatch(actions.getDepthHistory(query))\r\n      dispatch(actions.getLiquidityHistory(query))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  // get tx data\r\n  const getTxData = useCallback(\r\n    (params: Omit<ActionListParams, 'limit'>) => {\r\n      dispatch(\r\n        actions.getActions({\r\n          ...params,\r\n          limit: TX_PUBLIC_PAGE_LIMIT,\r\n        }),\r\n      )\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    ...midgardState,\r\n    actions,\r\n    isGlobalHistoryLoading,\r\n    getPoolHistory,\r\n    getGlobalHistory,\r\n    getTxData,\r\n  }\r\n}\r\n","import { Midgard } from 'midgard-sdk'\r\n\r\nimport { config } from 'settings/config'\r\n\r\nexport const midgardApi = new Midgard(config.network)\r\n","import { MultiChain } from 'multichain-sdk'\r\n\r\nimport { config } from 'settings/config'\r\n\r\nconst multichain = new MultiChain({\r\n  network: config.network,\r\n})\r\n\r\nexport { multichain }\r\n","import { ThemeType } from '@thorchain/asgardex-theme'\r\nimport { FeeOptionKey } from '@xchainjs/xchain-client'\r\n\r\nexport enum FeeOptions {\r\n  'average' = 'average',\r\n  'fast' = 'fast',\r\n  'fastest' = 'fastest',\r\n}\r\nexport interface State {\r\n  themeType: ThemeType\r\n  baseCurrency: string\r\n  isSettingOpen: boolean\r\n  slippageTolerance: number\r\n  feeOptionType: FeeOptionKey\r\n}\r\n","import { useCallback } from 'react'\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { ThemeType } from '@thorchain/asgardex-theme'\r\nimport { FeeOptionKey } from '@xchainjs/xchain-client'\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport { actions } from 'redux/app/slice'\r\nimport { RootState } from 'redux/store'\r\n\r\nimport { FeeOptions } from './types'\r\n\r\nexport const useApp = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const appState = useSelector((state: RootState) => state.app)\r\n\r\n  const baseCurrencyAsset =\r\n    Asset.fromAssetString(appState.baseCurrency) || Asset.USD()\r\n\r\n  const setTheme = useCallback(\r\n    (theme: ThemeType) => {\r\n      dispatch(actions.setThemeType(theme))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const setBaseCurrency = useCallback(\r\n    (baseAsset: Asset) => {\r\n      dispatch(actions.setBaseCurrency(baseAsset))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const toggleSettings = useCallback(() => {\r\n    dispatch(actions.toggleSettings())\r\n  }, [dispatch])\r\n\r\n  const setSlippage = useCallback(\r\n    (slip: number) => {\r\n      dispatch(actions.setSlippage(slip))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const setFeeOptionType = useCallback(\r\n    (feeOption: FeeOptionKey) => {\r\n      dispatch(actions.setFeeOptionType(feeOption))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    ...appState,\r\n    setTheme,\r\n    baseCurrencyAsset,\r\n    FeeOptions,\r\n    setBaseCurrency,\r\n    toggleSettings,\r\n    setSlippage,\r\n    setFeeOptionType,\r\n  }\r\n}\r\n","import { Transfer, TransferEvent } from './types/binance-ws'\r\nimport { TransferFee, DexFees, Fee, TxType as BinanceTxType, Tx as BinanceTx } from './types/binance'\r\nimport { TxType, Tx, Fees } from '@xchainjs/xchain-client'\r\nimport { assetFromString, AssetBNB, assetToBase, assetAmount, baseAmount } from '@xchainjs/xchain-util'\r\nimport { DerivePath } from './types/common'\r\n\r\n/**\r\n * Get `hash` from transfer event sent by Binance chain.\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#3-transfer\r\n *\r\n * @param {TransferEvent} transfer The transfer event. (optional)\r\n * @returns {string|undefined} The hash from transfer event.\r\n */\r\nexport const getHashFromTransfer = (transfer?: { data?: Pick<Transfer, 'H'> }): string | undefined => transfer?.data?.H\r\n\r\n/**\r\n * Get `hash` from memo\r\n *\r\n * @param {TransferEvent} transfer The transfer event. (optional)\r\n * @returns {string|undefined} The hash from the memo.\r\n */\r\nexport const getTxHashFromMemo = (transfer?: TransferEvent) => transfer?.data?.M.split(':')[1]\r\n\r\n/**\r\n * Type guard for runtime checks of `Fee`\r\n *\r\n * @param {Fee|TransferFee|DexFees} v\r\n * @returns {boolean} `true` or `false`.\r\n */\r\nexport const isFee = (v: Fee | TransferFee | DexFees): v is Fee =>\r\n  !!(v as Fee)?.msg_type && (v as Fee)?.fee !== undefined && (v as Fee)?.fee_for !== undefined\r\n\r\n/**\r\n * Type guard for `TransferFee`\r\n *\r\n * @param {Fee|TransferFee|DexFees} v\r\n * @returns {boolean} `true` or `false`.\r\n */\r\nexport const isTransferFee = (v: Fee | TransferFee | DexFees): v is TransferFee =>\r\n  isFee((v as TransferFee)?.fixed_fee_params) && !!(v as TransferFee)?.multi_transfer_fee\r\n\r\n/**\r\n * Type guard for `DexFees`\r\n *\r\n * @param {Fee|TransferFee|DexFees} v\r\n * @returns {boolean} `true` or `false`.\r\n */\r\nexport const isDexFees = (v: Fee | TransferFee | DexFees): v is DexFees => (v as DexFees)?.dex_fee_fields?.length > 0\r\n\r\n/**\r\n * Get TxType\r\n *\r\n * @param {BinanceTxType} t\r\n * @returns {TxType} `transfer` or `unknown`.\r\n */\r\nexport const getTxType = (t: BinanceTxType): TxType => {\r\n  if (t === 'TRANSFER' || t === 'DEPOSIT') return 'transfer'\r\n  return 'unknown'\r\n}\r\n\r\n/**\r\n * Parse Tx\r\n *\r\n * @param {BinanceTx} t The transaction to be parsed. (optional)\r\n * @returns {Tx|null} The transaction parsed from the binance tx.\r\n */\r\nexport const parseTx = (tx: BinanceTx): Tx | null => {\r\n  const asset = assetFromString(`${AssetBNB.chain}.${tx.txAsset}`)\r\n\r\n  if (!asset) return null\r\n\r\n  return {\r\n    asset,\r\n    from: [\r\n      {\r\n        from: tx.fromAddr,\r\n        amount: assetToBase(assetAmount(tx.value, 8)),\r\n      },\r\n    ],\r\n    to: [\r\n      {\r\n        to: tx.toAddr,\r\n        amount: assetToBase(assetAmount(tx.value, 8)),\r\n      },\r\n    ],\r\n    date: new Date(tx.timeStamp),\r\n    type: getTxType(tx.txType),\r\n    hash: tx.txHash,\r\n  }\r\n}\r\n\r\n/**\r\n * Get DerivePath\r\n *\r\n * @param {number} index (optional)\r\n * @returns {DerivePath} The binance derivation path by the index.\r\n */\r\nexport const getDerivePath = (index = 0): DerivePath => [44, 714, 0, 0, index]\r\n\r\n/**\r\n * Get the default fee.\r\n *\r\n * @returns {Fees} The default fee.\r\n */\r\nexport const getDefaultFees = (): Fees => {\r\n  const singleTxFee = baseAmount(37500)\r\n\r\n  return {\r\n    type: 'base',\r\n    fast: singleTxFee,\r\n    fastest: singleTxFee,\r\n    average: singleTxFee,\r\n  } as Fees\r\n}\r\n\r\n/**\r\n * Get address prefix based on the network.\r\n *\r\n * @param {string} network\r\n * @returns {string} The address prefix based on the network.\r\n *\r\n **/\r\nexport const getPrefix = (network: string) => (network === 'testnet' ? 'tbnb' : 'bnb')\r\n","import { Button } from 'antd'\r\nimport { ButtonProps } from 'antd/lib/button'\r\nimport styled from 'styled-components'\r\nimport { palette, key } from 'styled-theme'\r\n\r\nimport { ButtonColor, ButtonSize, ButtonWeight, ButtonType } from './types'\r\n\r\nconst fontSettings = {\r\n  small: {\r\n    size: key('sizes.font.small', '10px'),\r\n    spacing: '0.5px',\r\n  },\r\n  normal: {\r\n    size: key('sizes.font.normal', '11px'),\r\n    spacing: '2.5px',\r\n  },\r\n  big: {\r\n    size: key('sizes.font.large', '18px'),\r\n    spacing: '2.5px',\r\n  },\r\n}\r\n\r\nconst sizes = {\r\n  small: {\r\n    width: key('sizes.button.small.width', '55px'),\r\n    height: key('sizes.button.small.height', '20px'),\r\n    borderBottom: '2px',\r\n  },\r\n  normal: {\r\n    width: key('sizes.button.normal.width', '100px'),\r\n    height: key('sizes.button.normal.height', '30px'),\r\n    borderBottom: '3px',\r\n  },\r\n  big: {\r\n    width: key('sizes.button.big.width', '300px'),\r\n    height: key('sizes.button.big.height', '70px'),\r\n    borderBottom: '4px',\r\n  },\r\n}\r\n\r\ntype ColorGroup = {\r\n  main: string\r\n  darken: string\r\n  lighten: string\r\n  text: string\r\n  borderBottom: string\r\n}\r\n\r\ntype ColorGroups = {\r\n  [key in ButtonColor]: ColorGroup\r\n}\r\n\r\nconst colorGroups: ColorGroups = {\r\n  primary: {\r\n    main: palette('gradient', 0),\r\n    darken: palette('gradient', 1),\r\n    lighten: palette('gradient', 2),\r\n    text: palette('primary', 0),\r\n    borderBottom: palette('gradient', 0),\r\n  },\r\n  success: {\r\n    main: palette('success', 0),\r\n    darken: palette('success', 1),\r\n    lighten: palette('success', 2),\r\n    text: palette('success', 0),\r\n    borderBottom: palette('success', 3),\r\n  },\r\n  warning: {\r\n    main: palette('warning', 0),\r\n    darken: palette('warning', 1),\r\n    lighten: palette('warning', 2),\r\n    text: palette('warning', 0),\r\n    borderBottom: palette('warning', 3),\r\n  },\r\n  error: {\r\n    main: palette('error', 0),\r\n    darken: palette('error', 1),\r\n    lighten: palette('error', 2),\r\n    text: palette('error', 0),\r\n    borderBottom: palette('error', 3),\r\n  },\r\n}\r\n\r\ntype ButtonThemeValue = {\r\n  text: string\r\n  border: string\r\n  background: string\r\n  action: {\r\n    text: string\r\n    border: string\r\n    background: string\r\n  }\r\n  focus: {\r\n    border: string\r\n    borderBottom?: string\r\n  }\r\n}\r\n\r\ntype ButtonTheme = {\r\n  [key in ButtonType]?: ButtonThemeValue\r\n}\r\n\r\ntype ButtonThemes = {\r\n  [key in ButtonColor]?: ButtonTheme\r\n}\r\n\r\nconst getThemes = () => {\r\n  const theme: ButtonThemes = {}\r\n\r\n  Object.keys(colorGroups).forEach((colorType) => {\r\n    const value: ButtonTheme = {}\r\n    const { lighten, darken, text, borderBottom } = colorGroups[\r\n      colorType as ButtonColor\r\n    ]\r\n\r\n    const gradient = 'linear-gradient(to left, #00ccff, #23dcc8)'\r\n\r\n    value.default = {\r\n      text: palette('text', 3),\r\n      border: text,\r\n      background: gradient,\r\n      action: {\r\n        text: palette('text', 3),\r\n        border: darken,\r\n        background: darken,\r\n      },\r\n      focus: {\r\n        border: darken,\r\n      },\r\n    }\r\n\r\n    value.outline = {\r\n      text,\r\n      border: text,\r\n      background: 'transparent',\r\n      action: {\r\n        text: palette('text', 3),\r\n        border: text,\r\n        background: gradient,\r\n      },\r\n      focus: {\r\n        border: text,\r\n      },\r\n    }\r\n    value.ghost = {\r\n      text: palette('text', 2),\r\n      border: palette('gray', 0),\r\n      background: 'transparent',\r\n      action: {\r\n        text: palette('text', 3),\r\n        border: text,\r\n        background: lighten,\r\n      },\r\n      focus: {\r\n        border: gradient,\r\n      },\r\n    }\r\n    value.normal = {\r\n      text: palette('text', 0),\r\n      border: palette('gray', 0),\r\n      background: 'transparent',\r\n      action: {\r\n        text: palette('text', 0),\r\n        border: palette('gray', 0),\r\n        background: 'transparent',\r\n      },\r\n      focus: {\r\n        border: palette('gray', 0),\r\n        borderBottom,\r\n      },\r\n    }\r\n\r\n    theme[colorType as ButtonColor] = value\r\n  })\r\n\r\n  return theme\r\n}\r\n\r\nconst themes: ButtonThemes = getThemes()\r\n\r\nconst getThemeValue = (color: ButtonColor, typeValue: ButtonType) => {\r\n  const theme = themes[color]\r\n  const themValue = theme && theme[typeValue]\r\n  return themValue\r\n}\r\n\r\nexport type ButtonWrapperProps = {\r\n  round: string\r\n  color: ButtonColor\r\n  sizevalue: ButtonSize\r\n  weight: ButtonWeight\r\n  typevalue: ButtonType\r\n  fixedWidth: string\r\n}\r\n\r\ntype Props = ButtonWrapperProps & ButtonProps\r\n\r\nexport const ButtonWrapper = styled(Button)<Props>`\r\n  &.ant-btn {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n\r\n    border-radius: ${(props) =>\r\n      props.round === 'true' ? sizes[props.sizevalue].height : '3px'};\r\n    width: ${(props) =>\r\n      props.fixedWidth === 'true' ? sizes[props.sizevalue].width : 'auto'};\r\n    height: ${(props) => sizes[props.sizevalue].height};\r\n    font-size: ${(props) => fontSettings[props.sizevalue].size};\r\n    font-weight: ${(props) => props.weight};\r\n    letter-spacing: ${(props) => fontSettings[props.sizevalue].spacing};\r\n\r\n    text-transform: uppercase;\r\n\r\n    /* set theme colors away from antd defaults */\r\n    &,\r\n    &:active,\r\n    &:focus {\r\n      color: ${(props) =>\r\n        getThemeValue(props.color, props.typevalue)?.text ?? ''};\r\n      border-color: ${(props) =>\r\n        getThemeValue(props.color, props.typevalue)?.border ?? ''};\r\n      background: ${(props) =>\r\n        getThemeValue(props.color, props.typevalue)?.background ?? ''};\r\n      ${(props) =>\r\n        props.typevalue === 'normal' &&\r\n        `\r\n          background-position: 0 100%;\r\n          background-repeat: no-repeat;\r\n          -webkit-background-size: 100% 3px;\r\n          -moz-background-size: 100% 3px;\r\n          background-size: 100% 3px;\r\n        `}\r\n    }\r\n\r\n    /* provide focus styles over the underlying styles */\r\n    &:focus,\r\n    &:active {\r\n      border-color: ${(props) =>\r\n        getThemeValue(props.color, props.typevalue)?.focus.border ??\r\n        ''} !important; /* (Rudi): HACK: Border is overridden in selection.style.js buttons we need to create a new style for these buttons remove this when ready */\r\n    }\r\n\r\n    /* apply special override styles for .focused class */\r\n    &.focused,\r\n    &:hover {\r\n      &,\r\n      &:focus,\r\n      &:active {\r\n        color: ${(props) =>\r\n          getThemeValue(props.color, props.typevalue)?.action.text ?? ''};\r\n        border-color: ${(props) =>\r\n          getThemeValue(props.color, props.typevalue)?.action.border ?? ''};\r\n        background: ${(props) =>\r\n          props.typevalue === 'normal'\r\n            ? getThemeValue(props.color, props.typevalue)?.focus.borderBottom ??\r\n              ''\r\n            : getThemeValue(props.color, props.typevalue)?.action.background ??\r\n              ''};\r\n        ${(props) =>\r\n          props.typevalue === 'normal' &&\r\n          `\r\n          background-position: 0 100%;\r\n          background-repeat: no-repeat;\r\n          -webkit-background-size: 100% 3px;\r\n          -moz-background-size: 100% 3px;\r\n          background-size: 100% 3px;\r\n        `}\r\n      }\r\n    }\r\n\r\n    svg {\r\n      display: flex;\r\n      font-size: 18px;\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { ButtonProps as AntBtnProps } from 'antd/lib/button'\r\n\r\nimport { ButtonWrapper } from './Button.style'\r\nimport { ButtonColor, ButtonSize, ButtonWeight, ButtonType } from './types'\r\n\r\ntype ComponentProps = {\r\n  sizevalue?: ButtonSize\r\n  color?: ButtonColor\r\n  weight?: ButtonWeight\r\n  typevalue?: ButtonType\r\n  focused?: boolean\r\n  round?: boolean\r\n  fixedWidth?: boolean\r\n  className?: string\r\n}\r\n\r\nexport type ButtonProps = ComponentProps & AntBtnProps\r\n\r\nexport const Button: React.FC<ButtonProps> = (\r\n  props: ButtonProps,\r\n): JSX.Element => {\r\n  const {\r\n    children,\r\n    sizevalue = 'normal',\r\n    color = 'primary',\r\n    typevalue = 'default',\r\n    weight = '500',\r\n    round = false,\r\n    focused = false,\r\n    fixedWidth = true,\r\n    className = '',\r\n    ...otherProps\r\n  } = props\r\n\r\n  return (\r\n    <ButtonWrapper\r\n      type=\"primary\"\r\n      weight={weight}\r\n      color={color}\r\n      sizevalue={sizevalue}\r\n      typevalue={typevalue}\r\n      round={round.toString()}\r\n      fixedWidth={fixedWidth.toString()}\r\n      className={`${className} ${focused ? 'focused' : ''}`}\r\n      {...otherProps}\r\n    >\r\n      {children}\r\n    </ButtonWrapper>\r\n  )\r\n}\r\n","import { KeyStore as KeystoreType } from '@binance-chain/javascript-sdk/lib/crypto'\r\nimport { ThemeType } from '@thorchain/asgardex-theme'\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nconst THEME_TYPE = 'THEME_TYPE'\r\nconst BEPSWAP_MULTICHAIN_KEYSTORE = 'BEPSWAP_MULTICHAIN_KEYSTORE'\r\nconst BEPSWAP_MULTICHAIN_ADDR = 'BEPSWAP_MULTICHAIN_ADDR'\r\n\r\nconst BASE_CURRENCY = 'BASE_CURRENCY'\r\n\r\nexport const saveBaseCurrency = (currency: string) => {\r\n  localStorage.setItem(BASE_CURRENCY, currency)\r\n}\r\n\r\nexport const getBaseCurrency = (): string => {\r\n  return (\r\n    (localStorage.getItem(BASE_CURRENCY) as string) || Asset.USD().toString()\r\n  )\r\n}\r\n\r\nexport const saveTheme = (themeType: ThemeType) => {\r\n  localStorage.setItem(THEME_TYPE, themeType)\r\n}\r\n\r\nexport const getTheme = (): ThemeType => {\r\n  return (localStorage.getItem(THEME_TYPE) as ThemeType) || ThemeType.DARK\r\n}\r\n\r\nexport const saveKeystore = (keystore: KeystoreType) => {\r\n  sessionStorage.setItem(BEPSWAP_MULTICHAIN_KEYSTORE, JSON.stringify(keystore))\r\n}\r\n\r\nexport const getKeystore = (): KeystoreType | null => {\r\n  const item = sessionStorage.getItem(BEPSWAP_MULTICHAIN_KEYSTORE)\r\n\r\n  if (item) {\r\n    return JSON.parse(item) as KeystoreType\r\n  }\r\n  return null\r\n}\r\n\r\nexport const saveAddress = (address: string) => {\r\n  sessionStorage.setItem(BEPSWAP_MULTICHAIN_ADDR, address)\r\n}\r\n\r\nexport const getAddress = (): string | null => {\r\n  const item = sessionStorage.getItem(BEPSWAP_MULTICHAIN_ADDR)\r\n\r\n  if (item) {\r\n    return item\r\n  }\r\n  return null\r\n}\r\n","export const THORCHAIN_DECIMAL = 8\r\nexport const BNB_DECIMAL = 8\r\nexport const BTC_DECIMAL = 8\r\nexport const ETH_DECIMAL = 18\r\nexport const BCH_DECIMAL = 8\r\nexport const LTC_DECIMAL = 8\r\n\r\nexport const DEFAULT_CHAIN_DECIMAL = 8\r\n\r\n// all multichain values from midgard are 8-decimal based.\r\nexport const MULTICHAIN_DECIMAL = 8\r\n","import { useCallback } from 'react'\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { KeyStore as KeystoreType } from '@binance-chain/javascript-sdk/lib/crypto'\r\n\r\nimport { RootState } from 'redux/store'\r\nimport * as walletActions from 'redux/wallet/actions'\r\nimport { actions } from 'redux/wallet/slice'\r\n\r\nexport const useWallet = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const walletState = useSelector((state: RootState) => state.wallet)\r\n\r\n  const unlockWallet = useCallback(\r\n    async (keystore: KeystoreType, address: string) => {\r\n      dispatch(\r\n        actions.connectWallet({\r\n          keystore,\r\n          address,\r\n        }),\r\n      )\r\n      dispatch(walletActions.loadWallet())\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const setIsConnectModalOpen = useCallback(\r\n    (visible: boolean) => {\r\n      dispatch(actions.setIsConnectModalOpen(visible))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    ...walletState,\r\n    ...walletActions,\r\n    unlockWallet,\r\n    setIsConnectModalOpen,\r\n  }\r\n}\r\n","import { useRef, useEffect } from 'react'\r\n\r\nexport const INACTIVE_INTERVAL = NaN\r\n\r\n/**\r\n * Custom hook for using `setInterval`\r\n * Based on https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n * @param callback Callback called on each interval\r\n * @param delay  Delay in ms\r\n */\r\nconst useInterval = (\r\n  callback: () => void,\r\n  delay: number = INACTIVE_INTERVAL,\r\n) => {\r\n  const savedCallback = useRef(callback)\r\n\r\n  // Remember the latest function.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current()\r\n    }\r\n    if (!Number.isNaN(delay)) {\r\n      const id = setInterval(tick, delay)\r\n      return () => clearInterval(id)\r\n    }\r\n  }, [delay])\r\n}\r\n\r\nexport default useInterval\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport type { PayloadAction } from '@reduxjs/toolkit'\r\nimport { ThemeType } from '@thorchain/asgardex-theme'\r\nimport { FeeOptionKey } from '@xchainjs/xchain-client'\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport {\r\n  getTheme,\r\n  saveTheme,\r\n  saveBaseCurrency,\r\n  getBaseCurrency,\r\n} from 'helpers/storage'\r\n\r\nimport { DEFAULT_SLIPPAGE_TOLERANCE } from 'settings/constants/global'\r\n\r\nimport { State } from './types'\r\n\r\nconst defaultTheme = getTheme()\r\n\r\nconst initialState: State = {\r\n  themeType: defaultTheme,\r\n  baseCurrency: getBaseCurrency(),\r\n  isSettingOpen: false,\r\n  slippageTolerance: DEFAULT_SLIPPAGE_TOLERANCE,\r\n  feeOptionType: 'fastest',\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    setThemeType(state, action: PayloadAction<ThemeType>) {\r\n      const themeType = action.payload\r\n\r\n      state.themeType = themeType\r\n      saveTheme(themeType)\r\n    },\r\n    setBaseCurrency(state, action: PayloadAction<Asset>) {\r\n      const assetString = action.payload.toString()\r\n      saveBaseCurrency(assetString)\r\n      state.baseCurrency = assetString\r\n    },\r\n    setSettingsOpen(state, action: PayloadAction<boolean>) {\r\n      state.isSettingOpen = action.payload\r\n    },\r\n    toggleSettings(state) {\r\n      state.isSettingOpen = !state.isSettingOpen\r\n    },\r\n    setSlippage(state, action: PayloadAction<number>) {\r\n      const slippage =\r\n        action.payload > 100 ? 100 : action.payload < 0 ? 0 : action.payload\r\n\r\n      state.slippageTolerance = slippage\r\n    },\r\n    setFeeOptionType(state, action: PayloadAction<FeeOptionKey>) {\r\n      state.feeOptionType = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { reducer, actions } = slice\r\n\r\nexport default slice\r\n","// Transition\r\nexport function transition(timing = 0.1) {\r\n  return `\r\n      -webkit-transition: all ${timing}s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n      -moz-transition: all ${timing}s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n      -ms-transition: all ${timing}s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n      -o-transition: all ${timing}s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n      transition: all ${timing}s cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  `\r\n}\r\n\r\n// Border Radius\r\nexport function borderRadius(radius = 0) {\r\n  return `\r\n      -webkit-border-radius: ${radius};\r\n      -moz-border-radius: ${radius};\r\n      -ms-transition: ${radius};\r\n      -o-border-radius: ${radius};\r\n      border-radius: ${radius};\r\n  `\r\n}\r\n\r\n// Box Shadow\r\nexport function boxShadow(shadow = 'none') {\r\n  return `\r\n      -webkit-box-shadow: ${shadow};\r\n      -moz-box-shadow: ${shadow};\r\n      box-shadow: ${shadow};\r\n  `\r\n}\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nexport const loadWallet = createAsyncThunk(\r\n  'midgard/loadWallet',\r\n  multichain.loadWallet,\r\n)\r\n","import { useCallback } from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { Amount, Asset, Price, runeToAsset } from 'multichain-sdk'\r\n\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport { useApp } from './app/hooks'\r\n\r\n/**\r\n * hooks for managing global state per page, loading moments\r\n */\r\nexport const useGlobalState = () => {\r\n  const dispatch = useDispatch()\r\n  const { actions, pools } = useMidgard()\r\n  const { baseCurrency } = useApp()\r\n\r\n  const loadInitialData = useCallback(() => {\r\n    console.log('initial loading.....')\r\n    dispatch(actions.getPools())\r\n    dispatch(actions.getStats())\r\n    dispatch(actions.getNetworkData())\r\n    dispatch(actions.getQueue())\r\n  }, [dispatch, actions])\r\n\r\n  const refreshPage = useCallback(() => {\r\n    loadInitialData()\r\n  }, [loadInitialData])\r\n\r\n  const runeToCurrency = useCallback(\r\n    (runeAmount: Amount): Price => {\r\n      const quoteAsset = Asset.fromAssetString(baseCurrency)\r\n\r\n      return runeToAsset({\r\n        runeAmount,\r\n        quoteAsset,\r\n        pools,\r\n      })\r\n    },\r\n    [baseCurrency, pools],\r\n  )\r\n\r\n  return {\r\n    runeToCurrency,\r\n    refreshPage,\r\n  }\r\n}\r\n","export const CONFIRM_DISMISS_TIME = 2000\r\n\r\nexport const TX_PAGE_LIMIT = 20\r\n\r\nexport const TX_PUBLIC_PAGE_LIMIT = 10\r\n\r\nexport const DEFAULT_SLIPPAGE_TOLERANCE = 5\r\n","/* eslint-disable no-bitwise */\r\nexport const rainbowStop = (h: number) => {\r\n  const f = (n: number, k = (n + h * 12) % 12) =>\r\n    0.5 - 0.5 * Math.max(Math.min(k - 3, 9 - k, 1), -1)\r\n  return rgb2hex(\r\n    Math.floor(f(0) * 255),\r\n    Math.floor(f(8) * 255),\r\n    Math.floor(f(4) * 255),\r\n  )\r\n}\r\n\r\nexport const rgb2hex = (r: number, g: number, b: number) =>\r\n  `#${((r << 16) + (g << 8) + b).toString(16).padStart(6, '0')}`\r\n\r\nexport const getIntFromName = (str: string): number[] => {\r\n  const inputStr = String(str).toUpperCase()\r\n\r\n  const div = 22\r\n\r\n  const firstInt = (inputStr.charCodeAt(0) - 'A'.charCodeAt(0)) / div\r\n  const secondInt =\r\n    inputStr.length > 1 ? (inputStr.charCodeAt(1) - 'A'.charCodeAt(0)) / div : 0\r\n\r\n  return [Number(firstInt.toFixed(2)), Number(secondInt.toFixed(2))]\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Size, Sizes, FontSizes } from './types'\r\n\r\ntype IconProps = {\r\n  size: Size\r\n}\r\n\r\nconst fontSizes: FontSizes = {\r\n  large: 18,\r\n  big: 11,\r\n  normal: 10,\r\n  small: 8,\r\n}\r\n\r\nexport const sizes: Sizes = {\r\n  large: 72,\r\n  big: 55,\r\n  normal: 40,\r\n  small: 32,\r\n}\r\n\r\nexport const IconWrapper = styled.div<IconProps>`\r\n  width: ${({ size }) => `${sizes[size]}px`};\r\n  min-width: ${({ size }) => `${sizes[size]}px`};\r\n  height: ${({ size }) => `${sizes[size]}px`};\r\n  position: relative;\r\n`\r\n\r\nexport const IconBG = styled.div<IconProps>`\r\n  width: ${({ size }) => `${sizes[size]}px`};\r\n  height: ${({ size }) => `${sizes[size]}px`};\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  background-color: ${palette('gray', 1)};\r\n`\r\n\r\nexport const IconFallback = styled.div<IconProps>`\r\n  width: ${({ size }) => `${sizes[size]}px`};\r\n  height: ${({ size }) => `${sizes[size]}px`};\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: ${({ size }) => `${fontSizes[size]}px`};\r\n  color: ${palette('text', 3)};\r\n`\r\n\r\nexport const Icon = styled.img<IconProps>`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: ${({ size }) => `${sizes[size]}px`};\r\n  height: ${({ size }) => `${sizes[size]}px`};\r\n  border-radius: 50%;\r\n`\r\n","export const assetIconMap: Record<string, string> = {\r\n  ABCD: 'ABCD-5D8',\r\n  AERGO: 'AERGO-46B',\r\n  ALA: 'ALA-DCD',\r\n  ANKR: 'ANKR-E97',\r\n  ARN: 'ARN-71B',\r\n  ARPA: 'ARPA-575',\r\n  ART: 'ART-3C9',\r\n  ATP: 'ATP-38C',\r\n  AVA: 'AVA-645',\r\n  AWC: 'AWC-986',\r\n  AXPR: 'AXPR-777',\r\n  BAW: 'BAW-DFB',\r\n  BCH: 'BCH-1FD',\r\n  BCPT: 'BCPT-95A',\r\n  BEAR: 'BEAR-14C',\r\n  BET: 'BET-844',\r\n  BETX: 'BETX-A0C',\r\n  BGBP: 'BGBP-CF3',\r\n  BHC: 'BHC-3E8M',\r\n  BHFT: 'BHFT-BBE',\r\n  BIDR: 'BIDR-0E9',\r\n  BKBT: 'BKBT-3A6',\r\n  BKRW: 'BKRW-AB7',\r\n  BLINK: 'BLINK-9C6',\r\n  BOLT: 'BOLT-4C6',\r\n  BST2: 'BST2-2F2',\r\n  BTC: 'BTCB-1DE',\r\n  BTCB: 'BTCB-1DE',\r\n  BTTB: 'BTTB-D31',\r\n  BULL: 'BULL-BE4',\r\n  BUSD: 'BUSD-BD1',\r\n  BZNT: 'BZNT-464',\r\n  CAN: 'CAN-677',\r\n  CAS: 'CAS-167',\r\n  CBIX: 'CBIX-3C9',\r\n  CBM: 'CBM-4B2',\r\n  CHZ: 'CHZ-ECD',\r\n  CNNS: 'CNNS-E16',\r\n  COS: 'COS-2E4',\r\n  COTI: 'COTI-CBB',\r\n  COVA: 'COVA-218',\r\n  CRPT: 'CRPT-8C9',\r\n  CSM: 'CSM-734',\r\n  DARC: 'DARC-24B',\r\n  DEEP: 'DEEP-9D3',\r\n  DEFI: 'DEFI-FA5',\r\n  DOS: 'DOS-120',\r\n  DREP: 'DREP-7D2',\r\n  DUSK: 'DUSK-45E',\r\n  EBST: 'EBST-783',\r\n  ECO: 'ECO-083',\r\n  EET: 'EET-45C',\r\n  ENTRP: 'ENTRP-C8D',\r\n  EOS: 'EOS-CDD',\r\n  EOSBEAR: 'EOSBEAR-721',\r\n  EOSBULL: 'EOSBULL-F0D',\r\n  EQL: 'EQL-586',\r\n  ERD: 'ERD-D06',\r\n  ETH: 'ETH-1C9',\r\n  ETHBEAR: 'ETHBEAR-B2B',\r\n  ETHBULL: 'ETHBULL-D33',\r\n  EVT: 'EVT-49B',\r\n  FRM: 'FRM-DE7',\r\n  FSN: 'FSN-E14',\r\n  FTM: 'FTM-A64',\r\n  GIV: 'GIV-94E',\r\n  GMAT: 'GMAT-FC8',\r\n  GTEX: 'GTEX-71B',\r\n  GTO: 'GTO-908',\r\n  HNST: 'HNST-3C9',\r\n  HYN: 'HYN-F21',\r\n  IDRTB: 'IDRTB-178',\r\n  IRIS: 'IRIS-D88',\r\n  JDXU: 'JDXU-706',\r\n  KAT: 'KAT-7BB',\r\n  KAVA: 'KAVA-10C',\r\n  LBA: 'LBA-340',\r\n  LIT: 'LIT-099',\r\n  LOKI: 'LOKI-6A9',\r\n  LTC: 'LTC-F07',\r\n  LTO: 'LTO-BDF',\r\n  LYFE: 'LYFE-6AB',\r\n  MATIC: 'MATIC-84A',\r\n  MCASH: 'MCASH-869',\r\n  MDAB: 'MDAB-D42',\r\n  MEDB: 'MEDB-87E',\r\n  MEETONE: 'MEETONE-031',\r\n  MITH: 'MITH-C76',\r\n  MITX: 'MITX-CAA',\r\n  MTV: 'MTV-4C6',\r\n  MTXLT: 'MTXLT-286',\r\n  MVL: 'MVL-7B0',\r\n  MZK: 'MZK-2C7',\r\n  NEW: 'NEW-09E',\r\n  NEXO: 'NEXO-A84',\r\n  NODE: 'NODE-F3A',\r\n  NOIZB: 'NOIZB-878',\r\n  NOW: 'NOW-E68',\r\n  NPXB: 'NPXB-1E8',\r\n  NPXSXEM: 'NPXSXEM-89C',\r\n  ONE: 'ONE-5F9',\r\n  ONT: 'ONT-33D',\r\n  OWTX: 'OWTX-A6B',\r\n  PCAT: 'PCAT-4BB',\r\n  PHB: 'PHB-2DF',\r\n  PHV: 'PHV-4A1',\r\n  PIBNB: 'PIBNB-43C',\r\n  PLG: 'PLG-D8D',\r\n  PVT: 'PVT-554',\r\n  PYN: 'PYN-C37',\r\n  QBX: 'QBX-38C',\r\n  RAVEN: 'RAVEN-F66',\r\n  RNO: 'RNO-14E',\r\n  RUNE: 'RUNE-B1A',\r\n  SBC: 'SBC-5D4',\r\n  SHR: 'SHR-DB6',\r\n  SLV: 'SLV-986',\r\n  SPNDB: 'SPNDB-916',\r\n  STYL: 'STYL-65B',\r\n  SWINGBY: 'SWINGBY-888',\r\n  SWIPE: 'SWIPE.B-DC0',\r\n  SXP: 'SXP-CCC',\r\n  TAUDB: 'TAUDB-888',\r\n  TCADB: 'TCADB-888',\r\n  TGBPB: 'TGBPB-888',\r\n  THKDB: 'THKDB-888',\r\n  TM2: 'TM2-0C4',\r\n  TOMOB: 'TOMOB-4BC',\r\n  TOP: 'TOP-491',\r\n  TROY: 'TROY-9B8',\r\n  TRUE: 'TRUE-D84',\r\n  TRXB: 'TRXB-2E6',\r\n  TUSDB: 'TUSDB-888',\r\n  TWT: 'TWT-8C2',\r\n  UGAS: 'UGAS-B0C',\r\n  UND: 'UND-EBC',\r\n  UPX: 'UPX-F3E',\r\n  USDH: 'USDH-5B5',\r\n  USDT: 'USDT-6D8',\r\n  USDSB: 'USDSB-1AC',\r\n  VDX: 'VDX-A17',\r\n  VIDT: 'VIDT-F53',\r\n  VNDC: 'VNDC-DB9',\r\n  VOTE: 'VOTE-FD4',\r\n  VRAB: 'VRAB-B56',\r\n  WICC: 'WICC-01D',\r\n  WINB: 'WINB-41F',\r\n  WISH: 'WISH-2D5',\r\n  WRX: 'WRX-ED1',\r\n  XBASE: 'XBASE-CD2',\r\n  XNS: 'XNS-760',\r\n  XRP: 'XRP-BF2',\r\n  XRPBEAR: 'XRPBEAR-00B',\r\n  XRPBULL: 'XRPBULL-E7C',\r\n  XTZ: 'XTZ-F7A',\r\n  ZEBI: 'ZEBI-84F',\r\n}\r\n","import React, { useMemo, useCallback } from 'react'\r\n\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\nimport * as RD from '@devexperts/remote-data-ts'\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport { useRemoteImage } from 'hooks/useRemoteImage'\r\n\r\nimport { getIntFromName, rainbowStop } from 'helpers/color'\r\n\r\nimport * as Styled from './AssetIcon.style'\r\nimport { Size } from './types'\r\nimport { getAssetIconUrl } from './utils'\r\n\r\ntype ComponentProps = {\r\n  size?: Size\r\n  asset: Asset\r\n}\r\n\r\nexport type Props = ComponentProps & React.HTMLAttributes<HTMLDivElement>\r\n\r\nexport const AssetIcon: React.FC<Props> = React.memo(\r\n  ({ asset, size = 'normal', ...rest }): JSX.Element => {\r\n    const imgUrl = useMemo(() => {\r\n      return getAssetIconUrl(asset)\r\n    }, [asset])\r\n\r\n    const remoteIconImage = useRemoteImage(imgUrl)\r\n\r\n    const renderIcon = useCallback(\r\n      (src: string) => (\r\n        <Styled.IconWrapper size={size} {...rest}>\r\n          <Styled.Icon src={src} size={size} />{' '}\r\n        </Styled.IconWrapper>\r\n      ),\r\n      [size, rest],\r\n    )\r\n\r\n    const renderPendingIcon = useCallback(() => {\r\n      return (\r\n        <Styled.IconWrapper size={size}>\r\n          <LoadingOutlined />\r\n        </Styled.IconWrapper>\r\n      )\r\n    }, [size])\r\n\r\n    const renderFallbackIcon = useCallback(() => {\r\n      const { ticker } = asset\r\n      const numbers = getIntFromName(ticker)\r\n      const backgroundImage = `linear-gradient(45deg,${rainbowStop(\r\n        numbers[0],\r\n      )},${rainbowStop(numbers[1])})`\r\n\r\n      return (\r\n        <Styled.IconWrapper {...rest} size={size}>\r\n          <Styled.IconFallback style={{ backgroundImage }} size={size}>\r\n            {ticker}\r\n          </Styled.IconFallback>\r\n        </Styled.IconWrapper>\r\n      )\r\n    }, [asset, size, rest])\r\n\r\n    return RD.fold(\r\n      () => <></>,\r\n      renderPendingIcon,\r\n      renderFallbackIcon,\r\n      renderIcon,\r\n    )(remoteIconImage)\r\n  },\r\n)\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport * as RD from '@devexperts/remote-data-ts'\r\n\r\nexport const useRemoteImage = (src: string) => {\r\n  const [remoteImage, setRemoteImage] = useState<RD.RemoteData<string, string>>(\r\n    RD.pending,\r\n  )\r\n\r\n  useEffect(() => {\r\n    const onLoadHandler = () => setRemoteImage(RD.success(src))\r\n    const onErrorHandler = () => setRemoteImage(RD.failure(src))\r\n\r\n    const image = new Image()\r\n    image.addEventListener('load', onLoadHandler)\r\n    image.addEventListener('error', onErrorHandler)\r\n    image.src = src\r\n    // clean up\r\n    return () => {\r\n      image.removeEventListener('load', onLoadHandler)\r\n      image.removeEventListener('error', onErrorHandler)\r\n    }\r\n  }, [src])\r\n\r\n  return remoteImage\r\n}\r\n","import { Asset } from 'multichain-sdk'\r\n\r\nimport { bnbIcon, nativeRuneIcon } from 'components/Icons'\r\n\r\nimport { assetIconMap } from 'settings/logoData'\r\n\r\nexport const getAssetIconUrl = (asset: Asset): string => {\r\n  if (asset.isBNB()) {\r\n    return bnbIcon\r\n  }\r\n  if (asset.isRUNE()) {\r\n    return nativeRuneIcon\r\n  }\r\n\r\n  // ethereum logos\r\n  if (asset.ticker === 'WETH') {\r\n    return 'https://assets.coingecko.com/coins/images/2518/large/weth.png'\r\n  }\r\n\r\n  const logoSymbol = assetIconMap[asset.ticker]\r\n\r\n  if (logoSymbol) {\r\n    return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/${logoSymbol}/logo.png`\r\n  }\r\n\r\n  return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/${asset.symbol}/logo.png`\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Input } from '../Input'\r\n\r\ntype Props = {\r\n  outlined: boolean\r\n}\r\n\r\nexport const StyledInput = styled(Input)<Props>`\r\n  width: 100%;\r\n  background: ${palette('background', 1)};\r\n  color: ${palette('text', 0)};\r\n  font-size: 24px;\r\n  ${(props) =>\r\n    !props.outlined &&\r\n    `\r\n      &.ant-input {\r\n        border: none;\r\n        padding: 0;\r\n        &:focus {\r\n          outline: none;\r\n          border: none;\r\n          box-shadow: none;\r\n        }\r\n      }\r\n      &.ant-input.ant-input-disabled {\r\n        background-color: ${palette('background', 1)};\r\n        color: ${palette('text', 0)};\r\n      }\r\n  `}\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\n\r\nimport { Amount } from 'multichain-sdk'\r\n\r\nimport { InputProps } from '../Input'\r\nimport { StyledInput } from './InputAmount.style'\r\nimport { getAmountFromString } from './utils'\r\n\r\nexport type InputAmountProps = Omit<InputProps, 'value' | 'onChange'> & {\r\n  value?: Amount\r\n  onChange?: (value: Amount) => void\r\n  decimal?: number\r\n  outlined?: boolean\r\n  disabled?: boolean\r\n}\r\n\r\nexport const InputAmount = (props: InputAmountProps) => {\r\n  const {\r\n    value = Amount.fromAssetAmount(0, 8),\r\n    onChange = () => {},\r\n    decimal = 8,\r\n    outlined = true,\r\n    disabled = false,\r\n    ...others\r\n  } = props\r\n\r\n  const [rawValue, setRawValue] = useState(value.toFixed(decimal))\r\n\r\n  useEffect(() => {\r\n    setRawValue(value.toFixed(decimal))\r\n  }, [value, decimal])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newValue = getAmountFromString(e.target.value, value.decimal)\r\n\r\n      if (newValue) {\r\n        setRawValue(newValue.toFixed(decimal))\r\n        onChange(newValue)\r\n      } else {\r\n        setRawValue(e.target.value)\r\n      }\r\n    },\r\n    [value, onChange, decimal],\r\n  )\r\n\r\n  return (\r\n    <StyledInput\r\n      value={rawValue}\r\n      onChange={handleChange}\r\n      outlined={outlined}\r\n      disabled={disabled}\r\n      {...others}\r\n    />\r\n  )\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { Amount } from 'multichain-sdk'\r\n\r\nexport const getAmountFromString = (\r\n  value: string,\r\n  decimal: number,\r\n): Amount | null => {\r\n  const trim = value.replace(/[, ]+/g, '').trim()\r\n\r\n  if (\r\n    trim !== '' &&\r\n    trim[trim.length - 1] === '.' &&\r\n    trim.split('.').length <= 2\r\n  ) {\r\n    return null\r\n  }\r\n\r\n  if (trim !== '' && trim[trim.length - 1] === '0' && trim.includes('.')) {\r\n    return null\r\n  }\r\n\r\n  const bn = new BigNumber(trim)\r\n\r\n  if (bn.isNaN()) return Amount.fromAssetAmount(0, decimal)\r\n\r\n  return Amount.fromAssetAmount(bn, decimal)\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const LogoWrapper = styled.div`\r\n  display: block;\r\n  cursor: pointer;\r\n\r\n  #Thorchain_logo-copy {\r\n    > :not(:first-child) {\r\n      fill: ${palette('text', 1)};\r\n    }\r\n  }\r\n`\r\n\r\nexport const BepswapIconWrapper = styled.div`\r\n  svg {\r\n    height: 26px;\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { BepswapIcon, ThorChainIcon } from 'components/Icons'\r\n\r\nimport { LogoWrapper, BepswapIconWrapper } from './Logo.style'\r\n\r\nexport type Props = {\r\n  type: 'thorchain' | 'bepswap'\r\n}\r\n\r\nexport const Logo = (props: Props) => {\r\n  const { type } = props\r\n\r\n  return (\r\n    <LogoWrapper>\r\n      {type === 'thorchain' ? (\r\n        <ThorChainIcon />\r\n      ) : (\r\n        <BepswapIconWrapper>\r\n          <BepswapIcon />\r\n        </BepswapIconWrapper>\r\n      )}\r\n    </LogoWrapper>\r\n  )\r\n}\r\n","import { Input } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette, key } from 'styled-theme'\r\n\r\nimport { TypeValue, SizeValue, Color } from './types'\r\n\r\nconst fontSettings = {\r\n  small: {\r\n    size: key('sizes.font.small', '10px'),\r\n    spacing: '0.5px',\r\n  },\r\n  normal: {\r\n    size: '14px',\r\n    spacing: '0.5px',\r\n  },\r\n  big: {\r\n    size: '20px',\r\n    spacing: '0.75px',\r\n  },\r\n}\r\n\r\nconst sizes = {\r\n  small: '20px',\r\n  normal: '25px',\r\n  big: '36px',\r\n}\r\n\r\nconst colors = {\r\n  primary: palette('primary', 0),\r\n  success: palette('success', 0),\r\n  warning: palette('warning', 0),\r\n  error: palette('error', 0),\r\n}\r\n\r\ntype Props = {\r\n  typevalue: TypeValue\r\n  sizevalue: SizeValue\r\n  color: Color\r\n}\r\n\r\nexport const InputWrapper = styled(Input)<Props>`\r\n  &.ant-input-affix-wrapper,\r\n  &.ant-input {\r\n    height: ${(props) => sizes[props.sizevalue]};\r\n    font-size: ${(props) => fontSettings[props.sizevalue].size};\r\n    letter-spacing: ${(props) => fontSettings[props.sizevalue].spacing};\r\n    ${(props) => props.typevalue === 'ghost' && 'border: none;'};\r\n    ${(props) => props.typevalue === 'ghost' && 'background: #F0F3F7;'};\r\n\r\n    border: 1px solid ${palette('gray', 0)};\r\n    background: ${palette('background', 1)};\r\n    color: ${palette('text', 0)};\r\n    input,\r\n    input:-internal-autofill-selected {\r\n      color: ${palette('text', 0)};\r\n      background: ${palette('background', 1)};\r\n    }\r\n\r\n    &:hover,\r\n    &:focus {\r\n      border-color: ${(props) => colors[props.color]};\r\n      --antd-wave-shadow-color: ${(props) => colors[props.color]};\r\n      box-shadow: ${(props) =>\r\n        props.typevalue === 'ghost'\r\n          ? 'none'\r\n          : `0 0 0 2px ${colors[props.color]}`};\r\n    }\r\n  }\r\n\r\n  .ant-input-prefix {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { InputProps as AntInputProps } from 'antd/lib/input'\r\n\r\nimport { InputWrapper } from './Input.style'\r\nimport { TypeValue, SizeValue, Color } from './types'\r\n\r\nexport type InputProps = {\r\n  typevalue?: TypeValue\r\n  sizevalue?: SizeValue\r\n  color?: Color\r\n} & AntInputProps\r\n\r\nexport const Input = (props: InputProps) => {\r\n  const {\r\n    typevalue = 'normal',\r\n    sizevalue = 'normal',\r\n    color = 'primary',\r\n    ...others\r\n  } = props\r\n\r\n  return (\r\n    <InputWrapper\r\n      typevalue={typevalue}\r\n      sizevalue={sizevalue}\r\n      color={color}\r\n      {...others}\r\n    />\r\n  )\r\n}\r\n","import { InfoCircleOutlined } from '@ant-design/icons'\r\nimport styled from 'styled-components/macro'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const TooltipContent = styled.div`\r\n  max-width: 300px;\r\n\r\n  font-size: 14px;\r\n  color: ${palette('text', 0)};\r\n\r\n  z-index: 99999;\r\n`\r\n\r\nexport const InfoIcon = styled(InfoCircleOutlined)`\r\n  color: ${(props) => palette(props.color, 0)};\r\n  margin: 0 10px;\r\n`\r\n","import React from 'react'\r\n\r\nimport { Popover as AntPopover } from 'antd'\r\nimport { PopoverProps as Props } from 'antd/lib/popover'\r\n\r\nimport { getAppContainer } from 'helpers/element'\r\n\r\nimport { TooltipContent, InfoIcon } from './Tooltip.style'\r\n\r\nexport interface TooltipProps extends Partial<Props> {\r\n  tooltip: React.ReactNode\r\n  children: React.ReactElement\r\n}\r\n\r\nexport const Tooltip = ({\r\n  placement = 'topLeft',\r\n  tooltip,\r\n  children,\r\n}: TooltipProps) => {\r\n  return (\r\n    <AntPopover\r\n      content={<TooltipContent>{tooltip}</TooltipContent>}\r\n      getPopupContainer={getAppContainer}\r\n      placement={placement}\r\n      overlayStyle={{\r\n        animationDuration: '0s !important',\r\n        animation: 'none !important',\r\n        background: 'transparent',\r\n      }}\r\n      mouseEnterDelay={0.01}\r\n    >\r\n      {children}\r\n    </AntPopover>\r\n  )\r\n}\r\n\r\nexport interface QuestionProps extends Partial<TooltipProps> {\r\n  tooltip: React.ReactNode\r\n  color?: string\r\n}\r\n\r\nexport const Question = ({\r\n  placement = 'bottom',\r\n  tooltip,\r\n  color = 'primary',\r\n}: QuestionProps) => {\r\n  return (\r\n    <Tooltip tooltip={tooltip} placement={placement}>\r\n      <InfoIcon color={color} />\r\n    </Tooltip>\r\n  )\r\n}\r\n","import { Statistic } from 'antd'\r\nimport { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const StatsCard = styled(Statistic)`\r\n  background: ${(props) =>\r\n    transparentize(0.1, props.theme.palette.background[0])};\r\n  border: 1px solid ${palette('gray', 0)};\r\n\r\n  text-transform: uppercase;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  height: 79px;\r\n\r\n  &:before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 6px;\r\n    height: 79px;\r\n    left: 8px;\r\n    top: 0px;\r\n    border-bottom-left-radius: 3px;\r\n    border-top-left-radius: 3px;\r\n    background: ${palette('gradient', 0)};\r\n  }\r\n\r\n  .ant-statistic-title {\r\n    color: ${palette('text', 1)};\r\n    font-size: 14px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .ant-statistic-content {\r\n    margin-top: 12px;\r\n    display: flex;\r\n\r\n    span {\r\n      color: ${palette('text', 0)};\r\n      font-family: 'Exo 2';\r\n      font-size: 16px;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n`\r\n","export const getAppContainer = () => {\r\n  return document.getElementById('app-global') as HTMLElement\r\n}\r\n","import { Network } from 'multichain-sdk'\r\n\r\nconst safeEnv = (defaultEnv: string, env?: string) => {\r\n  return env || defaultEnv\r\n}\r\n\r\nexport type Config = {\r\n  network: Network\r\n}\r\n\r\nexport const config: Config = {\r\n  network: safeEnv('testnet', process.env.REACT_APP_NETWORK) as Network,\r\n}\r\n","export * from './constants'\r\nexport * from './entities'\r\nexport * from './clients'\r\nexport * from './utils'\r\n","import { KeyStore as KeystoreType } from '@binance-chain/javascript-sdk/lib/crypto'\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport type { PayloadAction } from '@reduxjs/toolkit'\r\n\r\nimport {\r\n  getKeystore,\r\n  saveKeystore,\r\n  saveAddress,\r\n  getAddress,\r\n} from 'helpers/storage'\r\n\r\nimport * as walletActions from './actions'\r\nimport { State } from './types'\r\n\r\nconst initialState: State = {\r\n  keystore: getKeystore(),\r\n  address: getAddress(),\r\n  wallet: null,\r\n  walletLoading: false,\r\n  isConnectModalOpen: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'wallet',\r\n  initialState,\r\n  reducers: {\r\n    connectWallet(\r\n      state,\r\n      action: PayloadAction<{ keystore: KeystoreType; address: string }>,\r\n    ) {\r\n      const { keystore, address } = action.payload\r\n\r\n      state.keystore = keystore\r\n      state.address = address\r\n      saveKeystore(keystore)\r\n      saveAddress(address)\r\n    },\r\n    setIsConnectModalOpen(state, action: PayloadAction<boolean>) {\r\n      state.isConnectModalOpen = action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(walletActions.loadWallet.pending, (state) => {\r\n        state.walletLoading = true\r\n      })\r\n      .addCase(walletActions.loadWallet.fulfilled, (state, action) => {\r\n        state.wallet = action.payload\r\n        state.walletLoading = false\r\n      })\r\n      .addCase(walletActions.loadWallet.rejected, (state) => {\r\n        state.walletLoading = false\r\n      })\r\n  },\r\n})\r\n\r\nexport const { reducer, actions } = slice\r\n\r\nexport default slice\r\n","export { Chart } from './Chart'\r\n\r\nexport * from './types'\r\n","import { FeeOptionKey } from '@xchainjs/xchain-client'\r\nimport {\r\n  BTCChain,\r\n  BNBChain,\r\n  THORChain,\r\n  ETHChain,\r\n  LTCChain,\r\n  // BCHChain,\r\n} from '@xchainjs/xchain-util'\r\n\r\nimport { AssetAmount, Pool, Percent } from '../entities'\r\n\r\nexport type Network = 'testnet' | 'mainnet'\r\n\r\nexport type TxParams = {\r\n  assetAmount: AssetAmount\r\n  recipient: string\r\n  memo?: string\r\n  feeOptionKey?: FeeOptionKey\r\n}\r\n\r\nexport type MultiSendParams = {\r\n  assetAmount1: AssetAmount\r\n  assetAmount2: AssetAmount\r\n  recipient: string\r\n  memo?: string\r\n}\r\n\r\nexport type AddLiquidityParams = {\r\n  pool: Pool\r\n  runeAmount?: AssetAmount\r\n  assetAmount: AssetAmount\r\n}\r\n\r\nexport type WithdrawParams = {\r\n  pool: Pool\r\n  percent: Percent\r\n}\r\n\r\n// note only supported chains\r\nexport const supportedChains = [\r\n  BTCChain,\r\n  BNBChain,\r\n  THORChain,\r\n  ETHChain,\r\n  LTCChain,\r\n  // BCHChain,\r\n] as const\r\nexport type SupportedChain = typeof supportedChains[number]\r\n\r\nexport type ChainWallet = {\r\n  address: string\r\n  balance: AssetAmount[]\r\n}\r\n\r\nexport type Wallet = ChainWallet\r\n","import { TxHash, Balance } from '@xchainjs/xchain-client'\r\nimport { baseAmount, Chain, BNBChain } from '@xchainjs/xchain-util'\r\n\r\nimport { Client as BncClient, MultiTransfer, Network } from 'services/binance'\r\n\r\nimport { AmountType, Amount, Asset, AssetAmount } from '../entities'\r\nimport { IClient } from './client'\r\nimport { TxParams, MultiSendParams } from './types'\r\n\r\nexport interface IBnbChain extends IClient {\r\n  getClient(): BncClient\r\n  multiSend(params: MultiSendParams): Promise<TxHash>\r\n}\r\n\r\nexport class BnbChain implements IBnbChain {\r\n  private balances: AssetAmount[] = []\r\n\r\n  private client: BncClient\r\n\r\n  public readonly chain: Chain\r\n\r\n  constructor({\r\n    network = 'testnet',\r\n    phrase,\r\n  }: {\r\n    network?: Network\r\n    phrase: string\r\n  }) {\r\n    this.chain = BNBChain\r\n    this.client = new BncClient({\r\n      network,\r\n      phrase,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * get xchain-binance client\r\n   */\r\n  getClient(): BncClient {\r\n    return this.client\r\n  }\r\n\r\n  get balance() {\r\n    return this.balances\r\n  }\r\n\r\n  loadBalance = async (): Promise<AssetAmount[]> => {\r\n    try {\r\n      const balances: Balance[] = await this.client.getBalance()\r\n\r\n      this.balances = balances.map((data: Balance) => {\r\n        const { asset, amount } = data\r\n\r\n        const assetObj = new Asset(asset.chain, asset.symbol)\r\n        const amountObj = new Amount(\r\n          amount.amount(),\r\n          AmountType.BASE_AMOUNT,\r\n          assetObj.decimal,\r\n        )\r\n\r\n        return new AssetAmount(assetObj, amountObj)\r\n      })\r\n\r\n      return this.balances\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  hasAmountInBalance = async (assetAmount: AssetAmount): Promise<boolean> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(assetAmount.asset),\r\n      )\r\n\r\n      if (!assetBalance) return false\r\n\r\n      return assetBalance.amount.gte(assetAmount.amount)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getAssetBalance = async (asset: Asset): Promise<AssetAmount> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(asset),\r\n      )\r\n\r\n      if (!assetBalance)\r\n        return new AssetAmount(asset, Amount.fromAssetAmount(0, asset.decimal))\r\n\r\n      return assetBalance\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * transfer on binance chain\r\n   * @param {TxParams} tx transfer parameter\r\n   */\r\n  transfer = async (tx: TxParams): Promise<TxHash> => {\r\n    // use xchainjs-client standard internally\r\n    try {\r\n      const { assetAmount, recipient, memo } = tx\r\n      const { asset } = assetAmount\r\n      const amount = baseAmount(assetAmount.amount.baseAmount)\r\n\r\n      return await this.client.transfer({\r\n        asset: {\r\n          chain: asset.chain,\r\n          symbol: asset.symbol,\r\n          ticker: asset.ticker,\r\n        },\r\n        amount,\r\n        recipient,\r\n        memo,\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * multiSend on binance chain\r\n   * @param {MultiSendParams} params transfer parameter\r\n   */\r\n  multiSend = async (params: MultiSendParams): Promise<TxHash> => {\r\n    // use xchainjs-client standard internally\r\n    try {\r\n      const { assetAmount1, assetAmount2, recipient, memo } = params\r\n\r\n      const transactions: MultiTransfer[] = [\r\n        {\r\n          to: recipient,\r\n          coins: [\r\n            {\r\n              asset: {\r\n                chain: assetAmount1.asset.chain,\r\n                symbol: assetAmount1.asset.symbol,\r\n                ticker: assetAmount1.asset.ticker,\r\n              },\r\n              amount: baseAmount(assetAmount1.amount.baseAmount),\r\n            },\r\n            {\r\n              asset: {\r\n                chain: assetAmount2.asset.chain,\r\n                symbol: assetAmount2.asset.symbol,\r\n                ticker: assetAmount2.asset.ticker,\r\n              },\r\n              amount: baseAmount(assetAmount2.amount.baseAmount),\r\n            },\r\n          ],\r\n        },\r\n      ]\r\n\r\n      return await this.client.multiSend({\r\n        transactions,\r\n        memo,\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport default function usePrevious<T>(state: T): T | undefined {\r\n  const ref = useRef<T>()\r\n\r\n  useEffect(() => {\r\n    ref.current = state\r\n  })\r\n\r\n  return ref.current\r\n}\r\n","import { Asset } from 'multichain-sdk'\r\n\r\nexport const currencyIndexAssets: Asset[] = [\r\n  Asset.USD(),\r\n  Asset.RUNE(),\r\n  Asset.BTC(),\r\n  Asset.ETH(),\r\n  Asset.BNB(),\r\n  Asset.LTC(),\r\n]\r\n","import { Row } from 'antd'\r\nimport styled from 'styled-components'\r\n\r\nimport { Label } from 'components/UIElements/Label'\r\n\r\nimport { AssetIcon as UIAssetIcon } from '../AssetIcon'\r\n\r\nexport type AssetDataSize = 'small' | 'normal' | 'big'\r\n\r\nexport const Wrapper = styled(Row).attrs({\r\n  align: 'middle',\r\n})`\r\n  display: flex;\r\n  padding: 0 8px;\r\n`\r\n\r\nexport const AssetIcon = styled(UIAssetIcon)``\r\n\r\nexport const TickerLabel = styled(Label).attrs({\r\n  textTransform: 'uppercase',\r\n  weight: '600',\r\n})`\r\n  min-width: 50px;\r\n  padding-left: 10px;\r\n`\r\n\r\nexport const AmountLabel = styled(Label).attrs({\r\n  textTransform: 'uppercase',\r\n  weight: '600',\r\n})`\r\n  padding-left: 10px;\r\n`\r\n\r\nexport const PriceLabel = styled(Label).attrs({\r\n  textTransform: 'uppercase',\r\n  weight: 'normal',\r\n  color: 'light',\r\n})`\r\n  padding-left: 10px;\r\n`\r\n","import React, { useMemo } from 'react'\r\n\r\nimport { Col } from 'antd'\r\nimport { Amount, Asset, Price } from 'multichain-sdk'\r\n\r\nimport * as Styled from './AssetData.style'\r\n\r\n/**\r\n * AssetData - Component to show asset data in one row:\r\n *\r\n * |------|-------------------|-------------------|------------------|\r\n * | icon | ticker (optional) | amount (optional) | price (optional) |\r\n * |------|-------------------|-------------------|------------------|\r\n *\r\n */\r\n\r\nexport type Props = {\r\n  asset: Asset\r\n  amount?: Amount\r\n  price?: Price\r\n  size?: Styled.AssetDataSize\r\n  showLabel?: boolean\r\n  decimal?: number\r\n}\r\n\r\nexport const AssetData: React.FC<Props> = (props): JSX.Element => {\r\n  const {\r\n    asset,\r\n    amount,\r\n    price,\r\n    size = 'normal',\r\n    showLabel = true,\r\n    decimal = 2,\r\n    ...others\r\n  } = props\r\n\r\n  const labelSize = useMemo(() => {\r\n    if (size === 'big') return 'large'\r\n    return 'big'\r\n  }, [size])\r\n\r\n  return (\r\n    <Styled.Wrapper {...others}>\r\n      <Col>\r\n        <Styled.AssetIcon asset={asset} size={size} />\r\n      </Col>\r\n      {showLabel && (\r\n        <Col>\r\n          <Styled.TickerLabel size={labelSize}>\r\n            {asset.ticker}\r\n          </Styled.TickerLabel>\r\n        </Col>\r\n      )}\r\n      {!!amount && (\r\n        <Col>\r\n          <Styled.AmountLabel size={labelSize}>\r\n            {amount.toFixed(decimal)}\r\n          </Styled.AmountLabel>\r\n        </Col>\r\n      )}\r\n      {!!price && (\r\n        <Col>\r\n          <Styled.PriceLabel size={labelSize}>\r\n            {price.toFixed(2)}\r\n          </Styled.PriceLabel>\r\n        </Col>\r\n      )}\r\n    </Styled.Wrapper>\r\n  )\r\n}\r\n","import React, { useMemo, useCallback } from 'react'\r\n\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport { FilterMenu } from 'components/UIElements/FilterMenu'\r\n\r\nimport { AssetData } from '../AssetData'\r\n\r\nconst filterFunction = (asset: Asset, searchTerm: string) => {\r\n  const { ticker } = asset\r\n  return ticker?.toLowerCase().indexOf(searchTerm.toLowerCase()) === 0\r\n}\r\n\r\nexport type Props = {\r\n  asset: Asset\r\n  assets: Asset[]\r\n  searchDisable: string[]\r\n  withSearch?: boolean\r\n  searchPlaceholder?: string\r\n  onSelect: (value: string) => void\r\n  closeMenu?: () => void\r\n}\r\n\r\nexport const AssetMenu: React.FC<Props> = (props): JSX.Element => {\r\n  const {\r\n    searchPlaceholder,\r\n    assets,\r\n    asset,\r\n    withSearch = true,\r\n    searchDisable = [],\r\n    onSelect = () => {},\r\n    closeMenu,\r\n  } = props\r\n\r\n  const filteredData = useMemo(\r\n    (): Asset[] => assets.filter((a: Asset) => !asset.eq(a)),\r\n    [asset, assets],\r\n  )\r\n\r\n  const cellRenderer = useCallback((a: Asset) => {\r\n    const node = <AssetData asset={a} />\r\n    const key = a.toString()\r\n    return { key, node }\r\n  }, [])\r\n\r\n  const disableItemFilterHandler = useCallback(\r\n    (a: Asset) => searchDisable.indexOf(a.ticker) > -1,\r\n    [searchDisable],\r\n  )\r\n\r\n  return (\r\n    <FilterMenu\r\n      placeholder={searchPlaceholder}\r\n      closeMenu={closeMenu}\r\n      searchEnabled={withSearch}\r\n      filterFunction={filterFunction}\r\n      cellRenderer={cellRenderer}\r\n      disableItemFilter={(a: Asset) => disableItemFilterHandler(a)}\r\n      onSelect={onSelect}\r\n      data={filteredData}\r\n    />\r\n  )\r\n}\r\n","import { CaretDownOutlined } from '@ant-design/icons'\r\nimport styled, { css } from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { transition } from 'settings/style-util'\r\n\r\nimport { AssetData as UnstyledAssetData } from '../AssetData'\r\n\r\nexport const AssetSelectWrapper = styled.div<{ minWidth?: number }>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  border-radius: 2px;\r\n  text-transform: uppercase;\r\n  ${transition()};\r\n`\r\n\r\nexport const AssetSelectMenuWrapper = styled.div<{ minWidth?: number }>`\r\n  margin-top: 10px;\r\n`\r\n\r\nexport const DropdownIcon = styled(CaretDownOutlined)`\r\n  transition: transform 0.2s ease-in-out;\r\n  ${({ open }) =>\r\n    open ? 'transform: rotate(180deg);' : 'transform: rotate(0);'}\r\n  font-size: 18px;\r\n\r\n  svg {\r\n    font-size: 22px;\r\n    color: ${palette('primary', 0)};\r\n  }\r\n`\r\n\r\nexport const DropdownIconHolder = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  transition: transform 0.2s ease-in-out;\r\n`\r\n\r\nexport const AssetDropdownButton = styled.button`\r\n  ${({ disabled }) => css`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    background: transparent;\r\n    border: none;\r\n    cursor: pointer;\r\n    padding: 0;\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n    > * {\r\n      margin-right: 10px;\r\n\r\n      &:last-child {\r\n        margin: 0;\r\n      }\r\n    }\r\n\r\n    ${!disabled\r\n      ? css`\r\n          &:hover {\r\n            ${DropdownIconHolder} {\r\n              transform: translateY(-1px);\r\n            }\r\n          }\r\n        `\r\n      : ''};\r\n  `}\r\n`\r\n\r\nexport const AssetData = styled(UnstyledAssetData)`\r\n  flex: 1;\r\n  padding-left: 0;\r\n`\r\n\r\nexport const Selector = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  padding: 2px 4px 2px 4px;\r\n  border-radius: 0.5rem;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background-color: ${palette('background', 2)};\r\n  }\r\n`\r\n","import React, { useCallback, useState } from 'react'\r\n\r\nimport { delay } from '@xchainjs/xchain-util'\r\nimport { Dropdown } from 'antd'\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport { AssetMenu } from '../AssetMenu'\r\nimport {\r\n  AssetSelectWrapper,\r\n  AssetDropdownButton,\r\n  AssetSelectMenuWrapper,\r\n  DropdownIconHolder,\r\n  DropdownIcon,\r\n  AssetData,\r\n  Selector,\r\n} from './AssetSelect.style'\r\n\r\ntype DropdownCarretProps = {\r\n  open: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nconst DropdownCarret: React.FC<DropdownCarretProps> = (\r\n  props: DropdownCarretProps,\r\n): JSX.Element => {\r\n  const { open, onClick = () => {} } = props\r\n  return (\r\n    <DropdownIconHolder>\r\n      <DropdownIcon open={open} onClick={onClick} />\r\n    </DropdownIconHolder>\r\n  )\r\n}\r\n\r\nexport type Props = {\r\n  assets: Asset[]\r\n  asset: Asset\r\n  withSearch?: boolean\r\n  showLabel?: boolean\r\n  searchDisable?: string[]\r\n  onSelect: (_: Asset) => void\r\n  minWidth?: number\r\n  searchPlaceholder?: string\r\n  size?: 'small' | 'normal' | 'big'\r\n}\r\n\r\nexport const AssetSelect: React.FC<Props> = (props): JSX.Element => {\r\n  const {\r\n    asset,\r\n    assets = [],\r\n    withSearch = true,\r\n    showLabel = true,\r\n    searchDisable = [],\r\n    onSelect = () => {},\r\n    children,\r\n    minWidth,\r\n    searchPlaceholder = 'Search...',\r\n    size = 'small',\r\n    ...others\r\n  } = props\r\n\r\n  const [openDropdown, setOpenDropdown] = useState<boolean>(false)\r\n\r\n  const closeMenu = useCallback(() => {\r\n    if (openDropdown) {\r\n      setOpenDropdown(false)\r\n    }\r\n  }, [setOpenDropdown, openDropdown])\r\n\r\n  const handleDropdownButtonClicked = (e: React.MouseEvent) => {\r\n    e.stopPropagation()\r\n    // toggle dropdown state\r\n    setOpenDropdown(!openDropdown)\r\n  }\r\n\r\n  const handleChangeAsset = useCallback(\r\n    async (assetId: string) => {\r\n      setOpenDropdown(false)\r\n\r\n      // Wait for the dropdown to close\r\n      await delay(100)\r\n      const changedAsset = assets.find((a: Asset) => assetId === a.toString())\r\n      if (changedAsset) {\r\n        onSelect(changedAsset)\r\n      }\r\n    },\r\n    [assets, onSelect],\r\n  )\r\n\r\n  const renderMenu = useCallback(() => {\r\n    const sortedAssetData = assets.sort((a: Asset, b: Asset) =>\r\n      a.sortsBefore(b),\r\n    )\r\n    return (\r\n      <AssetSelectMenuWrapper minWidth={minWidth}>\r\n        <AssetMenu\r\n          searchPlaceholder={searchPlaceholder}\r\n          closeMenu={closeMenu}\r\n          assets={sortedAssetData}\r\n          asset={asset}\r\n          withSearch={withSearch}\r\n          searchDisable={searchDisable}\r\n          onSelect={handleChangeAsset}\r\n        />\r\n      </AssetSelectMenuWrapper>\r\n    )\r\n  }, [\r\n    assets,\r\n    asset,\r\n    closeMenu,\r\n    handleChangeAsset,\r\n    searchDisable,\r\n    withSearch,\r\n    minWidth,\r\n    searchPlaceholder,\r\n  ])\r\n\r\n  const renderDropDownButton = () => {\r\n    const disabled = assets.length === 0\r\n    return (\r\n      <AssetDropdownButton disabled={disabled}>\r\n        {!disabled ? <DropdownCarret open={openDropdown} /> : null}\r\n      </AssetDropdownButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <AssetSelectWrapper minWidth={minWidth} {...others}>\r\n      <Dropdown overlay={renderMenu()} trigger={[]} visible={openDropdown}>\r\n        <>\r\n          {!!children && children}\r\n          <Selector onClick={handleDropdownButtonClicked}>\r\n            <AssetData asset={asset} showLabel={showLabel} size={size} />\r\n            {renderDropDownButton()}\r\n          </Selector>\r\n        </>\r\n      </Dropdown>\r\n    </AssetSelectWrapper>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { transition } from 'settings/style-util'\r\n\r\nexport const AssetInputWrapper = styled.div<{\r\n  disabled: boolean\r\n  border: boolean\r\n}>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  min-width: 50px;\r\n  height: 64px;\r\n  padding: 2px 8px;\r\n\r\n  text-transform: uppercase;\r\n  ${transition()};\r\n\r\n  border-radius: 2px;\r\n  border: 1px solid\r\n    ${({ disabled, border }) =>\r\n      disabled || !border ? 'transaparent' : palette('gray', 0)};\r\n\r\n  &:hover {\r\n    border-color: ${palette('success', 0)};\r\n  }\r\n\r\n  .asset-input-header {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .asset-input-title {\r\n      font-size: 13px;\r\n      color: ${palette('text', 0)};\r\n      letter-spacing: 1px;\r\n      margin-right: 4px;\r\n    }\r\n    .asset-input-info {\r\n      font-size: 13px;\r\n      color: ${palette('text', 2)};\r\n      letter-spacing: 1px;\r\n    }\r\n  }\r\n\r\n  .asset-input-content {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    .asset-amount-label {\r\n      white-space: nowrap;\r\n      font-size: 12px;\r\n      color: ${palette('text', 2)};\r\n      letter-spacing: 1px;\r\n      text-align: right;\r\n    }\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { InputAmount as UnstyledInputAmount } from 'components/UIElements/InputAmount'\r\nimport { Label } from 'components/UIElements/Label'\r\n\r\nimport { AssetSelect as BaseAssetSelect } from '../AssetSelect'\r\n\r\nconst CONTAINER_SIDE_PADDING = 16\r\n\r\nexport const AssetCardWrapper = styled.div`\r\n  width: 100%;\r\n  .title-label {\r\n    font-style: italic;\r\n  }\r\n\r\n  .selection-wrapper {\r\n    width: auto;\r\n    margin-top: 10px;\r\n\r\n    .btn-wrapper {\r\n      width: 20%;\r\n    }\r\n  }\r\n`\r\n\r\nexport const CardBorderWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n\r\n  border: 1px solid ${palette('gray', 0)};\r\n  border-radius: 3px;\r\n  background-color: ${palette('background', 1)};\r\n\r\n  & .coinData-wrapper {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nexport const CardTopRow = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  min-width: 250px;\r\n  padding: 40px 0;\r\n`\r\n\r\nexport const AssetCardFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n\r\nexport const AssetNameLabel = styled(Label).attrs({\r\n  size: 'normal',\r\n  weight: 'bold',\r\n})`\r\n  font-size: 16px;\r\n  letter-spacing: 0.75px;\r\n  transition: transform 0.2s ease-in-out;\r\n  text-transform: uppercase;\r\n  border-bottom: 1px solid ${palette('gray', 0)};\r\n  padding: 9px ${CONTAINER_SIDE_PADDING}px;\r\n`\r\n\r\nexport const AssetData = styled.div.attrs({ className: 'asset-data' })`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  margin-right: 5px;\r\n`\r\n\r\nexport const FooterLabel = styled(Label).attrs({\r\n  size: 'normal',\r\n  color: 'light',\r\n  weight: 'normal',\r\n})`\r\n  letter-spacing: 0.4px;\r\n  padding: 0;\r\n`\r\n\r\nexport const AssetSelect = styled(BaseAssetSelect)`\r\n  width: 100%;\r\n\r\n  // we have to set padding to the children 'cause of ant\r\n  // calculates position based on parent's box-model\r\n  > * {\r\n    &:first-child {\r\n      padding-left: ${CONTAINER_SIDE_PADDING}px;\r\n    }\r\n\r\n    &:last-child {\r\n      padding-right: ${CONTAINER_SIDE_PADDING}px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const InputAmount = styled(UnstyledInputAmount).attrs({\r\n  sizevalue: 'big',\r\n  outlined: true,\r\n})`\r\n  padding: 0;\r\n  margin-bottom: 5px;\r\n  box-shadow: none !important;\r\n\r\n  &.ant-input {\r\n    border-top: none;\r\n    border-right: none;\r\n    border-left: none;\r\n    padding: 0;\r\n    &:focus {\r\n      border-top: none;\r\n      border-right: none;\r\n      border-left: none;\r\n    }\r\n  }\r\n`\r\n\r\nexport const SliderWrapper = styled.div`\r\n  padding: 0 5px 20px 10px;\r\n`\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Label, Button } from '../../UIElements'\r\nimport { AssetInput as UnstyledAssetInput } from '../AssetInput'\r\nimport { AssetSelect as UnstyledAssetSelect } from '../AssetSelect'\r\n\r\nexport const CardWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  border: 1px solid ${palette('gray', 0)};\r\n  border-radius: 4px;\r\n\r\n  padding-right: 4px;\r\n`\r\n\r\nexport const CardContent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  padding: 6px 0px;\r\n  width: 100%;\r\n`\r\n\r\nexport const AssetInputContent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n\r\n  width: 250px;\r\n`\r\n\r\nexport const AssetInput = styled(UnstyledAssetInput)`\r\n  flex-grow: 1;\r\n  margin-right: 0;\r\n`\r\n\r\nexport const AssetSelect = styled(UnstyledAssetSelect)``\r\n\r\nexport const AssetInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: flex-end;\r\n  height: 100%;\r\n\r\n  padding-bottom: 10px;\r\n`\r\n\r\nexport const BalanceLabel = styled(Label).attrs({\r\n  size: 'normal',\r\n})`\r\n  font-size: 13px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    font-weight: bold;\r\n  }\r\n`\r\n\r\nexport const MaxBtn = styled(Button).attrs({\r\n  typevalue: 'outline',\r\n  round: true,\r\n  fixedWidth: false,\r\n})`\r\n  &.ant-btn {\r\n    border-radius: 8px;\r\n    width: 44px;\r\n    margin-bottom: 6px;\r\n  }\r\n`\r\n\r\nexport const Balance = styled.div`\r\n  margin-left: 6px;\r\n  margin-bottom: 4px;\r\n`\r\n","import React, { useRef, useCallback } from 'react'\r\n\r\nimport { Amount } from 'multichain-sdk'\r\n\r\nimport {\r\n  InputAmount,\r\n  InputAmountProps,\r\n} from 'components/UIElements/InputAmount'\r\n\r\nimport { AssetInputWrapper } from './AssetInput.style'\r\n\r\nexport type Props = {\r\n  title: string\r\n  info?: string\r\n  amount: Amount\r\n  label?: string\r\n  inputProps?: InputAmountProps\r\n  decimal?: number\r\n  disabled?: boolean\r\n  border?: boolean\r\n  onChange: (value: Amount) => void\r\n}\r\n\r\nexport const AssetInput: React.FC<Props> = (props): JSX.Element => {\r\n  const {\r\n    title,\r\n    amount,\r\n    info,\r\n    label,\r\n    inputProps = {},\r\n    onChange,\r\n    decimal = 8,\r\n    border = true,\r\n    ...otherProps\r\n  } = props\r\n\r\n  const inputRef = useRef<HTMLDivElement>(null)\r\n  const { disabled = false } = inputProps\r\n\r\n  const onChangeHandler = useCallback(\r\n    (value: Amount) => {\r\n      onChange(value)\r\n    },\r\n    [onChange],\r\n  )\r\n\r\n  const handleClickWrapper = useCallback(() => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    inputRef.current?.firstChild?.focus()\r\n  }, [])\r\n\r\n  return (\r\n    <AssetInputWrapper\r\n      disabled={disabled}\r\n      onClick={handleClickWrapper}\r\n      border={border}\r\n      {...otherProps}\r\n    >\r\n      <div className=\"asset-input-header\">\r\n        <span className=\"asset-input-title\">{title}</span>\r\n        {info && <span className=\"asset-input-info\">{info}</span>}\r\n      </div>\r\n      <div className=\"asset-input-content\" ref={inputRef}>\r\n        <InputAmount\r\n          value={amount}\r\n          onChange={onChangeHandler}\r\n          sizevalue=\"big\"\r\n          decimal={decimal}\r\n          outlined={false}\r\n          {...inputProps}\r\n        />\r\n        {label && <span className=\"asset-amount-label\">{label}</span>}\r\n      </div>\r\n    </AssetInputWrapper>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Amount, Asset, Price } from 'multichain-sdk'\r\n\r\nimport { InputAmountProps } from 'components/UIElements/InputAmount'\r\n\r\nimport {\r\n  CardWrapper,\r\n  CardContent,\r\n  AssetInput,\r\n  AssetSelect,\r\n  AssetInputContent,\r\n  AssetInfo,\r\n  BalanceLabel,\r\n  MaxBtn,\r\n  Balance,\r\n} from './AssetInputCard.style'\r\n\r\nexport type Props = {\r\n  // AssetInput Props\r\n  title: string\r\n  amount?: Amount\r\n  label?: string\r\n  inputProps?: InputAmountProps\r\n  decimal?: number\r\n  onChange?: (value: Amount) => void\r\n  balance?: Amount\r\n  usdPrice?: Price\r\n  onMax?: () => void\r\n  // AssetSelect Props\r\n  asset: Asset\r\n  assets: Asset[]\r\n  withSearch?: boolean\r\n  searchDisable?: string[]\r\n  onSelect: (_: Asset) => void\r\n  minWidth?: number\r\n  searchPlaceholder?: string\r\n}\r\n\r\nexport const AssetInputCard: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const {\r\n    // AssetInput Props\r\n    title,\r\n    amount = Amount.fromAssetAmount(0, 8),\r\n    label = '',\r\n    inputProps = { disabled: false },\r\n    decimal = 8,\r\n    onChange = () => {},\r\n    balance,\r\n    usdPrice,\r\n    onMax,\r\n    // AssetSelect Props\r\n    asset,\r\n    assets = [],\r\n    withSearch = true,\r\n    searchDisable = [],\r\n    minWidth,\r\n    searchPlaceholder = 'Search...',\r\n    onSelect = () => {},\r\n    ...otherProps\r\n  } = props\r\n\r\n  return (\r\n    <CardWrapper {...otherProps}>\r\n      <CardContent>\r\n        <AssetInputContent>\r\n          <AssetInput\r\n            title={title}\r\n            amount={amount}\r\n            label={label}\r\n            info={usdPrice && `(${usdPrice.toCurrencyFormat(2)})`}\r\n            inputProps={inputProps}\r\n            decimal={decimal}\r\n            onChange={onChange}\r\n            border={false}\r\n          />\r\n          {onMax && <MaxBtn onClick={onMax}>Max</MaxBtn>}\r\n        </AssetInputContent>\r\n        <AssetInfo>\r\n          {balance && (\r\n            <Balance onClick={() => onMax?.()}>\r\n              <BalanceLabel>BALANCE: {balance.toFixed(2)}</BalanceLabel>\r\n            </Balance>\r\n          )}\r\n          <AssetSelect\r\n            asset={asset}\r\n            assets={assets}\r\n            withSearch={withSearch}\r\n            searchDisable={searchDisable}\r\n            minWidth={minWidth}\r\n            searchPlaceholder={searchPlaceholder}\r\n            onSelect={onSelect}\r\n          />\r\n        </AssetInfo>\r\n      </CardContent>\r\n    </CardWrapper>\r\n  )\r\n}\r\n","import { Amount } from 'multichain-sdk'\r\n\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nexport enum QueueLevel {\r\n  GOOD = 'GOOD', // queue < 10\r\n  SLOW = 'SLOW', // 10 < queue < 30\r\n  BUSY = 'BUSY', // 30 < queue\r\n}\r\n\r\nconst QUEUE_BUSY_LEVEL = 30\r\nconst QUEUE_SLOW_LEVEL = 10\r\n\r\nconst useNetwork = () => {\r\n  const { networkData, queue } = useMidgard()\r\n\r\n  const outboundQueue = Number(queue?.outbound ?? 0)\r\n\r\n  const getQueueLevel = (queueValue: number) => {\r\n    if (queueValue > QUEUE_BUSY_LEVEL) return QueueLevel.BUSY\r\n    if (queueValue > QUEUE_SLOW_LEVEL) return QueueLevel.SLOW\r\n    return QueueLevel.GOOD\r\n  }\r\n\r\n  const outboundQueueLevel: QueueLevel = getQueueLevel(outboundQueue)\r\n  const isOutboundBusy = outboundQueueLevel === QueueLevel.BUSY\r\n  const isOutboundDelayed =\r\n    outboundQueueLevel === QueueLevel.BUSY ||\r\n    outboundQueueLevel === QueueLevel.SLOW\r\n\r\n  const getOutboundBusyTooltip = () => {\r\n    return 'The network is currently experiencing delays signing outgoing transactions.'\r\n  }\r\n\r\n  type StatusColor = 'green' | 'yellow' | 'red'\r\n\r\n  const statusColors: {\r\n    [key: string]: StatusColor\r\n  } = {\r\n    GOOD: 'green',\r\n    SLOW: 'yellow',\r\n    BUSY: 'red',\r\n  }\r\n  const statusColor: StatusColor = statusColors[outboundQueueLevel]\r\n\r\n  const maxPooledRuneAmount: Amount | null = null\r\n\r\n  const totalPooledRune: Amount = Amount.fromMidgard(\r\n    networkData?.totalPooledRune ?? 0,\r\n  )\r\n\r\n  const globalRunePooledStatus = `TOTAL ${totalPooledRune.toFixed(\r\n    0,\r\n  )} RUNE POOLED`\r\n\r\n  // totalStake / maxStake < 95% OR maxStakeRuneAmount is 0\r\n  const isValidFundCaps: boolean =\r\n    !maxPooledRuneAmount ||\r\n    totalPooledRune.div(maxPooledRuneAmount).assetAmount.isLessThan(0.95)\r\n\r\n  return {\r\n    globalRunePooledStatus,\r\n    isValidFundCaps,\r\n    QueueLevel,\r\n    outboundQueueLevel,\r\n    isOutboundDelayed,\r\n    isOutboundBusy,\r\n    statusColor,\r\n    getOutboundBusyTooltip,\r\n  }\r\n}\r\n\r\nexport default useNetwork\r\n","import { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { WalletButton } from '../UIElements'\r\n\r\nexport const HeaderContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  width: 100vw;\r\n  height: 70px;\r\n\r\n  background-color: transparent;\r\n  background-repeat: no-repeat;\r\n  background-image: ${({ theme }) =>\r\n    `linear-gradient(180deg, ${transparentize(\r\n      0.8,\r\n      '#23DCC8',\r\n    )} 0%, ${transparentize(1, theme.palette.background[0])} 100%)`};\r\n\r\n  padding: 0 10px;\r\n  z-index: 999;\r\n`\r\n\r\nexport const HeaderLogo = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 20px;\r\n  padding-top: 12px;\r\n`\r\n\r\nexport const HeaderActions = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`\r\n\r\nexport const HeaderAction = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nexport const HeaderCenterWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px 10px;\r\n\r\n  border: 1px solid ${palette('gray', 0)};\r\n  border-radius: 4px;\r\n`\r\n\r\nexport const WalletBtn = styled(WalletButton)`\r\n  margin-left: 10px;\r\n`\r\n\r\nexport const TxIcon = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`\r\n\r\nexport const ToolWrapper = styled.div`\r\n  margin-right: 8px;\r\n`\r\n","import React, { useCallback, useState, useEffect } from 'react'\r\n\r\nimport { useHistory } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport { CurrencySelector } from 'components/CurrencySelector'\r\n\r\nimport { useApp } from 'redux/app/hooks'\r\nimport { useGlobalState } from 'redux/hooks'\r\nimport { useWallet } from 'redux/wallet/hooks'\r\n\r\nimport useNetwork from 'hooks/useNetwork'\r\n\r\nimport { HOME_ROUTE, TX_ROUTE } from 'settings/constants'\r\nimport { currencyIndexAssets } from 'settings/constants/currency'\r\n\r\nimport { TimerFullIcon } from '../Icons'\r\nimport { Logo } from '../Logo'\r\nimport { NetworkStatus } from '../NetworkStatus'\r\nimport { Refresh } from '../Refresh'\r\nimport { ThemeSwitch } from '../ThemeSwitch'\r\nimport { IconButton, Label } from '../UIElements'\r\nimport { Tooltip } from '../UIElements/Tooltip'\r\nimport { WalletDrawer } from '../WalletDrawer'\r\nimport * as Styled from './Header.style'\r\n\r\nexport const Header = () => {\r\n  const history = useHistory()\r\n\r\n  const { baseCurrencyAsset, setBaseCurrency } = useApp()\r\n  const { wallet, setIsConnectModalOpen } = useWallet()\r\n  const { refreshPage } = useGlobalState()\r\n  const { isValidFundCaps, globalRunePooledStatus, statusColor } = useNetwork()\r\n\r\n  const [drawerVisible, setDrawerVisible] = useState(false)\r\n\r\n  const isConnected = !!wallet\r\n\r\n  useEffect(() => {\r\n    refreshPage()\r\n  }, [refreshPage])\r\n\r\n  const handleClickWalletBtn = useCallback(() => {\r\n    if (!isConnected) {\r\n      setIsConnectModalOpen(true)\r\n    } else {\r\n      setDrawerVisible(true)\r\n    }\r\n  }, [setIsConnectModalOpen, isConnected])\r\n\r\n  const handleCloseDrawer = useCallback(() => {\r\n    setDrawerVisible(false)\r\n  }, [])\r\n\r\n  const handleClickTx = useCallback(() => {\r\n    history.push(TX_ROUTE)\r\n  }, [history])\r\n\r\n  const handleSelectCurrency = useCallback(\r\n    (baseAsset: Asset) => {\r\n      setBaseCurrency(baseAsset)\r\n    },\r\n    [setBaseCurrency],\r\n  )\r\n\r\n  return (\r\n    <Styled.HeaderContainer>\r\n      <Styled.HeaderLogo>\r\n        <Link to={HOME_ROUTE}>\r\n          <Logo type=\"thorchain\" />\r\n        </Link>\r\n        <Styled.HeaderAction>\r\n          <NetworkStatus status={statusColor} />\r\n          <ThemeSwitch />\r\n        </Styled.HeaderAction>\r\n      </Styled.HeaderLogo>\r\n\r\n      <Styled.HeaderCenterWrapper>\r\n        <Label weight=\"bold\">\r\n          {globalRunePooledStatus} {!isValidFundCaps && '(Funds Cap Reached)'}\r\n        </Label>\r\n      </Styled.HeaderCenterWrapper>\r\n\r\n      <Styled.HeaderAction>\r\n        <Styled.ToolWrapper>\r\n          <CurrencySelector\r\n            selected={baseCurrencyAsset}\r\n            currencies={currencyIndexAssets}\r\n            onSelect={handleSelectCurrency}\r\n          />\r\n        </Styled.ToolWrapper>\r\n        <Tooltip tooltip=\"View Transaction\">\r\n          <IconButton onClick={handleClickTx}>\r\n            <Styled.TxIcon>\r\n              <TimerFullIcon />\r\n            </Styled.TxIcon>\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Styled.WalletBtn\r\n          onClick={handleClickWalletBtn}\r\n          connected={isConnected}\r\n        />\r\n        <WalletDrawer visible={drawerVisible} onClose={handleCloseDrawer} />\r\n        <Refresh onRefresh={refreshPage} />\r\n      </Styled.HeaderAction>\r\n    </Styled.HeaderContainer>\r\n  )\r\n}\r\n","import styled from 'styled-components/macro'\r\n\r\nexport const StatusItem = styled.div`\r\n  padding-left: 10px;\r\n`\r\n\r\nexport const DropdownLink = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n","import React, { useMemo } from 'react'\r\n\r\nimport { DownOutlined } from '@ant-design/icons'\r\nimport { Dropdown, Row } from 'antd'\r\n\r\nimport { midgardApi } from 'services/midgard'\r\n\r\nimport { getHostnameFromUrl } from 'helpers/api'\r\n\r\nimport { StatusBadge, Menu, Label, IconButton } from '../UIElements'\r\nimport * as Styled from './NetworkStatus.style'\r\n\r\ntype MenuItem = {\r\n  key: string\r\n  label: string\r\n  url?: string\r\n  status: 'red' | 'yellow' | 'green'\r\n}\r\n\r\ntype Props = {\r\n  status: 'red' | 'yellow' | 'green'\r\n}\r\n\r\n// TODO: implement outbound queue level\r\n\r\nexport const NetworkStatus: React.FC<Props> = ({\r\n  status: globalStatus,\r\n}: Props): JSX.Element => {\r\n  // Midgard IP on devnet OR on test|chaos|mainnet\r\n  const midgardUrl = getHostnameFromUrl(midgardApi.getBaseUrl()) || ''\r\n\r\n  const menuItems: MenuItem[] = useMemo(\r\n    () => [\r\n      {\r\n        key: 'midgard_api',\r\n        label: 'Midgard',\r\n        url: midgardUrl,\r\n        status: 'green',\r\n      },\r\n      {\r\n        key: 'thornode',\r\n        label: 'THORNODE',\r\n        url: 'OK',\r\n        status: 'green',\r\n      },\r\n    ],\r\n    [midgardUrl],\r\n  )\r\n\r\n  const menu = useMemo(\r\n    () => (\r\n      <Menu\r\n        style={{\r\n          fontWeight: 'bold',\r\n          textTransform: 'uppercase',\r\n          letterSpacing: '1px',\r\n        }}\r\n        className=\"connection-menu-items\"\r\n      >\r\n        {menuItems.map((item) => {\r\n          const { label, key, status, url } = item\r\n          return (\r\n            <Menu.Item\r\n              style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                padding: '8px 10px',\r\n              }}\r\n              key={key}\r\n            >\r\n              <StatusBadge color={status} />\r\n              <Styled.StatusItem>\r\n                <Row>\r\n                  <Label weight=\"bold\">{label}</Label>\r\n                </Row>\r\n                <Row>\r\n                  <span\r\n                    style={{\r\n                      paddingLeft: '10px',\r\n                      color: '#808080',\r\n                      textTransform: 'lowercase',\r\n                    }}\r\n                  >\r\n                    {url || 'unknown'}\r\n                  </span>\r\n                </Row>\r\n              </Styled.StatusItem>\r\n            </Menu.Item>\r\n          )\r\n        })}\r\n      </Menu>\r\n    ),\r\n    [menuItems],\r\n  )\r\n\r\n  return (\r\n    <Dropdown overlay={menu} trigger={['click']}>\r\n      <IconButton>\r\n        <Styled.DropdownLink className=\"ant-dropdown-link\" href=\"/\">\r\n          <StatusBadge color={globalStatus} />\r\n          <DownOutlined />\r\n        </Styled.DropdownLink>\r\n      </IconButton>\r\n    </Dropdown>\r\n  )\r\n}\r\n","import * as url from 'url'\r\n\r\nexport const getHostnameFromUrl = (u: string): string | null => {\r\n  if (typeof u === 'string') {\r\n    const parsed = url.parse(u, true)\r\n    return parsed?.hostname ?? null\r\n  }\r\n  return null\r\n}\r\n","import { Menu as AntdMenu } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nconst { Item } = AntdMenu\r\n// export const MenuItem = styled<MenuProps & MenuItemProps>(AntdMenu.Item)`\r\nexport const MenuItem = styled(Item)`\r\n  ${({ disabled }) => (disabled ? 'opacity: 0.5' : '')}\r\n  padding: 0 8px !important;\r\n  &:hover {\r\n    background: ${palette('secondary', 1)};\r\n  }\r\n`\r\n\r\nexport const Menu = styled(AntdMenu)`\r\n  background: ${palette('background', 1)};\r\n  color: ${palette('text', 0)};\r\n  border: 1px solid ${palette('gray', 0)};\r\n\r\n  .ant-input-suffix {\r\n    display: flex;\r\n    align-items: center;\r\n    color: ${palette('text', 0)};\r\n  }\r\n\r\n  .ant-menu-item {\r\n    height: auto;\r\n  }\r\n`\r\n","import React, { RefObject, useCallback, useMemo, useRef, useState } from 'react'\r\n\r\nimport { SearchOutlined } from '@ant-design/icons'\r\nimport { MenuProps } from 'antd/lib/menu'\r\n\r\nimport { useClickOutside } from '../../../hooks/useOutsideClick'\r\nimport { Input } from '../Input'\r\nimport { Menu, MenuItem } from './FilterMenu.style'\r\n\r\ntype Props<T> = {\r\n  data: T[]\r\n  placeholder?: string\r\n  searchEnabled?: boolean\r\n  cellRenderer: (data: T) => { key: string; node: JSX.Element }\r\n  disableItemFilter?: (item: T) => boolean\r\n  filterFunction: (item: T, searchTerm: string) => boolean\r\n  onSelect?: (value: string) => void\r\n  closeMenu?: () => void\r\n}\r\n\r\nexport const FilterMenu = <T extends unknown>(props: Props<T>): JSX.Element => {\r\n  const {\r\n    onSelect = () => {},\r\n    searchEnabled = false,\r\n    data,\r\n    filterFunction,\r\n    cellRenderer,\r\n    disableItemFilter = () => false,\r\n    placeholder = 'Search',\r\n    closeMenu,\r\n  } = props\r\n\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n\r\n  const handleClick: MenuProps['onClick'] = useCallback(\r\n    (event) => {\r\n      if (!event || !event.key || event.key === '_search') return\r\n\r\n      setSearchTerm('')\r\n      onSelect(event.key)\r\n    },\r\n    [onSelect],\r\n  )\r\n\r\n  const handleSearchChanged = useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newSearchTerm = event.currentTarget.value\r\n      setSearchTerm(newSearchTerm)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const ref: RefObject<HTMLDivElement> = useRef(null)\r\n\r\n  useClickOutside<HTMLDivElement>(ref, () => closeMenu && closeMenu())\r\n\r\n  const filteredData: T[] = useMemo(\r\n    () =>\r\n      searchTerm === ''\r\n        ? data\r\n        : data.filter((item) => filterFunction(item, searchTerm)),\r\n    [data, filterFunction, searchTerm],\r\n  )\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <Menu onClick={handleClick}>\r\n        {searchEnabled && (\r\n          <Menu.Item disabled key=\"_search\">\r\n            <Input\r\n              value={searchTerm}\r\n              onChange={handleSearchChanged}\r\n              placeholder={placeholder}\r\n              sizevalue=\"big\"\r\n              typevalue=\"ghost\"\r\n              suffix={<SearchOutlined />}\r\n            />\r\n          </Menu.Item>\r\n        )}\r\n        {filteredData.map((item: T) => {\r\n          const { key, node } = cellRenderer(item)\r\n          const disableItem = disableItemFilter(item)\r\n\r\n          return (\r\n            <MenuItem disabled={disableItem} key={key}>\r\n              {node}\r\n            </MenuItem>\r\n          )\r\n        })}\r\n      </Menu>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FilterMenu\r\n","import { useEffect, useRef, RefObject } from 'react'\r\n\r\ntype Callback = (e: MouseEvent) => void\r\n\r\nexport function useClickOutside<T extends Element>(\r\n  ref: RefObject<T>,\r\n  callback: Callback,\r\n  options?: boolean | AddEventListenerOptions,\r\n) {\r\n  const callbackRef = useRef<Callback>()\r\n  callbackRef.current = callback\r\n\r\n  useEffect(() => {\r\n    const clickHandler = (e: MouseEvent) => {\r\n      if (!ref?.current?.contains(e.target as Element) && callbackRef.current) {\r\n        callbackRef?.current(e)\r\n      }\r\n    }\r\n    window.addEventListener('click', clickHandler, options)\r\n    return () => window.removeEventListener('click', clickHandler, options)\r\n  }, [ref, callbackRef, options])\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const ContentViewWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  padding: 4px 0;\r\n  background: ${palette('background', 1)};\r\n`\r\n","import React from 'react'\r\n\r\nimport { ContentViewWrapper } from './ContentView.style'\r\n\r\nexport type Props = {\r\n  children?: React.ReactNode\r\n}\r\n\r\nexport const ContentView = (props: Props) => {\r\n  return <ContentViewWrapper {...props} />\r\n}\r\n","import { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { size, key, palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport const FooterItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nexport const FooterContainer = styled.div`\r\n  background-repeat: no-repeat;\r\n  background-image: ${({ theme }) =>\r\n    `linear-gradient(0deg, ${transparentize(\r\n      0.85,\r\n      '#23DCC8',\r\n    )} 0%, ${transparentize(1, theme.palette.background[0])} 100%)`};\r\n\r\n  padding: 0;\r\n\r\n  ${media.sm`\r\n    padding: 12px 0px;\r\n  `}\r\n`\r\n\r\nexport const StyledFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  padding: 10px 10px;\r\n\r\n  ${media.md`\r\n    padding: 40px 20px;\r\n  `}\r\n\r\n  > ${FooterItem} {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  ${media.md`\r\n    > ${FooterItem} {\r\n      margin-bottom: 0;\r\n    }\r\n    flex-direction: row;\r\n    bottom: 0;\r\n    z-index: 1000;\r\n    height: ${size('footerHeight', '50px')};\r\n    padding: 0 30px;\r\n  `}\r\n\r\n  background-color: transparent;\r\n\r\n  .footer-links-bar {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    a {\r\n      font-size: ${key('sizes.font.normal', '12px')};\r\n      font-weight: bold;\r\n      color: ${palette('text', 1)};\r\n      letter-spacing: 1px;\r\n      cursor: pointer;\r\n      padding-left: 8px;\r\n\r\n      ${media.md`\r\n        padding-left: 50px;\r\n      `};\r\n    }\r\n    a:first-child {\r\n      padding-left: 0;\r\n    }\r\n  }\r\n  .footer-social-bar {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 200px;\r\n\r\n    a {\r\n      font-size: 18px;\r\n      color: ${palette('text', 1)};\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport Icon, {\r\n  TwitterOutlined,\r\n  RedditOutlined,\r\n  MediumOutlined,\r\n  GithubOutlined,\r\n} from '@ant-design/icons'\r\nimport { ExternalButtonLink, ButtonLink } from 'components'\r\n\r\nimport { TelegramIcon } from 'components/Icons'\r\nimport { Logo } from 'components/Logo'\r\n\r\nimport { StyledFooter, FooterContainer, FooterItem } from './Footer.style'\r\n\r\nexport const Footer: React.FC = (): JSX.Element => {\r\n  return (\r\n    <FooterContainer>\r\n      <StyledFooter>\r\n        <FooterItem>\r\n          <a\r\n            href=\"https://thorchain.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <Logo type=\"thorchain\" />\r\n          </a>\r\n        </FooterItem>\r\n        <FooterItem>\r\n          <div className=\"footer-links-bar\">\r\n            <ButtonLink to=\"/stats\">STATS</ButtonLink>\r\n            <ButtonLink to=\"/faqs\">FAQS</ButtonLink>\r\n          </div>\r\n        </FooterItem>\r\n        <FooterItem>\r\n          <div className=\"footer-social-bar\">\r\n            <ExternalButtonLink link=\"https://twitter.com/thorchain_org\">\r\n              <TwitterOutlined />\r\n            </ExternalButtonLink>\r\n            <ExternalButtonLink link=\"https://reddit.com/r/thorchain\">\r\n              <RedditOutlined />\r\n            </ExternalButtonLink>\r\n            <ExternalButtonLink link=\"https://medium.com/thorchain\">\r\n              <MediumOutlined />\r\n            </ExternalButtonLink>\r\n            <ExternalButtonLink link=\"https://t.me/thorchain_org\">\r\n              <Icon component={TelegramIcon} />\r\n            </ExternalButtonLink>\r\n            <ExternalButtonLink link=\"https://github.com/thorchain\">\r\n              <GithubOutlined />\r\n            </ExternalButtonLink>\r\n          </div>\r\n        </FooterItem>\r\n      </StyledFooter>\r\n    </FooterContainer>\r\n  )\r\n}\r\n","import styled from 'styled-components/macro'\r\n\r\nexport const StatusItem = styled.div`\r\n  padding-left: 10px;\r\n`\r\n\r\nexport const DropdownLink = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 50px;\r\n\r\n  svg {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n","import React, { useCallback, useMemo } from 'react'\r\n\r\nimport { DownOutlined } from '@ant-design/icons'\r\nimport { Dropdown } from 'antd'\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport { Menu, Label, IconButton } from '../UIElements'\r\nimport * as Styled from './CurrencySelector.style'\r\n\r\nexport type CurrencySelectorProps = {\r\n  selected: Asset\r\n  currencies: Asset[]\r\n  onSelect?: (asset: Asset) => void\r\n}\r\n\r\nexport const CurrencySelector: React.FC<CurrencySelectorProps> = ({\r\n  selected,\r\n  currencies,\r\n  onSelect = () => {},\r\n}: CurrencySelectorProps): JSX.Element => {\r\n  const handleSelect = useCallback(\r\n    ({ key }) => {\r\n      const asset = Asset.fromAssetString(key) || Asset.USD()\r\n      onSelect(asset)\r\n    },\r\n    [onSelect],\r\n  )\r\n\r\n  const menu = useMemo(\r\n    () => (\r\n      <Menu onClick={handleSelect} selectedKeys={[selected.toString()]}>\r\n        {currencies.map((currencyAsset: Asset) => {\r\n          const { ticker } = currencyAsset\r\n          return <Menu.Item key={currencyAsset.toString()}>{ticker}</Menu.Item>\r\n        })}\r\n      </Menu>\r\n    ),\r\n    [selected, currencies, handleSelect],\r\n  )\r\n\r\n  return (\r\n    <Dropdown overlay={menu} trigger={['click']}>\r\n      <IconButton>\r\n        <Styled.DropdownLink className=\"ant-dropdown-link\" href=\"/\">\r\n          <Label weight=\"bold\">{selected.ticker}</Label>\r\n          <DownOutlined />\r\n        </Styled.DropdownLink>\r\n      </IconButton>\r\n    </Dropdown>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport { Button } from '../UIElements'\r\n\r\nexport const StyledButton = styled(Button)`\r\n  min-width: 30px !important;\r\n  padding: 0;\r\n  margin-left: 10px;\r\n\r\n  svg {\r\n    width: 18px;\r\n    height: 18px;\r\n  }\r\n`\r\n","import React, { useCallback, useState } from 'react'\r\n\r\nimport { SyncOutlined } from '@ant-design/icons'\r\n\r\nimport { StyledButton } from './Refresh.style'\r\n\r\nexport type RefreshProps = {\r\n  onRefresh: () => void\r\n}\r\n\r\nexport const Refresh = ({ onRefresh }: RefreshProps): JSX.Element => {\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const handleRefresh = useCallback(() => {\r\n    setLoading(true)\r\n    onRefresh()\r\n    setTimeout(() => {\r\n      setLoading(false)\r\n    }, 1000)\r\n  }, [onRefresh])\r\n\r\n  return (\r\n    <StyledButton\r\n      onClick={handleRefresh}\r\n      typevalue=\"outline\"\r\n      round\r\n      fixedWidth={false}\r\n    >\r\n      <SyncOutlined spin={loading} />\r\n    </StyledButton>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const IconButton = styled.button`\r\n  position: relative;\r\n  border: none;\r\n  background-color: transparent;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 32px;\r\n  margin-left: 8px;\r\n  padding: 0.15rem 0.25rem;\r\n  border-radius: 0.5rem;\r\n\r\n  outline: none;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n    outline: none;\r\n    background-color: ${palette('background', 2)};\r\n  }\r\n\r\n  svg {\r\n    margin-top: 2px;\r\n  }\r\n  > * {\r\n    stroke: ${palette('text', 0)};\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { Moon, Sun } from 'react-feather'\r\n\r\nimport { ThemeType } from '@thorchain/asgardex-theme'\r\n\r\nimport { useApp } from 'redux/app/hooks'\r\n\r\nimport * as Styled from './ThemeSwitch.style'\r\n\r\nexport const ThemeSwitch = () => {\r\n  const { themeType, setTheme } = useApp()\r\n\r\n  const toggleTheme = React.useCallback(() => {\r\n    if (themeType === ThemeType.DARK) {\r\n      setTheme(ThemeType.LIGHT)\r\n    } else {\r\n      setTheme(ThemeType.DARK)\r\n    }\r\n  }, [setTheme, themeType])\r\n\r\n  return (\r\n    <Styled.IconButton onClick={toggleTheme}>\r\n      {themeType === ThemeType.DARK ? <Moon /> : <Sun />}\r\n    </Styled.IconButton>\r\n  )\r\n}\r\n","import { Drawer as AntDrawer } from 'antd'\r\nimport styled from 'styled-components/macro'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const Drawer = styled(AntDrawer)`\r\n  .ant-drawer-body {\r\n    height: 100%;\r\n    padding: 24px 12px;\r\n    background-color: ${palette('background', 1)};\r\n  }\r\n`\r\n\r\nexport const Refresh = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 4px 8px;\r\n  cursor: pointer;\r\n\r\n  width: 100px;\r\n\r\n  svg {\r\n    font-size: 18px;\r\n    color: ${palette('primary', 0)};\r\n  }\r\n`\r\n","import React, { useCallback } from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\n\r\nimport { SyncOutlined } from '@ant-design/icons'\r\nimport { Asset } from 'multichain-sdk'\r\n\r\nimport { useWallet } from 'redux/wallet/hooks'\r\n\r\nimport { getSendRoute } from 'settings/constants'\r\n\r\nimport { BalanceView } from '../BalanceView'\r\nimport { Label } from '../UIElements/Label'\r\nimport { Drawer } from './WalletDrawer.style'\r\nimport * as Styled from './WalletDrawer.style'\r\n\r\nexport type WalletDrawerProps = {\r\n  visible: boolean\r\n  onClose?: () => void\r\n}\r\n\r\nexport const WalletDrawer = (props: WalletDrawerProps) => {\r\n  const { visible, onClose = () => {} } = props\r\n\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n\r\n  const { loadWallet, walletLoading, wallet } = useWallet()\r\n\r\n  const handleRefresh = useCallback(() => {\r\n    dispatch(loadWallet())\r\n  }, [loadWallet, dispatch])\r\n\r\n  const handleSendAsset = useCallback(\r\n    (asset: Asset) => {\r\n      history.push(getSendRoute(asset))\r\n    },\r\n    [history],\r\n  )\r\n\r\n  return (\r\n    <Drawer\r\n      visible={visible}\r\n      onClose={onClose}\r\n      placement=\"right\"\r\n      closable={false}\r\n      width={350}\r\n    >\r\n      <Styled.Refresh onClick={handleRefresh}>\r\n        <Label size=\"big\" color=\"primary\">\r\n          Refresh\r\n        </Label>\r\n        <SyncOutlined spin={walletLoading} />\r\n      </Styled.Refresh>\r\n      {!wallet && <Label>Please connect wallet.</Label>}\r\n      {wallet && <BalanceView wallet={wallet} onSendAsset={handleSendAsset} />}\r\n    </Drawer>\r\n  )\r\n}\r\n","import styled from 'styled-components/macro'\r\n\r\nimport { Button } from 'components/UIElements'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  flex: 1;\r\n`\r\n\r\nexport const ChainContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 4px 0;\r\n`\r\n\r\nexport const BalanceRow = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  padding: 8px 8px;\r\n`\r\n\r\nexport const SendBtn = styled(Button)``\r\n","import React from 'react'\r\n\r\nimport {\r\n  Wallet,\r\n  SupportedChain,\r\n  AssetAmount,\r\n  Asset,\r\n  getTotalUSDPriceInBalance,\r\n  formatBigNumber,\r\n} from 'multichain-sdk'\r\n\r\nimport { AssetData } from 'components/Assets'\r\nimport { ChainHeader } from 'components/ChainHeader'\r\n\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport * as Styled from './BalanceView.style'\r\n\r\nexport type BalanceViewProps = {\r\n  wallet: Wallet\r\n  onSendAsset?: (asset: Asset) => void\r\n}\r\n\r\nexport const BalanceView = (props: BalanceViewProps) => {\r\n  const { wallet, onSendAsset = () => {} } = props\r\n  const { pools } = useMidgard()\r\n\r\n  const renderBalance = (balance: AssetAmount[]) => {\r\n    return balance.map((data: AssetAmount, index) => (\r\n      <Styled.BalanceRow key={index}>\r\n        <AssetData asset={data.asset} amount={data.amount} decimal={3} />\r\n        <Styled.SendBtn\r\n          onClick={() => onSendAsset(data.asset)}\r\n          fixedWidth={false}\r\n        >\r\n          Send\r\n        </Styled.SendBtn>\r\n      </Styled.BalanceRow>\r\n    ))\r\n  }\r\n\r\n  const renderChainBalance = (chain: SupportedChain, chainBalance: Wallet) => {\r\n    const { address, balance } = chainBalance\r\n    const usdPrice = getTotalUSDPriceInBalance(balance, pools)\r\n    const totalPrice = formatBigNumber(usdPrice, 2)\r\n\r\n    return (\r\n      <Styled.ChainContainer>\r\n        <ChainHeader chain={chain} address={address} totalPrice={totalPrice} />\r\n        {renderBalance(balance)}\r\n      </Styled.ChainContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Styled.Container>{renderChainBalance('BNB', wallet)}</Styled.Container>\r\n  )\r\n}\r\n","import styled from 'styled-components/macro'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Label } from 'components/UIElements'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex: 1;\r\n\r\n  height: 50px;\r\n  padding: 4px 8px;\r\n\r\n  background: ${palette('background', 3)};\r\n\r\n  svg {\r\n    font-size: 14px;\r\n    color: ${palette('text', 0)};\r\n\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const ChainInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nexport const InfoLabel = styled(Label)``\r\n\r\nexport const Address = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nexport const AddressLabel = styled(Label)`\r\n  margin-right: 4px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: ${palette('gray', 1)};\r\n  }\r\n`\r\n\r\nexport const Tools = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nexport const ToolWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 4px;\r\n\r\n  cursor: ponter;\r\n\r\n  svg {\r\n    width: 16px;\r\n  }\r\n`\r\n","import React, { useCallback, useMemo } from 'react'\r\n\r\nimport { ExternalLink } from 'react-feather'\r\n\r\nimport { CopyOutlined } from '@ant-design/icons'\r\nimport { chainToString, Chain } from '@xchainjs/xchain-util'\r\nimport copy from 'copy-to-clipboard'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nimport * as Styled from './ChainHeader.style'\r\n\r\nexport type ChainHeaderProps = {\r\n  chain: Chain\r\n  address: string\r\n  totalPrice?: string\r\n  onReload?: () => void\r\n}\r\n\r\nexport const ChainHeader = (props: ChainHeaderProps) => {\r\n  const { chain, address, totalPrice = '0' } = props\r\n\r\n  const miniAddress = useMemo(\r\n    () => `${address.slice(0, 3)}...${address.slice(-3)}`,\r\n    [address],\r\n  )\r\n\r\n  const accountUrl = useMemo(\r\n    () => multichain.getExplorerAddressUrl(chain, address),\r\n    [chain, address],\r\n  )\r\n\r\n  const handleCopyAddress = useCallback(() => {\r\n    copy(address)\r\n  }, [address])\r\n\r\n  return (\r\n    <Styled.Container>\r\n      <Styled.ChainInfo>\r\n        <Styled.InfoLabel weight=\"bold\">\r\n          {chainToString(chain)}\r\n        </Styled.InfoLabel>\r\n        <Styled.InfoLabel weight=\"bold\">\r\n          Total: ${totalPrice} USD\r\n        </Styled.InfoLabel>\r\n      </Styled.ChainInfo>\r\n      <Styled.Address onClick={handleCopyAddress}>\r\n        <Styled.AddressLabel weight=\"bold\">{miniAddress}</Styled.AddressLabel>\r\n        <CopyOutlined />\r\n      </Styled.Address>\r\n      <Styled.Tools>\r\n        <a href={accountUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <Styled.ToolWrapper>\r\n            <ExternalLink />\r\n          </Styled.ToolWrapper>\r\n        </a>\r\n      </Styled.Tools>\r\n    </Styled.Container>\r\n  )\r\n}\r\n","import { Slider } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const SliderWrapper = styled(Slider)`\r\n  &.ant-slider {\r\n    margin-left: 0px;\r\n    margin-right: 0px;\r\n    margin-bottom: 10px;\r\n\r\n    .ant-slider-rail {\r\n      height: 4px;\r\n      background: ${palette('gray', 1)};\r\n    }\r\n\r\n    .ant-slider-track {\r\n      background: ${palette('gradient', 0)};\r\n    }\r\n\r\n    .ant-slider-handle {\r\n      width: 14px;\r\n      height: 14px;\r\n      border: 3px solid ${palette('success', 0)};\r\n      background: ${palette('background', 1)};\r\n    }\r\n\r\n    .ant-slider-dot {\r\n      display: none;\r\n    }\r\n\r\n    &:hover {\r\n      .ant-slider-track {\r\n        background: ${palette('primary', 0)};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const SliderLabel = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  color: ${palette('text', 0)};\r\n`\r\n","import React, { useRef } from 'react'\r\n\r\nimport { SliderSingleProps } from 'antd/lib/slider'\r\n\r\nimport { SliderWrapper, SliderLabel } from './Slider.style'\r\n\r\nexport type Props = SliderSingleProps & {\r\n  withLabel?: boolean\r\n}\r\n\r\nexport const Slider = (props: Props) => {\r\n  const { withLabel = false, ...otherProps } = props\r\n\r\n  const sliderRef = useRef<HTMLElement>(null)\r\n\r\n  const handleAfterChange = () => {\r\n    if (sliderRef.current) {\r\n      sliderRef.current.blur()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SliderWrapper\r\n        onAfterChange={handleAfterChange}\r\n        ref={sliderRef}\r\n        {...otherProps}\r\n      />\r\n      {withLabel && (\r\n        <SliderLabel>\r\n          <span>0%</span>\r\n          <span>100%</span>\r\n        </SliderLabel>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Table } from 'antd'\r\nimport { TableProps } from 'antd/lib/table'\r\nimport { darken, transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { key, palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport declare type SizeType = 'small' | 'middle' | 'large' | undefined\r\n\r\ntype Props = {\r\n  sizeValue: SizeType\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n} & TableProps<any>\r\n\r\nexport const TableWrapper = styled(Table)<Props>`\r\n  border: 1px solid ${palette('gray', 0)};\r\n  background: transparent;\r\n\r\n  .ant-table,\r\n  .ant-table-container,\r\n  .ant-table-content,\r\n  .ant-table-thead,\r\n  .ant-table-tbody {\r\n    background: transparent;\r\n    & > tr {\r\n      background: transparent;\r\n    }\r\n  }\r\n\r\n  .ant-table-thead > tr > th {\r\n    height: ${(props: Props) =>\r\n      props.sizeValue === 'small' ? '52px' : '70px'};\r\n\r\n    border-top: none;\r\n    border-radius: none;\r\n    border-color: ${palette('gray', 0)};\r\n    font-size: ${key('sizes.font.normal', '12px')};\r\n    color: ${palette('text', 2)};\r\n    background: ${(props) =>\r\n      transparentize(0.1, props.theme.palette.background[1])};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    &:hover {\r\n      background-color: ${(props) =>\r\n        darken(0.05, props.theme.palette.background[2])} !important;\r\n    }\r\n\r\n    .ant-table-column-title {\r\n      padding-top: 6px;\r\n    }\r\n  }\r\n\r\n  .ant-table-placeholder {\r\n    background: ${(props) =>\r\n      transparentize(0.1, props.theme.palette.background[1])};\r\n    border-color: ${palette('gray', 0)};\r\n    td {\r\n      &:hover {\r\n        background: ${(props) =>\r\n          transparentize(0.1, props.theme.palette.background[1])};\r\n      }\r\n    }\r\n\r\n    .ant-empty-normal {\r\n      color: ${palette('text', 2)};\r\n      .ant-empty-image svg {\r\n        color: ${palette('text', 2)};\r\n        path {\r\n          fill: ${palette('background', 1)};\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .ant-table-tbody > tr > td {\r\n    height: ${(props) => (props.sizeValue === 'small' ? '48px' : '64px')};\r\n    border-color: ${palette('gray', 0)};\r\n    color: ${palette('text', 0)};\r\n    background: ${(props) =>\r\n      transparentize(0.1, props.theme.palette.background[1])};\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n  }\r\n\r\n  .ant-table-thead\r\n    > tr.ant-table-row-hover:not(.ant-table-expanded-row):not(.ant-table-row-selected)\r\n    > td,\r\n  .ant-table-tbody\r\n    > tr.ant-table-row-hover:not(.ant-table-expanded-row):not(.ant-table-row-selected)\r\n    > td,\r\n  .ant-table-thead\r\n    > tr:hover:not(.ant-table-expanded-row):not(.ant-table-row-selected)\r\n    > td,\r\n  .ant-table-tbody\r\n    > tr:hover:not(.ant-table-expanded-row):not(.ant-table-row-selected)\r\n    > td {\r\n    background-color: ${(props) =>\r\n      darken(0.05, props.theme.palette.background[2])} !important;\r\n  }\r\n\r\n  .ant-table-cell {\r\n    padding-top: 4px;\r\n    padding-right: 2px;\r\n    padding-left: 2px;\r\n    padding-bottom: 2px;\r\n    ${media.lg`\r\n      padding-top: 8px;\r\n      padding-right: 4px;\r\n      padding-left: 4px;\r\n      padding-bottom: 8px;\r\n    `}\r\n\r\n    &:first-child {\r\n      padding-left: 12px;\r\n    }\r\n    &:last-child {\r\n      padding-right: 12px;\r\n    }\r\n\r\n    padding-top: ${(props) => props.sizeValue === 'small' && '0px'} !important;\r\n    padding-bottom: ${(props) =>\r\n      props.sizeValue === 'small' && '0px'} !important;\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { TableProps } from 'antd/lib/table'\r\n\r\nimport { TableWrapper } from './Table.style'\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type Props = TableProps<any>\r\n\r\nexport const Table = (props: Props) => {\r\n  const { size, ...others } = props\r\n\r\n  return <TableWrapper pagination={false} sizeValue={size} {...others} />\r\n}\r\n","import styled from 'styled-components/macro'\r\n\r\nimport { ContentView } from 'components/ContentView'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport const Panel = styled(ContentView)`\r\n  width: calc(100vw - 20px);\r\n  ${media.sm`\r\n    width: 420px;\r\n  `};\r\n`\r\n","import React from 'react'\r\n\r\nimport { Button, ButtonProps } from '../Button'\r\n\r\ntype ComponentProps = {\r\n  connected?: boolean\r\n}\r\n\r\nexport type Props = ComponentProps & ButtonProps\r\n\r\nexport const WalletButton: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const { connected = '', ...otherProps } = props\r\n\r\n  const getBtnValue = () => {\r\n    if (!connected) {\r\n      return (\r\n        <span style={{ display: 'flex', alignItems: 'center' }}>Connect</span>\r\n      )\r\n    }\r\n\r\n    if (connected) {\r\n      return 'View Wallet'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      sizevalue=\"normal\"\r\n      color={connected ? 'primary' : 'warning'}\r\n      round\r\n      fixedWidth={false}\r\n      {...otherProps}\r\n    >\r\n      {getBtnValue()}\r\n    </Button>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Spin } from 'antd'\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nexport const ChartLoader: React.FC = (): JSX.Element => (\r\n  <LoaderWrapper>\r\n    <Spin />\r\n  </LoaderWrapper>\r\n)\r\n","export * from './client'\r\nexport * from './types'\r\nexport { getDerivePath, getDefaultFees, getPrefix } from './util'\r\n","export * from './AddWallet'\r\nexport * from './Button'\r\nexport * from './Collapse'\r\nexport * from './ContentTitle'\r\nexport * from './Description'\r\nexport * from './Drag'\r\nexport * from './FilterMenu'\r\nexport * from './Input'\r\nexport * from './InputAmount'\r\nexport * from './InputNumber'\r\nexport * from './Label'\r\nexport * from './Menu'\r\nexport * from './Modal'\r\nexport * from './Notification'\r\nexport * from './Slider'\r\nexport * from './StatusBadge'\r\nexport * from './StepBar'\r\nexport * from './Table'\r\nexport * from './Tabs'\r\nexport * from './TxProgress'\r\nexport * from './TxTimer'\r\nexport * from './WalletButton'\r\nexport * from './Information'\r\nexport * from './StatsCard'\r\nexport * from './IconButton'\r\nexport * from './CoreButton'\r\nexport * from './Tooltip'\r\nexport * from './FancyButton'\r\nexport * from './Overlay'\r\n","import BigNumber from 'bignumber.js'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { MULTICHAIN_DECIMAL } from '../constants'\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nexport enum AmountType {\r\n  BASE_AMOUNT,\r\n  ASSET_AMOUNT,\r\n}\r\n\r\nconst roundingMode = {\r\n  [Rounding.ROUND_DOWN]: BigNumber.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: BigNumber.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: BigNumber.ROUND_UP,\r\n}\r\n\r\nexport const EMPTY_FORMAT: BigNumber.Format = { groupSeparator: '' }\r\nexport const NUMBER_FORMAT: BigNumber.Format = {\r\n  prefix: '',\r\n  decimalSeparator: '.',\r\n  groupSeparator: ',',\r\n  groupSize: 3,\r\n  secondaryGroupSize: 0,\r\n  fractionGroupSeparator: ' ',\r\n  fractionGroupSize: 0,\r\n  suffix: '',\r\n}\r\n\r\nexport interface IAmount {\r\n  readonly baseAmount: BigNumber\r\n  readonly assetAmount: BigNumber\r\n  readonly decimal: number\r\n\r\n  _0_AMOUNT: Amount\r\n\r\n  add(amount: Amount): Amount\r\n  sub(amount: Amount): Amount\r\n  times(value: Amount): Amount\r\n  mul(value: BigNumber.Value | Amount): Amount\r\n  div(value: BigNumber.Value | Amount): Amount\r\n  gte(amount: Amount): boolean\r\n  gt(amount: Amount): boolean\r\n  lte(amount: Amount): boolean\r\n  lt(amount: Amount): boolean\r\n  eq(amount: Amount): boolean\r\n  toSignificant(\r\n    significantDigits?: number,\r\n    format?: BigNumber.Format,\r\n    rounding?: Rounding,\r\n  ): string\r\n  toFixed(\r\n    decimalPlaces?: number,\r\n    format?: BigNumber.Format,\r\n    rounding?: Rounding,\r\n  ): string\r\n  toFixedDecimal(\r\n    decimalPlaces?: number,\r\n    format?: BigNumber.Format,\r\n    rounding?: Rounding,\r\n  ): string\r\n}\r\n\r\nexport class Amount implements IAmount {\r\n  public readonly assetAmount: BigNumber\r\n\r\n  public readonly baseAmount: BigNumber\r\n\r\n  public readonly decimal: number\r\n\r\n  public static fromMidgard(amount?: BigNumber.Value): Amount {\r\n    return new Amount(amount || 0, AmountType.BASE_AMOUNT, MULTICHAIN_DECIMAL)\r\n  }\r\n\r\n  public static fromBaseAmount(\r\n    amount: BigNumber.Value,\r\n    decimal: number,\r\n  ): Amount {\r\n    return new Amount(amount, AmountType.BASE_AMOUNT, decimal)\r\n  }\r\n\r\n  public static fromAssetAmount(\r\n    amount: BigNumber.Value,\r\n    decimal: number,\r\n  ): Amount {\r\n    return new Amount(amount, AmountType.ASSET_AMOUNT, decimal)\r\n  }\r\n\r\n  public static fromNormalAmount(amount?: BigNumber.Value): Amount {\r\n    return new Amount(amount || 0, AmountType.ASSET_AMOUNT, 1)\r\n  }\r\n\r\n  public static sorter(a: Amount, b: Amount): number {\r\n    invariant(a.decimal === b.decimal, 'Decimal must be same')\r\n\r\n    return a.assetAmount.minus(b.assetAmount).toNumber()\r\n  }\r\n\r\n  constructor(\r\n    amount: BigNumber.Value,\r\n    type: AmountType = AmountType.BASE_AMOUNT,\r\n    decimal: number,\r\n  ) {\r\n    this.decimal = decimal\r\n    const decimalAmount = 10 ** decimal\r\n    if (type === AmountType.BASE_AMOUNT) {\r\n      this.baseAmount = new BigNumber(amount)\r\n      this.assetAmount = this.baseAmount.dividedBy(decimalAmount)\r\n    } else {\r\n      this.assetAmount = new BigNumber(amount)\r\n      this.baseAmount = this.assetAmount.multipliedBy(decimalAmount)\r\n    }\r\n  }\r\n\r\n  get _0_AMOUNT() {\r\n    return new Amount(0, AmountType.ASSET_AMOUNT, this.decimal)\r\n  }\r\n\r\n  add(amount: Amount): Amount {\r\n    return new Amount(\r\n      this.assetAmount.plus(amount.assetAmount),\r\n      AmountType.ASSET_AMOUNT,\r\n      this.decimal,\r\n    )\r\n  }\r\n\r\n  sub(amount: Amount): Amount {\r\n    return new Amount(\r\n      this.assetAmount.minus(amount.assetAmount),\r\n      AmountType.ASSET_AMOUNT,\r\n      this.decimal,\r\n    )\r\n  }\r\n\r\n  times(value: Amount): Amount {\r\n    return new Amount(\r\n      this.baseAmount.multipliedBy(value.baseAmount),\r\n      AmountType.BASE_AMOUNT,\r\n      this.decimal,\r\n    )\r\n  }\r\n\r\n  mul(value: BigNumber.Value | Amount): Amount {\r\n    if (value instanceof Amount) {\r\n      return new Amount(\r\n        this.assetAmount.multipliedBy(value.assetAmount),\r\n        AmountType.ASSET_AMOUNT,\r\n        this.decimal,\r\n      )\r\n    }\r\n    return new Amount(\r\n      this.assetAmount.multipliedBy(value),\r\n      AmountType.ASSET_AMOUNT,\r\n      this.decimal,\r\n    )\r\n  }\r\n\r\n  div(value: BigNumber.Value | Amount): Amount {\r\n    if (value instanceof Amount) {\r\n      return new Amount(\r\n        this.assetAmount.dividedBy(value.assetAmount),\r\n        AmountType.ASSET_AMOUNT,\r\n        this.decimal,\r\n      )\r\n    }\r\n    return new Amount(\r\n      this.assetAmount.dividedBy(value),\r\n      AmountType.ASSET_AMOUNT,\r\n      this.decimal,\r\n    )\r\n  }\r\n\r\n  gte(amount: Amount): boolean {\r\n    return this.assetAmount.isGreaterThanOrEqualTo(amount.assetAmount)\r\n  }\r\n\r\n  gt(amount: Amount): boolean {\r\n    return this.assetAmount.isGreaterThan(amount.assetAmount)\r\n  }\r\n\r\n  lte(amount: Amount): boolean {\r\n    return this.assetAmount.isLessThanOrEqualTo(amount.assetAmount)\r\n  }\r\n\r\n  lt(amount: Amount): boolean {\r\n    return this.assetAmount.isLessThan(amount.assetAmount)\r\n  }\r\n\r\n  eq(amount: Amount): boolean {\r\n    return this.assetAmount.isEqualTo(amount.assetAmount)\r\n  }\r\n\r\n  toSignificant(\r\n    significantDigits = 8,\r\n    format: BigNumber.Format = NUMBER_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    invariant(\r\n      Number.isInteger(significantDigits),\r\n      `${significantDigits} is not an integer.`,\r\n    )\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    BigNumber.config({ FORMAT: format })\r\n\r\n    const significant = new BigNumber(\r\n      this.assetAmount.toPrecision(significantDigits, roundingMode[rounding]),\r\n    )\r\n\r\n    return significant.toFormat()\r\n  }\r\n\r\n  toFixedDecimal(\r\n    decimalPlaces = 8,\r\n    format: BigNumber.Format = EMPTY_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    invariant(\r\n      Number.isInteger(decimalPlaces),\r\n      `${decimalPlaces} is not an integer.`,\r\n    )\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is not positive.`)\r\n\r\n    BigNumber.config({ FORMAT: format })\r\n    const fixed = new BigNumber(\r\n      this.assetAmount.toFixed(decimalPlaces, roundingMode[rounding]),\r\n    )\r\n\r\n    return fixed.toFormat()\r\n  }\r\n\r\n  toFixed(\r\n    decimalPlaces = 8,\r\n    format: BigNumber.Format = NUMBER_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return this.toFixedDecimal(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n\r\nexport const formatBigNumber = (\r\n  bn: BigNumber,\r\n  decimalPlaces = 8,\r\n  rounding: Rounding = Rounding.ROUND_DOWN,\r\n): string => {\r\n  BigNumber.config({ FORMAT: NUMBER_FORMAT })\r\n  const fixed = new BigNumber(bn.toFixed(decimalPlaces, roundingMode[rounding]))\r\n\r\n  return fixed.toFormat()\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { DEFAULT_SLIP_LIMIT, MULTICHAIN_DECIMAL } from '../constants'\r\nimport { AmountType, Amount } from './amount'\r\nimport { Asset } from './asset'\r\nimport { AssetAmount } from './assetAmount'\r\nimport { Percent } from './percent'\r\nimport { Pool } from './pool'\r\nimport { Price } from './price'\r\n\r\nexport enum SwapType {\r\n  SINGLE_SWAP,\r\n  DOUBLE_SWAP,\r\n}\r\n\r\nexport enum QuoteType {\r\n  EXACT_IN,\r\n  EXACT_OUT,\r\n}\r\n\r\nexport interface ISwap {\r\n  readonly swapType: SwapType\r\n  readonly quoteType: QuoteType\r\n\r\n  readonly inputAsset: Asset\r\n  readonly outputAsset: Asset\r\n  readonly price: Price // input asset price based in output asset\r\n\r\n  // swapPools[0]: first swap pool, swapPools[1]: second swap pool(for Double Swap Only)\r\n  readonly swapPools: Pool[]\r\n\r\n  readonly inputAmount: AssetAmount\r\n  readonly outputAmount: AssetAmount\r\n  readonly outputAmountAfterFee: AssetAmount\r\n  readonly fee: AssetAmount\r\n  readonly outputPercent: Percent\r\n  readonly feePercent: Percent\r\n  readonly slip: Percent\r\n\r\n  readonly hasInSufficientFee: boolean\r\n  readonly estimatedNetworkFee: AssetAmount\r\n\r\n  minOutputAmount: Amount\r\n  slipLimitPercent: number\r\n\r\n  setSlipLimitPercent(limit: number): void\r\n  getSlipLimitPercent(): number\r\n\r\n  getOutputAmount(inputAmount: AssetAmount): AssetAmount\r\n  getOutputAfterNetworkFee(inputAmount: AssetAmount): AssetAmount\r\n  getOutputPercent(inputAmount: AssetAmount): Percent\r\n  getFeePercent(inputAmount: AssetAmount): Percent\r\n  getInputAmount(outputAmount: AssetAmount): AssetAmount\r\n  getSlip(inputAmount: AssetAmount): Percent\r\n  getFee(inputAmount: AssetAmount): AssetAmount\r\n}\r\n\r\nexport class Swap implements ISwap {\r\n  public slipLimitPercent: number\r\n\r\n  public readonly swapType: SwapType\r\n\r\n  public readonly inputAsset: Asset\r\n\r\n  public readonly outputAsset: Asset\r\n\r\n  public readonly price: Price // input asset price based in output asset\r\n\r\n  // swapPools[0]: first swap pool, swapPools[1]: second swap pool(for Double Swap Only)\r\n  public readonly swapPools: Pool[] = []\r\n\r\n  public readonly quoteType: QuoteType\r\n\r\n  public readonly inputAmount: AssetAmount\r\n\r\n  public readonly outputAmount: AssetAmount\r\n\r\n  public readonly outputAmountAfterFee: AssetAmount\r\n\r\n  public readonly fee: AssetAmount\r\n\r\n  public readonly outputPercent: Percent\r\n\r\n  public readonly feePercent: Percent\r\n\r\n  public readonly slip: Percent\r\n\r\n  public readonly estimatedNetworkFee: AssetAmount\r\n\r\n  public readonly hasInSufficientFee: boolean = false\r\n\r\n  private _0_AMOUNT: Amount\r\n\r\n  constructor(\r\n    inputAsset: Asset,\r\n    outputAsset: Asset,\r\n    pools: Pool[],\r\n    amount: AssetAmount,\r\n    slip = DEFAULT_SLIP_LIMIT,\r\n  ) {\r\n    this.inputAsset = inputAsset\r\n    this.outputAsset = outputAsset\r\n    this.slipLimitPercent = slip\r\n\r\n    // input asset price based in output asset\r\n    this.price = new Price({\r\n      baseAsset: this.outputAsset,\r\n      quoteAsset: this.inputAsset,\r\n      pools,\r\n    })\r\n\r\n    this._0_AMOUNT = Amount.fromAssetAmount(0, inputAsset.decimal)\r\n\r\n    invariant(\r\n      !this.inputAsset.isRUNE() || !this.outputAsset.isRUNE(),\r\n      'Invalid pair',\r\n    )\r\n\r\n    invariant(amount.gte(this._0_AMOUNT), 'Invalid Negative Amount')\r\n\r\n    // set swap type and pools\r\n    if (!this.inputAsset.isRUNE() && !this.outputAsset.isRUNE()) {\r\n      this.swapType = SwapType.DOUBLE_SWAP\r\n\r\n      const firstSwapPool = Pool.byAsset(this.inputAsset, pools)\r\n      const secondSwapPool = Pool.byAsset(this.outputAsset, pools)\r\n\r\n      invariant(firstSwapPool && secondSwapPool, 'Invalid Pool')\r\n      if (firstSwapPool && secondSwapPool) {\r\n        this.swapPools = [firstSwapPool, secondSwapPool]\r\n      }\r\n    } else {\r\n      this.swapType = SwapType.SINGLE_SWAP\r\n\r\n      if (!this.inputAsset.isRUNE()) {\r\n        const firstSwapPool = Pool.byAsset(this.inputAsset, pools)\r\n        invariant(firstSwapPool, 'Invalid Pool')\r\n        if (firstSwapPool) {\r\n          this.swapPools = [firstSwapPool]\r\n        }\r\n      }\r\n\r\n      if (!this.outputAsset.isRUNE()) {\r\n        const firstSwapPool = Pool.byAsset(this.outputAsset, pools)\r\n        invariant(firstSwapPool, 'Invalid Pool')\r\n        if (firstSwapPool) {\r\n          this.swapPools = [firstSwapPool]\r\n        }\r\n      }\r\n    }\r\n\r\n    // get estimated network fee\r\n    const lastPool =\r\n      this.swapType === SwapType.SINGLE_SWAP\r\n        ? this.swapPools[0]\r\n        : this.swapPools[1]\r\n    this.estimatedNetworkFee = this.getNetworkFee(\r\n      lastPool,\r\n      this.outputAsset.isRUNE(),\r\n    )\r\n\r\n    // set input, output, slip, fee, percent\r\n    if (amount.asset === this.inputAsset) {\r\n      this.quoteType = QuoteType.EXACT_IN\r\n      this.inputAmount = amount\r\n      this.outputAmount = this.getOutputAmount(amount)\r\n      this.outputAmountAfterFee = this.getOutputAfterNetworkFee(amount)\r\n\r\n      // validate\r\n      if (this.outputAmountAfterFee.lt(this._0_AMOUNT)) {\r\n        this.hasInSufficientFee = true\r\n        this.outputAmount = new AssetAmount(this.outputAsset, this._0_AMOUNT)\r\n      }\r\n    } else {\r\n      this.quoteType = QuoteType.EXACT_OUT\r\n      this.outputAmountAfterFee = amount\r\n      this.outputAmount = amount.add(this.estimatedNetworkFee)\r\n      this.inputAmount = this.getInputAmount(amount)\r\n\r\n      // validate\r\n      if (this.inputAmount.lt(this._0_AMOUNT)) {\r\n        this.hasInSufficientFee = true\r\n        this.inputAmount = new AssetAmount(this.inputAsset, this._0_AMOUNT)\r\n      }\r\n    }\r\n\r\n    this.fee = this.getFee(this.inputAmount)\r\n    this.outputPercent = this.getOutputPercent(this.inputAmount)\r\n    this.feePercent = this.getFeePercent(this.inputAmount)\r\n    this.slip = this.getSlip(this.inputAmount)\r\n  }\r\n\r\n  setSlipLimitPercent(limit: number): void {\r\n    this.slipLimitPercent = limit\r\n  }\r\n\r\n  getSlipLimitPercent(): number {\r\n    return this.slipLimitPercent\r\n  }\r\n\r\n  public get minOutputAmount(): Amount {\r\n    return this.outputAmount.mul(100 - this.slipLimitPercent).div(100).amount\r\n  }\r\n\r\n  isSlipValid(): boolean {\r\n    if (this.slip.gt(new Percent(this.slipLimitPercent / 100))) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  isValid(): boolean {\r\n    // check input amount\r\n    if (\r\n      this.inputAmount.lte(Amount.fromAssetAmount(0, this.inputAmount.decimal))\r\n    )\r\n      return false\r\n\r\n    // check slip amount\r\n    if (!this.isSlipValid()) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  public static getSingleSwapOutput(\r\n    inputAmount: AssetAmount,\r\n    pool: Pool,\r\n  ): AssetAmount {\r\n    // formula: (x * X * Y) / (x + X) ^ 2\r\n    const toRUNE = !inputAmount.asset.isRUNE()\r\n    const outputAsset = toRUNE ? Asset.RUNE() : pool.asset\r\n\r\n    const x = inputAmount.amount\r\n    const X = toRUNE ? pool.assetDepth : pool.runeDepth\r\n    const Y = toRUNE ? pool.runeDepth : pool.assetDepth\r\n    const numerator = x.mul(X).mul(Y)\r\n    const denominator = new Amount(\r\n      x.add(X).assetAmount.pow(2),\r\n      AmountType.ASSET_AMOUNT,\r\n      MULTICHAIN_DECIMAL,\r\n    )\r\n\r\n    return new AssetAmount(outputAsset, numerator.div(denominator))\r\n  }\r\n\r\n  getOutputAmount(inputAmount: AssetAmount): AssetAmount {\r\n    invariant(inputAmount.asset === this.inputAsset, 'Invalid Asset')\r\n\r\n    if (this.swapType === SwapType.SINGLE_SWAP) {\r\n      return Swap.getSingleSwapOutput(inputAmount, this.swapPools[0])\r\n    }\r\n\r\n    invariant(!inputAmount.asset.isRUNE(), 'Invalid Asset')\r\n\r\n    // double swap formula: getSwapOutput(getSwapOutput(x, X), Y)\r\n    const firstSwapOutput = Swap.getSingleSwapOutput(\r\n      inputAmount,\r\n      this.swapPools[0],\r\n    )\r\n\r\n    return Swap.getSingleSwapOutput(firstSwapOutput, this.swapPools[1])\r\n  }\r\n\r\n  private getSingleSwapOutputAfterNetworkFee(\r\n    inputAmount: AssetAmount,\r\n    pool: Pool,\r\n  ): AssetAmount {\r\n    // formula: getSwapOutput() - network fee (1 RUNE)\r\n    const toRUNE = !inputAmount.asset.isRUNE()\r\n    const swapOutputAmount = Swap.getSingleSwapOutput(inputAmount, pool)\r\n    const runeDepthAfterSwap = toRUNE\r\n      ? pool.runeDepth.sub(swapOutputAmount)\r\n      : pool.runeDepth.add(inputAmount)\r\n    const assetDepthAfterSwap = toRUNE\r\n      ? pool.assetDepth.add(inputAmount)\r\n      : pool.assetDepth.sub(swapOutputAmount)\r\n    const poolAfterSwap = new Pool(\r\n      pool.asset,\r\n      runeDepthAfterSwap,\r\n      assetDepthAfterSwap,\r\n      pool.detail,\r\n    )\r\n\r\n    const networkFee = this.getNetworkFee(poolAfterSwap, toRUNE)\r\n    const outputAsset = toRUNE ? Asset.RUNE() : pool.asset\r\n\r\n    return new AssetAmount(\r\n      this.outputAsset,\r\n      swapOutputAmount.sub(new AssetAmount(outputAsset, networkFee)),\r\n    )\r\n  }\r\n\r\n  private getNetworkFee(pool: Pool, toRUNE: boolean): AssetAmount {\r\n    // network fee is 1 RUNE\r\n    const networkFeeInRune = Amount.fromAssetAmount(1, MULTICHAIN_DECIMAL)\r\n\r\n    const feeAmount: Amount = toRUNE\r\n      ? networkFeeInRune\r\n      : networkFeeInRune.mul(pool.priceOf(Asset.RUNE()))\r\n\r\n    return new AssetAmount(this.outputAsset, feeAmount)\r\n  }\r\n\r\n  getOutputAfterNetworkFee(inputAmount: AssetAmount): AssetAmount {\r\n    invariant(inputAmount.asset === this.inputAsset, 'Invalid Asset')\r\n\r\n    if (this.swapType === SwapType.SINGLE_SWAP) {\r\n      return this.getSingleSwapOutputAfterNetworkFee(\r\n        inputAmount,\r\n        this.swapPools[0],\r\n      )\r\n    }\r\n\r\n    invariant(!inputAmount.asset.isRUNE(), 'Invalid Asset')\r\n\r\n    // double swap formula: getDoubleSwapOutput - 1 RUNE\r\n    const toRUNE = !inputAmount.asset.isRUNE()\r\n    const doubleSwapOutput = this.getOutputAmount(inputAmount)\r\n    const pool = this.swapPools[1]\r\n\r\n    const runeDepthAfterSwap = toRUNE\r\n      ? pool.runeDepth.sub(doubleSwapOutput)\r\n      : pool.runeDepth.add(inputAmount)\r\n    const assetDepthAfterSwap = toRUNE\r\n      ? pool.assetDepth.add(inputAmount)\r\n      : pool.assetDepth.sub(doubleSwapOutput)\r\n    const poolAfterSwap = new Pool(\r\n      pool.asset,\r\n      runeDepthAfterSwap,\r\n      assetDepthAfterSwap,\r\n      pool.detail,\r\n    )\r\n\r\n    const networkFee = this.getNetworkFee(\r\n      poolAfterSwap,\r\n      this.outputAsset.isRUNE(),\r\n    )\r\n\r\n    return new AssetAmount(\r\n      this.outputAsset,\r\n      doubleSwapOutput.sub(new AssetAmount(this.outputAsset, networkFee)),\r\n    )\r\n  }\r\n\r\n  // output / input\r\n  getOutputPercent(inputAmount: AssetAmount): Percent {\r\n    const outputAmount = this.getOutputAfterNetworkFee(inputAmount)\r\n    const inputAmountInOutputAsset = inputAmount.totalPriceIn(\r\n      this.outputAsset,\r\n      this.swapPools,\r\n    ).amount\r\n\r\n    return new Percent(outputAmount.div(inputAmountInOutputAsset).assetAmount)\r\n  }\r\n\r\n  // 1 - output / input\r\n  getFeePercent(inputAmount: AssetAmount): Percent {\r\n    const outputPercent = this.getOutputPercent(inputAmount)\r\n    return new Percent(\r\n      Amount.fromAssetAmount(1, outputPercent.decimal).sub(\r\n        outputPercent,\r\n      ).assetAmount,\r\n    )\r\n  }\r\n\r\n  public static getSingleSwapInput(\r\n    outputAmount: AssetAmount,\r\n    pool: Pool,\r\n  ): AssetAmount {\r\n    // formula: (((X*Y)/y - 2*X) - sqrt(((X*Y)/y - 2*X)^2 - 4*X^2))/2\r\n    // (part1 - sqrt(part1 - part2))/2\r\n    const toRUNE = outputAmount.asset.isRUNE()\r\n    const y = outputAmount.amount\r\n    const X = toRUNE ? pool.assetDepth : pool.runeDepth\r\n    const Y = toRUNE ? pool.runeDepth : pool.assetDepth\r\n    const part1: Amount = X.mul(Y).div(y).sub(X.mul(2))\r\n    const part2: Amount = new Amount(\r\n      X.assetAmount.pow(2).multipliedBy(4),\r\n      AmountType.ASSET_AMOUNT,\r\n      MULTICHAIN_DECIMAL,\r\n    )\r\n\r\n    const inputAmount = new Amount(\r\n      part1.assetAmount\r\n        .minus(part1.assetAmount.pow(2).minus(part2.assetAmount).sqrt())\r\n        .div(2),\r\n      AmountType.ASSET_AMOUNT,\r\n      MULTICHAIN_DECIMAL,\r\n    )\r\n    const inputAsset = !toRUNE ? Asset.RUNE() : pool.asset\r\n\r\n    return new AssetAmount(inputAsset, inputAmount)\r\n  }\r\n\r\n  getInputAmount(outputAmount: AssetAmount): AssetAmount {\r\n    invariant(outputAmount.asset === this.outputAsset, 'Invalid Asset')\r\n\r\n    if (this.swapType === SwapType.SINGLE_SWAP) {\r\n      return Swap.getSingleSwapInput(outputAmount, this.swapPools[0])\r\n    }\r\n\r\n    invariant(!outputAmount.asset.isRUNE(), 'Invalid Asset')\r\n\r\n    // double swap formula: getSwapInput(getSwapInput(y, Y), X)\r\n    const secondSwapInput = Swap.getSingleSwapInput(\r\n      outputAmount,\r\n      this.swapPools[1],\r\n    )\r\n\r\n    return Swap.getSingleSwapInput(secondSwapInput, this.swapPools[0])\r\n  }\r\n\r\n  public static getSingleSwapSlip(\r\n    inputAmount: AssetAmount,\r\n    pool: Pool,\r\n  ): Percent {\r\n    // formula: (x) / (x + X)\r\n    const x = inputAmount.amount\r\n    const X = pool.depthOf(inputAmount.asset)\r\n\r\n    return new Percent(x.div(x.add(X)).assetAmount)\r\n  }\r\n\r\n  getSlip(inputAmount: AssetAmount): Percent {\r\n    invariant(inputAmount.asset === this.inputAsset, 'Invalid Asset')\r\n\r\n    if (this.swapType === SwapType.SINGLE_SWAP) {\r\n      return Swap.getSingleSwapSlip(inputAmount, this.swapPools[0])\r\n    }\r\n\r\n    invariant(!inputAmount.asset.isRUNE(), 'Invalid Asset')\r\n\r\n    // double swap slip formula: getSingleSwapSlip(input1) + getSingleSwapSlip(getSwapOutput1 => input2)\r\n    const firstSlip = Swap.getSingleSwapSlip(inputAmount, this.swapPools[0])\r\n    const firstSwapOutput = Swap.getSingleSwapOutput(\r\n      inputAmount,\r\n      this.swapPools[0],\r\n    )\r\n    const secondSlip = Swap.getSingleSwapSlip(\r\n      firstSwapOutput,\r\n      this.swapPools[1],\r\n    )\r\n\r\n    return new Percent(firstSlip.add(secondSlip).assetAmount)\r\n  }\r\n\r\n  // fee amount is based in output asset\r\n  public static getSingleSwapFee(\r\n    inputAmount: AssetAmount,\r\n    pool: Pool,\r\n  ): AssetAmount {\r\n    // formula: (x * x * Y) / (x + X) ^ 2\r\n    const toRUNE = !inputAmount.asset.isRUNE()\r\n    const outputAsset = toRUNE ? Asset.RUNE() : pool.asset\r\n\r\n    const x = inputAmount.amount\r\n    const X = toRUNE ? pool.assetDepth : pool.runeDepth\r\n    const Y = toRUNE ? pool.runeDepth : pool.assetDepth\r\n    const numerator = x.mul(X).mul(Y)\r\n    const denominator = new Amount(\r\n      x.add(X).assetAmount.pow(2),\r\n      AmountType.ASSET_AMOUNT,\r\n      MULTICHAIN_DECIMAL,\r\n    )\r\n\r\n    return new AssetAmount(outputAsset, numerator.div(denominator))\r\n  }\r\n\r\n  // fee amount is based in output asset\r\n  getFee(inputAmount: AssetAmount): AssetAmount {\r\n    invariant(inputAmount.asset === this.inputAsset, 'Invalid Asset')\r\n\r\n    if (this.swapType === SwapType.SINGLE_SWAP) {\r\n      return Swap.getSingleSwapFee(inputAmount, this.swapPools[0])\r\n    }\r\n\r\n    invariant(!inputAmount.asset.isRUNE(), 'Invalid Asset')\r\n\r\n    // double swap fee: getSwapFee1 + getSwapFee2\r\n    const firstSwapOutput = Swap.getSingleSwapOutput(\r\n      inputAmount,\r\n      this.swapPools[0],\r\n    )\r\n    // first swap fee is always based in rune\r\n    const firstSwapFeeInRune = Swap.getSingleSwapFee(\r\n      inputAmount,\r\n      this.swapPools[0],\r\n    )\r\n\r\n    // second swap fee based in output asset\r\n    const secondSwapFeeInAsset = Swap.getSingleSwapFee(\r\n      firstSwapOutput,\r\n      this.swapPools[1],\r\n    )\r\n\r\n    // first swap fee based in output asset\r\n    const firstSwapFeeInAsset = new AssetAmount(\r\n      Asset.RUNE(),\r\n      firstSwapFeeInRune,\r\n    ).totalPriceIn(this.outputAsset, this.swapPools)\r\n\r\n    return new AssetAmount(\r\n      this.outputAsset,\r\n      firstSwapFeeInAsset.add(secondSwapFeeInAsset),\r\n    )\r\n  }\r\n}\r\n","import {\r\n  BNBChain,\r\n  BTCChain,\r\n  THORChain,\r\n  ETHChain,\r\n  LTCChain,\r\n  assetFromString,\r\n  assetToString,\r\n  Chain,\r\n  currencySymbolByAsset,\r\n  AssetBNB,\r\n  AssetBTC,\r\n  AssetETH,\r\n  AssetLTC,\r\n  AssetRuneNative,\r\n} from '@xchainjs/xchain-util'\r\n\r\nimport {\r\n  DEFAULT_CHAIN_DECIMAL,\r\n  THORCHAIN_DECIMAL,\r\n  BNB_DECIMAL,\r\n  BTC_DECIMAL,\r\n  ETH_DECIMAL,\r\n  LTC_DECIMAL,\r\n} from '../constants/decimals'\r\n\r\nexport type AssetNetwork = 'mainnet' | 'testnet'\r\n\r\nexport interface IAsset {\r\n  readonly chain: Chain\r\n  readonly symbol: string\r\n  readonly ticker: string\r\n  readonly decimal: number\r\n\r\n  // TODO: add asset icon url\r\n\r\n  toString(): string\r\n  currencySymbol(): string\r\n  eq(asset: Asset): boolean\r\n  isRUNE(): boolean\r\n  isBNB(): boolean\r\n  sortsBefore(asset: Asset): number\r\n}\r\n\r\nexport class Asset implements IAsset {\r\n  public readonly chain: Chain\r\n\r\n  public readonly symbol: string\r\n\r\n  public readonly ticker: string\r\n\r\n  public readonly decimal: number\r\n\r\n  // created for USD pricing\r\n  public static USD(): Asset {\r\n    return new Asset(THORChain, 'USD-USD')\r\n  }\r\n\r\n  public static BNB(): Asset {\r\n    return new Asset(AssetBNB.chain, AssetBNB.symbol)\r\n  }\r\n\r\n  public static RUNE(): Asset {\r\n    return new Asset(AssetRuneNative.chain, AssetRuneNative.symbol)\r\n  }\r\n\r\n  public static BTC(): Asset {\r\n    return new Asset(AssetBTC.chain, AssetBTC.symbol)\r\n  }\r\n\r\n  public static ETH(): Asset {\r\n    return new Asset(AssetETH.chain, AssetETH.symbol)\r\n  }\r\n\r\n  public static LTC(): Asset {\r\n    return new Asset(AssetLTC.chain, AssetLTC.symbol)\r\n  }\r\n\r\n  public static fromAssetString(asset: string): Asset | null {\r\n    const { chain, symbol } = assetFromString(asset) || {}\r\n\r\n    if (chain && symbol) {\r\n      return new Asset(chain, symbol)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  public static getDecimalByChain(chain: Chain): number {\r\n    if (chain === BNBChain) return BNB_DECIMAL\r\n    if (chain === BTCChain) return BTC_DECIMAL\r\n    if (chain === THORChain) return THORCHAIN_DECIMAL\r\n    if (chain === LTCChain) return LTC_DECIMAL\r\n\r\n    // TODO: decimals are vary in the ETH chain\r\n    if (chain === ETHChain) return ETH_DECIMAL\r\n\r\n    return DEFAULT_CHAIN_DECIMAL\r\n  }\r\n\r\n  constructor(chain: Chain, symbol: string) {\r\n    this.chain = chain\r\n    this.symbol = symbol\r\n    this.ticker = Asset.getTicker(symbol)\r\n    this.decimal = Asset.getDecimalByChain(chain)\r\n  }\r\n\r\n  public static getTicker(symbol: string): string {\r\n    return symbol.split('-')[0]\r\n  }\r\n\r\n  private getAssetObj() {\r\n    return { chain: this.chain, symbol: this.symbol, ticker: this.ticker }\r\n  }\r\n\r\n  toString(): string {\r\n    return assetToString(this.getAssetObj())\r\n  }\r\n\r\n  currencySymbol(): string {\r\n    return currencySymbolByAsset(this.getAssetObj())\r\n  }\r\n\r\n  eq(asset: Asset): boolean {\r\n    return (\r\n      this.chain === asset.chain &&\r\n      this.symbol === asset.symbol &&\r\n      this.ticker === asset.ticker &&\r\n      this.decimal === asset.decimal\r\n    )\r\n  }\r\n\r\n  isRUNE(): boolean {\r\n    return this.eq(Asset.RUNE())\r\n  }\r\n\r\n  isBNB(): boolean {\r\n    return this.eq(Asset.BNB())\r\n  }\r\n\r\n  sortsBefore(asset: Asset): number {\r\n    if (this.eq(asset)) return 0\r\n\r\n    if (this.chain !== asset.chain) {\r\n      if (this.chain < asset.chain) return 1\r\n      if (this.chain < asset.chain) return -1\r\n    }\r\n\r\n    if (this.symbol < asset.symbol) return 1\r\n    if (this.symbol > asset.symbol) return -1\r\n\r\n    return 1\r\n  }\r\n}\r\n","import { PoolDetail } from 'midgard-sdk'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { MULTICHAIN_DECIMAL } from 'multichain-sdk/constants'\r\n\r\nimport { Amount } from './amount'\r\nimport { Asset } from './asset'\r\n\r\nexport interface IPool {\r\n  readonly asset: Asset\r\n  readonly runeDepth: Amount\r\n  readonly assetDepth: Amount\r\n  readonly assetUSDPrice: Amount\r\n\r\n  readonly detail: PoolDetail\r\n\r\n  assetPriceInRune: Amount\r\n  runePriceInAsset: Amount\r\n  involvesAsset(asset: Asset): boolean\r\n  priceOf(asset: Asset): Amount\r\n  depthOf(asset: Asset): Amount\r\n}\r\n\r\nexport class Pool implements IPool {\r\n  public readonly asset: Asset\r\n\r\n  public readonly runeDepth: Amount\r\n\r\n  public readonly assetDepth: Amount\r\n\r\n  public readonly assetUSDPrice: Amount\r\n\r\n  public readonly detail: PoolDetail\r\n\r\n  // get Pool by non-rune asset\r\n  public static byAsset(asset: Asset, pools: Pool[]): Pool | undefined {\r\n    if (!asset.isRUNE()) {\r\n      return pools.find((pool: Pool) => asset.eq(pool.asset))\r\n    }\r\n  }\r\n\r\n  public static fromPoolData(poolDetail: PoolDetail): Pool | null {\r\n    const { asset, runeDepth, assetDepth } = poolDetail\r\n    const assetObj = Asset.fromAssetString(asset)\r\n\r\n    if (assetObj && runeDepth && assetDepth) {\r\n      const runeAmount = Amount.fromBaseAmount(runeDepth, MULTICHAIN_DECIMAL)\r\n      const assetAmount = Amount.fromBaseAmount(assetDepth, MULTICHAIN_DECIMAL)\r\n\r\n      return new Pool(assetObj, runeAmount, assetAmount, poolDetail)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  constructor(\r\n    asset: Asset,\r\n    runeDepth: Amount,\r\n    assetDepth: Amount,\r\n    detail: PoolDetail,\r\n  ) {\r\n    this.asset = asset\r\n    this.runeDepth = runeDepth\r\n    this.assetDepth = assetDepth\r\n    this.detail = detail\r\n\r\n    this.assetUSDPrice = Amount.fromAssetAmount(\r\n      detail.assetPriceUSD,\r\n      MULTICHAIN_DECIMAL,\r\n    )\r\n  }\r\n\r\n  get assetPriceInRune(): Amount {\r\n    return this.runeDepth.div(this.assetDepth)\r\n  }\r\n\r\n  get runePriceInAsset(): Amount {\r\n    return this.assetDepth.div(this.runeDepth)\r\n  }\r\n\r\n  involvesAsset(asset: Asset): boolean {\r\n    return asset.isRUNE() || this.asset.eq(asset)\r\n  }\r\n\r\n  priceOf(asset: Asset): Amount {\r\n    invariant(this.involvesAsset(asset), 'Invalid asset')\r\n\r\n    if (asset.isRUNE()) return this.runePriceInAsset\r\n    return this.assetPriceInRune\r\n  }\r\n\r\n  depthOf(asset: Asset): Amount {\r\n    invariant(this.involvesAsset(asset), 'Invalid asset')\r\n\r\n    if (asset.isRUNE()) return this.runeDepth\r\n    return this.assetDepth\r\n  }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { AmountType, Amount, IAmount, Rounding, NUMBER_FORMAT } from './amount'\r\nimport { Asset } from './asset'\r\nimport { Pool } from './pool'\r\n\r\nexport interface IPrice extends IAmount {\r\n  readonly baseAsset: Asset\r\n  readonly quoteAsset: Asset\r\n  readonly unitPrice: BigNumber\r\n  readonly price: BigNumber\r\n  readonly amount: Amount\r\n\r\n  raw(): BigNumber\r\n  invert(): BigNumber\r\n}\r\n\r\nexport class Price extends Amount {\r\n  public readonly baseAsset: Asset\r\n\r\n  public readonly quoteAsset?: Asset\r\n\r\n  public readonly unitPrice: BigNumber\r\n\r\n  public readonly price: BigNumber\r\n\r\n  public readonly amount: Amount\r\n\r\n  constructor({\r\n    baseAsset,\r\n    quoteAsset,\r\n    pools,\r\n    priceAmount,\r\n  }: {\r\n    baseAsset: Asset\r\n    quoteAsset?: Asset\r\n    pools: Pool[]\r\n    priceAmount?: Amount\r\n  }) {\r\n    const amount = priceAmount\r\n      ? Amount.fromAssetAmount(priceAmount.assetAmount, baseAsset.decimal)\r\n      : Amount.fromAssetAmount(1, baseAsset.decimal)\r\n\r\n    super(amount.assetAmount, AmountType.ASSET_AMOUNT, baseAsset.decimal)\r\n\r\n    this.amount = amount\r\n    this.baseAsset = baseAsset\r\n    this.quoteAsset = quoteAsset\r\n\r\n    // initialize with 0\r\n    let unitPrice: BigNumber = new BigNumber(0)\r\n    let price: BigNumber = new BigNumber(0)\r\n\r\n    // if quoteAsset is not specified OR is USD, calc the price for USD\r\n    if (!quoteAsset || quoteAsset.eq(Asset.USD())) {\r\n      // set USD price for non-RUNE asset\r\n      if (!baseAsset.isRUNE()) {\r\n        const pool = Pool.byAsset(baseAsset, pools)\r\n        invariant(pool, `${baseAsset.toString()} Pool does not exist`)\r\n\r\n        if (pool) {\r\n          unitPrice = pool.assetUSDPrice.assetAmount\r\n        }\r\n      } else {\r\n        // set USD Price of RUNE\r\n        const pool = pools?.[0]\r\n\r\n        if (pool) {\r\n          unitPrice = pool.runePriceInAsset.mul(pool.assetUSDPrice).assetAmount\r\n        }\r\n      }\r\n    } else if (baseAsset.isRUNE() && !quoteAsset.isRUNE()) {\r\n      const pool = Pool.byAsset(quoteAsset, pools)\r\n\r\n      invariant(pool, `${quoteAsset.toString()} Pool does not exist`)\r\n\r\n      if (pool) {\r\n        unitPrice = pool.runePriceInAsset.assetAmount\r\n      }\r\n    } else if (!baseAsset.isRUNE() && quoteAsset.isRUNE()) {\r\n      const pool = Pool.byAsset(baseAsset, pools)\r\n\r\n      invariant(pool, `${baseAsset.toString()} Pool does not exist`)\r\n\r\n      if (pool) {\r\n        unitPrice = pool.assetPriceInRune.assetAmount\r\n      }\r\n    } else if (!baseAsset.isRUNE() && !quoteAsset.isRUNE()) {\r\n      const baseAssetPool = Pool.byAsset(baseAsset, pools)\r\n      const quoteAssetPool = Pool.byAsset(quoteAsset, pools)\r\n\r\n      invariant(baseAssetPool && quoteAssetPool, 'Pool does not exist')\r\n\r\n      if (baseAssetPool && quoteAssetPool) {\r\n        unitPrice = baseAssetPool.assetPriceInRune.div(\r\n          quoteAssetPool.assetPriceInRune,\r\n        ).assetAmount\r\n      }\r\n    } else {\r\n      // both are RUNE\r\n      unitPrice = new BigNumber(1)\r\n    }\r\n\r\n    price = unitPrice.multipliedBy(amount.assetAmount)\r\n    this.price = price\r\n    this.unitPrice = unitPrice\r\n  }\r\n\r\n  raw(): BigNumber {\r\n    return this.price\r\n  }\r\n\r\n  invert(): BigNumber {\r\n    return new BigNumber(1).dividedBy(this.raw())\r\n  }\r\n\r\n  toCurrencyFormat(\r\n    decimalPlaces = 8,\r\n    format: BigNumber.Format = NUMBER_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    const fixedLabel = this.toFixedRaw(decimalPlaces, format, rounding)\r\n\r\n    const isUSDBased = !this.quoteAsset || this.quoteAsset.ticker === 'USD'\r\n\r\n    return isUSDBased\r\n      ? `$${fixedLabel}`\r\n      : `${fixedLabel} ${this.quoteAsset?.ticker}`\r\n  }\r\n\r\n  toFixedRaw(\r\n    decimalPlaces = 8,\r\n    format: BigNumber.Format = NUMBER_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return Amount.fromAssetAmount(this.price, 8).toFixed(\r\n      decimalPlaces,\r\n      format,\r\n      rounding,\r\n    )\r\n  }\r\n\r\n  toFixedInverted(\r\n    decimalPlaces = 8,\r\n    format: BigNumber.Format = NUMBER_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return Amount.fromAssetAmount(this.invert(), 8).toFixed(\r\n      decimalPlaces,\r\n      format,\r\n      rounding,\r\n    )\r\n  }\r\n}\r\n","import {\r\n  BNBChain,\r\n  BTCChain,\r\n  THORChain,\r\n  ETHChain,\r\n  LTCChain,\r\n  Chain,\r\n} from '@xchainjs/xchain-util'\r\nimport BigNumber from 'bignumber.js'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { AmountType, Rounding, Amount, IAmount } from './amount'\r\nimport { Asset } from './asset'\r\nimport { Pool } from './pool'\r\nimport { Price } from './price'\r\n\r\n// TODO: compare method between asset amount\r\n\r\nexport interface IAssetAmount extends IAmount {\r\n  readonly asset: Asset\r\n  readonly amount: Amount\r\n\r\n  add(amount: AssetAmount): AssetAmount\r\n  sub(amount: AssetAmount): AssetAmount\r\n  mul(value: BigNumber.Value | Amount): AssetAmount\r\n  div(value: BigNumber.Value | Amount): AssetAmount\r\n\r\n  toCurrencyFormat(\r\n    {\r\n      significantDigits,\r\n      format,\r\n      rounding,\r\n    }: {\r\n      significantDigits?: number\r\n      format?: BigNumber.Format\r\n      rounding?: Rounding\r\n    },\r\n    isPrefix?: boolean,\r\n  ): string\r\n  unitPriceIn(asset: Asset, pools: Pool[]): Price\r\n  totalPriceIn(asset: Asset, pools: Pool[]): Price\r\n}\r\n\r\nexport class AssetAmount extends Amount implements IAssetAmount {\r\n  public readonly asset: Asset\r\n\r\n  public readonly amount: Amount\r\n\r\n  public static getMinAmountByChain(chain: Chain): AssetAmount {\r\n    if (chain === BNBChain) {\r\n      return new AssetAmount(\r\n        Asset.BNB(),\r\n        Amount.fromBaseAmount(1, Asset.BNB().decimal),\r\n      )\r\n    }\r\n    // 1000 satoshi\r\n    if (chain === BTCChain) {\r\n      return new AssetAmount(\r\n        Asset.BTC(),\r\n        Amount.fromBaseAmount(1000, Asset.BTC().decimal),\r\n      )\r\n    }\r\n    // 1 Thor\r\n    if (chain === THORChain) {\r\n      return new AssetAmount(\r\n        Asset.RUNE(),\r\n        Amount.fromBaseAmount(1, Asset.RUNE().decimal),\r\n      )\r\n    }\r\n    // 0 ETH\r\n    if (chain === ETHChain) {\r\n      return new AssetAmount(\r\n        Asset.ETH(),\r\n        Amount.fromBaseAmount(0, Asset.ETH().decimal),\r\n      )\r\n    }\r\n    if (chain === LTCChain) {\r\n      return new AssetAmount(\r\n        Asset.LTC(),\r\n        Amount.fromBaseAmount(1, Asset.LTC().decimal),\r\n      )\r\n    }\r\n\r\n    return new AssetAmount(\r\n      Asset.RUNE(),\r\n      Amount.fromBaseAmount(1, Asset.RUNE().decimal),\r\n    )\r\n  }\r\n\r\n  constructor(asset: Asset, amount: Amount) {\r\n    super(amount.assetAmount, AmountType.ASSET_AMOUNT, asset.decimal)\r\n    this.asset = asset\r\n\r\n    // make sure amount has same decimal as asset\r\n    this.amount = new Amount(\r\n      amount.assetAmount,\r\n      AmountType.ASSET_AMOUNT,\r\n      asset.decimal,\r\n    )\r\n  }\r\n\r\n  add(amount: AssetAmount): AssetAmount {\r\n    invariant(this.asset.eq(amount.asset), 'asset must be same')\r\n\r\n    return new AssetAmount(this.asset, this.amount.add(amount.amount))\r\n  }\r\n\r\n  sub(amount: AssetAmount): AssetAmount {\r\n    invariant(this.asset.eq(amount.asset), 'asset must be same')\r\n\r\n    return new AssetAmount(this.asset, this.amount.sub(amount.amount))\r\n  }\r\n\r\n  mul(value: BigNumber.Value | Amount): AssetAmount {\r\n    let amount\r\n    if (value instanceof Amount) {\r\n      amount = new Amount(\r\n        this.assetAmount.multipliedBy(value.assetAmount),\r\n        AmountType.ASSET_AMOUNT,\r\n        this.decimal,\r\n      )\r\n    } else {\r\n      amount = new Amount(\r\n        this.assetAmount.multipliedBy(value),\r\n        AmountType.ASSET_AMOUNT,\r\n        this.decimal,\r\n      )\r\n    }\r\n\r\n    return new AssetAmount(this.asset, amount)\r\n  }\r\n\r\n  div(value: BigNumber.Value | Amount): AssetAmount {\r\n    let amount\r\n    if (value instanceof Amount) {\r\n      amount = new Amount(\r\n        this.assetAmount.dividedBy(value.assetAmount),\r\n        AmountType.ASSET_AMOUNT,\r\n        this.decimal,\r\n      )\r\n    } else {\r\n      amount = new Amount(\r\n        this.assetAmount.dividedBy(value),\r\n        AmountType.ASSET_AMOUNT,\r\n        this.decimal,\r\n      )\r\n    }\r\n\r\n    return new AssetAmount(this.asset, amount)\r\n  }\r\n\r\n  toCurrencyFormat(\r\n    {\r\n      significantDigits,\r\n      format,\r\n      rounding,\r\n    }: {\r\n      significantDigits?: number\r\n      format?: BigNumber.Format\r\n      rounding?: Rounding\r\n    },\r\n    isPrefix = true,\r\n  ): string {\r\n    const significantValue = super.toSignificant(\r\n      significantDigits,\r\n      format,\r\n      rounding,\r\n    )\r\n\r\n    if (isPrefix) {\r\n      return `${this.asset.currencySymbol} ${significantValue}`\r\n    }\r\n\r\n    return `${significantValue} ${this.asset.currencySymbol}`\r\n  }\r\n\r\n  unitPriceIn(quoteAsset: Asset, pools: Pool[]): Price {\r\n    return new Price({\r\n      baseAsset: this.asset,\r\n      quoteAsset,\r\n      pools,\r\n    })\r\n  }\r\n\r\n  totalPriceIn(quoteAsset: Asset, pools: Pool[]): Price {\r\n    return new Price({\r\n      baseAsset: this.asset,\r\n      quoteAsset,\r\n      pools,\r\n      priceAmount: Amount.fromAssetAmount(this.assetAmount, this.decimal),\r\n    })\r\n  }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\n\r\nimport {\r\n  Rounding,\r\n  Amount,\r\n  EMPTY_FORMAT,\r\n  NUMBER_FORMAT,\r\n  AmountType,\r\n} from './amount'\r\n\r\nexport class Percent extends Amount {\r\n  constructor(\r\n    amount: BigNumber.Value,\r\n    type: AmountType = AmountType.ASSET_AMOUNT,\r\n  ) {\r\n    // Decimal point for percent is 2\r\n    super(amount, type, 2)\r\n  }\r\n\r\n  toSignificant(\r\n    significantDigits = 8,\r\n    format: BigNumber.Format = EMPTY_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return `${super\r\n      .mul(100)\r\n      .toSignificant(significantDigits, format, rounding)} %`\r\n  }\r\n\r\n  toFixed(\r\n    decimalPlaces = 8,\r\n    format: BigNumber.Format = NUMBER_FORMAT,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return `${super.mul(100).toFixed(decimalPlaces, format, rounding)} %`\r\n  }\r\n}\r\n","import { Amount } from './amount'\r\nimport { Asset } from './asset'\r\nimport { Percent } from './percent'\r\n\r\nexport class Memo {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  private constructor() {}\r\n\r\n  public static swapMemo(asset: Asset, address = '', limit?: Amount) {\r\n    const { chain } = asset\r\n    const { symbol } = asset\r\n    const limitString = limit?.baseAmount.toString() ?? ''\r\n\r\n    return `SWAP:${chain}.${symbol}:${address}:${limitString}`\r\n  }\r\n\r\n  public static depositMemo(asset: Asset, address = '') {\r\n    const { chain } = asset\r\n    const { symbol } = asset\r\n\r\n    return `STAKE:${chain}.${symbol}:${address}`\r\n  }\r\n\r\n  public static withdrawMemo(asset: Asset, percent: Percent) {\r\n    const { chain } = asset\r\n    const { symbol } = asset\r\n\r\n    // multiply percent by 100\r\n    return `WITHDRAW:${chain}.${symbol}:${percent.mul(100).toFixed(0)}`\r\n  }\r\n}\r\n","export * from './types'\r\nexport * from './client'\r\nexport * from './binance'\r\nexport * from './multichain'\r\n","import axios from 'axios'\r\nimport {\r\n  Balances as BinanceBalances,\r\n  Fees as BinanceFees,\r\n  TxPage as BinanceTxPage,\r\n  TransactionResult,\r\n  TransferFee,\r\n} from './types/binance'\r\n\r\nimport * as crypto from '@binance-chain/javascript-sdk/lib/crypto'\r\nimport { BncClient } from '@binance-chain/javascript-sdk/lib/client'\r\nimport {\r\n  Address,\r\n  XChainClient,\r\n  XChainClientParams,\r\n  Balances,\r\n  Fees,\r\n  Network,\r\n  Tx,\r\n  Txs,\r\n  TxParams,\r\n  TxHash,\r\n  TxHistoryParams,\r\n  TxsPage,\r\n} from '@xchainjs/xchain-client'\r\nimport {\r\n  Asset,\r\n  AssetBNB,\r\n  BaseAmount,\r\n  assetFromString,\r\n  assetAmount,\r\n  assetToBase,\r\n  baseAmount,\r\n  baseToAsset,\r\n  BNBChain,\r\n  assetToString,\r\n} from '@xchainjs/xchain-util'\r\nimport * as xchainCrypto from '@xchainjs/xchain-crypto'\r\nimport { isTransferFee, parseTx, getPrefix } from './util'\r\nimport { SignedSend } from '@binance-chain/javascript-sdk/lib/types'\r\n\r\ntype PrivKey = string\r\n\r\nexport type Coin = {\r\n  asset: Asset\r\n  amount: BaseAmount\r\n}\r\n\r\nexport type MultiTransfer = {\r\n  to: Address\r\n  coins: Coin[]\r\n}\r\n\r\nexport type MultiSendParams = {\r\n  address?: Address\r\n  transactions: MultiTransfer[]\r\n  memo?: string\r\n}\r\n\r\n/**\r\n * Interface for custom Binance client\r\n */\r\nexport interface BinanceClient {\r\n  purgeClient(): void\r\n  getBncClient(): BncClient\r\n  setPrivateKey(privateKey: string): void\r\n  getPrivateKey(): string\r\n  getAddress(): string\r\n  setAddress(addr: string): void\r\n\r\n  getMultiSendFees(): Promise<Fees>\r\n  getSingleAndMultiFees(): Promise<{ single: Fees; multi: Fees }>\r\n\r\n  multiSend(params: MultiSendParams): Promise<TxHash>\r\n}\r\n\r\n/**\r\n * Custom Binance client\r\n */\r\nclass Client implements BinanceClient, XChainClient {\r\n  private network: Network\r\n  private bncClient: BncClient\r\n  private phrase = ''\r\n  private address: Address = '' // default address at index 0\r\n  private privateKey: PrivKey | null = null // default private key at index 0\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * Client has to be initialised with network type and phrase.\r\n   * It will throw an error if an invalid phrase has been passed.\r\n   *\r\n   * @param {XChainClientParams} params\r\n   *\r\n   * @throws {\"Invalid phrase\"} Thrown if the given phase is invalid.\r\n   */\r\n  constructor({ network = 'testnet', phrase }: XChainClientParams) {\r\n    this.network = network\r\n    if (phrase) this.setPhrase(phrase)\r\n\r\n    this.bncClient = new BncClient(this.getClientUrl())\r\n    this.bncClient.chooseNetwork(network)\r\n  }\r\n\r\n  /**\r\n   * Purge client.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  purgeClient(): void {\r\n    this.phrase = ''\r\n    this.address = ''\r\n    this.privateKey = null\r\n  }\r\n\r\n  setAddress = (address: string) => {\r\n    this.address = address\r\n  }\r\n\r\n  setPrivateKey = (privateKey: string) => {\r\n    const address = crypto.getAddressFromPrivateKey(\r\n      privateKey,\r\n      getPrefix(this.network),\r\n    )\r\n\r\n    this.privateKey = privateKey\r\n    this.address = address\r\n  }\r\n\r\n  /**\r\n   * Get the BncClient interface.\r\n   *\r\n   * @returns {BncClient} The BncClient from `@binance-chain/javascript-sdk`.\r\n   */\r\n  getBncClient(): BncClient {\r\n    return this.bncClient\r\n  }\r\n\r\n  /**\r\n   * Set/update the current network.\r\n   *\r\n   * @param {Network} network `mainnet` or `testnet`.\r\n   * @returns {void}\r\n   *\r\n   * @throws {\"Network must be provided\"}\r\n   * Thrown if network has not been set before.\r\n   */\r\n  setNetwork(network: Network): XChainClient {\r\n    if (!network) {\r\n      throw new Error('Network must be provided')\r\n    } else {\r\n      this.network = network\r\n      this.bncClient = new BncClient(this.getClientUrl())\r\n      this.bncClient.chooseNetwork(network)\r\n      this.address = ''\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current network.\r\n   *\r\n   * @returns {Network} The current network. (`mainnet` or `testnet`)\r\n   */\r\n  getNetwork(): Network {\r\n    return this.network\r\n  }\r\n\r\n  /**\r\n   * Get the client url.\r\n   *\r\n   * @returns {string} The client url for binance chain based on the network.\r\n   */\r\n  private getClientUrl = (): string => {\r\n    return this.network === 'testnet' ? 'https://testnet-dex.binance.org' : 'https://dex.binance.org'\r\n  }\r\n\r\n  /**\r\n   * Get the explorer url.\r\n   *\r\n   * @returns {string} The explorer url based on the network.\r\n   */\r\n  getExplorerUrl = (): string => {\r\n    return this.network === 'testnet' ? 'https://testnet-explorer.binance.org' : 'https://explorer.binance.org'\r\n  }\r\n\r\n  /**\r\n   * Get the explorer url for the given address.\r\n   *\r\n   * @param {Address} address\r\n   * @returns {string} The explorer url for the given address based on the network.\r\n   */\r\n  getExplorerAddressUrl = (address: Address): string => {\r\n    return `${this.getExplorerUrl()}/address/${address}`\r\n  }\r\n\r\n  /**\r\n   * Get the explorer url for the given transaction id.\r\n   *\r\n   * @param {string} txID\r\n   * @returns {string} The explorer url for the given transaction id based on the network.\r\n   */\r\n  getExplorerTxUrl = (txID: string): string => {\r\n    return `${this.getExplorerUrl()}/tx/${txID}`\r\n  }\r\n\r\n  /**\r\n   * Set/update a new phrase\r\n   *\r\n   * @param {string} phrase A new phrase.\r\n   * @returns {Address} The address from the given phrase\r\n   *\r\n   * @throws {\"Invalid phrase\"}\r\n   * Thrown if the given phase is invalid.\r\n   */\r\n  setPhrase = (phrase: string): Address => {\r\n    if (!this.phrase || this.phrase !== phrase) {\r\n      if (!xchainCrypto.validatePhrase(phrase)) {\r\n        throw new Error('Invalid phrase')\r\n      }\r\n\r\n      this.phrase = phrase\r\n      this.privateKey = null\r\n      this.address = ''\r\n    }\r\n\r\n    return this.getAddress()\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Get private key.\r\n   *\r\n   * @returns {PrivKey} The privkey generated from the given phrase\r\n   *\r\n   * @throws {\"Phrase not set\"}\r\n   * Throws an error if phrase has not been set before\r\n   * */\r\n  getPrivateKey = (): PrivKey => {\r\n    if (!this.privateKey) {\r\n      throw new Error('Phrase not set')\r\n    }\r\n\r\n    return this.privateKey\r\n  }\r\n\r\n  /**\r\n   * Get the current address.\r\n   *\r\n   * @returns {Address} The current address.\r\n   *\r\n   * @throws {Error} Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.\r\n   */\r\n  getAddress = (): string => {\r\n    if (!this.address) {\r\n      const address = crypto.getAddressFromPrivateKey(this.getPrivateKey(), getPrefix(this.network))\r\n      if (!address) {\r\n        throw new Error(\r\n          'Address has to be set. Or set a phrase by calling `setPhrase` before to use an address of an imported key.',\r\n        )\r\n      }\r\n\r\n      this.address = address\r\n    }\r\n    return this.address\r\n  }\r\n\r\n  /**\r\n   * Validate the given address.\r\n   *\r\n   * @param {Address} address\r\n   * @returns {boolean} `true` or `false`\r\n   */\r\n  validateAddress = (address: Address): boolean => {\r\n    return this.bncClient.checkAddress(address, getPrefix(this.network))\r\n  }\r\n\r\n  /**\r\n   * Get the balance of a given address.\r\n   *\r\n   * @param {Address} address By default, it will return the balance of the current wallet. (optional)\r\n   * @param {Asset} asset If not set, it will return all assets available. (optional)\r\n   * @returns {Array<Balance>} The balance of the address.\r\n   */\r\n  getBalance = async (address?: Address): Promise<Balances> => {\r\n    try {\r\n      const balances: BinanceBalances = await this.bncClient.getBalance(address || this.getAddress())\r\n\r\n      return balances\r\n        .map((balance) => {\r\n          return {\r\n            asset: assetFromString(`${BNBChain}.${balance.symbol}`) || AssetBNB,\r\n            amount: assetToBase(assetAmount(balance.free, 8)),\r\n          }\r\n        })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Search transactions with parameters.\r\n   *\r\n   * @returns {Params} The parameters to be used for transaction search.\r\n   * */\r\n  private searchTransactions = async (params?: { [x: string]: string | undefined }): Promise<TxsPage> => {\r\n    try {\r\n      const clientUrl = `${this.getClientUrl()}/api/v1/transactions`\r\n      const url = new URL(clientUrl)\r\n\r\n      const endTime = Date.now()\r\n      const diffTime = 90 * 24 * 60 * 60 * 1000\r\n      url.searchParams.set('endTime', endTime.toString())\r\n      url.searchParams.set('startTime', (endTime - diffTime).toString())\r\n\r\n      for (const key in params) {\r\n        const value = params[key]\r\n        if (value) {\r\n          url.searchParams.set(key, value)\r\n          if (key === 'startTime' && !params['endTime']) {\r\n            url.searchParams.set('endTime', (parseInt(value) + diffTime).toString())\r\n          }\r\n          if (key === 'endTime' && !params['startTime']) {\r\n            url.searchParams.set('startTime', (parseInt(value) - diffTime).toString())\r\n          }\r\n        }\r\n      }\r\n\r\n      const txHistory = await axios.get<BinanceTxPage>(url.toString()).then((response) => response.data)\r\n\r\n      return {\r\n        total: txHistory.total,\r\n        txs: txHistory.tx.map(parseTx).filter(Boolean) as Txs,\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get transaction history of a given address with pagination options.\r\n   * By default it will return the transaction history of the current wallet.\r\n   *\r\n   * @param {TxHistoryParams} params The options to get transaction history. (optional)\r\n   * @returns {TxsPage} The transaction history.\r\n   */\r\n  getTransactions = async (params?: TxHistoryParams): Promise<TxsPage> => {\r\n    try {\r\n      return await this.searchTransactions({\r\n        address: params ? params.address : this.getAddress(),\r\n        limit: params && params.limit?.toString(),\r\n        offset: params && params.offset?.toString(),\r\n        startTime: params && params.startTime && params.startTime.getTime().toString(),\r\n        txAsset: params && params.asset,\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the transaction details of a given transaction id.\r\n   *\r\n   * @param {string} txId The transaction id.\r\n   * @returns {Tx} The transaction details of the given transaction id.\r\n   */\r\n  getTransactionData = async (txId: string): Promise<Tx> => {\r\n    try {\r\n      const txResult: TransactionResult = await axios\r\n        .get(`${this.getClientUrl()}/api/v1/tx/${txId}?format=json`)\r\n        .then((response) => response.data)\r\n\r\n      const blockHeight = txResult.height\r\n\r\n      let address = ''\r\n      const msgs = txResult.tx.value.msg\r\n      if (msgs.length) {\r\n        const msg = msgs[0].value as SignedSend\r\n        if (msg.inputs && msg.inputs.length) {\r\n          address = msg.inputs[0].address\r\n        } else if (msg.outputs && msg.outputs.length) {\r\n          address = msg.outputs[0].address\r\n        }\r\n      }\r\n\r\n      const txHistory = await this.searchTransactions({ address, blockHeight })\r\n      const transaction = txHistory.txs.find((tx) => (tx.hash = txId))\r\n\r\n      if (!transaction) {\r\n        throw new Error('transaction not found')\r\n      }\r\n\r\n      return transaction\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Broadcast multi-send transaction.\r\n   *\r\n   * @param {MultiSendParams} params The multi-send transfer options.\r\n   * @returns {TxHash} The transaction hash.\r\n   */\r\n  multiSend = async ({ address, transactions, memo = '' }: MultiSendParams): Promise<TxHash> => {\r\n    try {\r\n      await this.bncClient.initChain()\r\n      await this.bncClient.setPrivateKey(this.getPrivateKey()).catch((error) => Promise.reject(error))\r\n\r\n      const transferResult = await this.bncClient.multiSend(\r\n        address || this.getAddress(),\r\n        transactions.map((transaction) => {\r\n          return {\r\n            to: transaction.to,\r\n            coins: transaction.coins.map((coin) => {\r\n              return {\r\n                denom: coin.asset.symbol,\r\n                amount: baseToAsset(coin.amount).amount().toString(),\r\n              }\r\n            }),\r\n          }\r\n        }),\r\n        memo,\r\n      )\r\n\r\n      return transferResult.result.map((txResult: { hash?: TxHash }) => txResult?.hash ?? '')[0]\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transfer balances.\r\n   *\r\n   * @param {TxParams} params The transfer options.\r\n   * @returns {TxHash} The transaction hash.\r\n   */\r\n  transfer = async ({ asset, amount, recipient, memo }: TxParams): Promise<TxHash> => {\r\n    try {\r\n      await this.bncClient.initChain()\r\n      await this.bncClient.setPrivateKey(this.getPrivateKey()).catch((error: Error) => Promise.reject(error))\r\n\r\n      const transferResult = await this.bncClient.transfer(\r\n        this.getAddress(),\r\n        recipient,\r\n        baseToAsset(amount).amount().toString(),\r\n        asset ? asset.symbol : AssetBNB.symbol,\r\n        memo,\r\n      )\r\n\r\n      return transferResult.result.map((txResult: { hash?: TxHash }) => txResult?.hash ?? '')[0]\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current transfer fee.\r\n   *\r\n   * @returns {TransferFee} The current transfer fee.\r\n   */\r\n  private getTransferFee = async (): Promise<TransferFee> => {\r\n    try {\r\n      const feesArray = await axios\r\n        .get<BinanceFees>(`${this.getClientUrl()}/api/v1/fees`)\r\n        .then((response) => response.data)\r\n\r\n      const transferFee = feesArray.find(isTransferFee)\r\n      if (!transferFee) {\r\n        throw new Error('failed to get transfer fees')\r\n      }\r\n\r\n      return transferFee\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current fee.\r\n   *\r\n   * @returns {Fees} The current fee.\r\n   */\r\n  getFees = async (): Promise<Fees> => {\r\n    try {\r\n      const transferFee = await this.getTransferFee()\r\n      const singleTxFee = baseAmount(transferFee.fixed_fee_params.fee)\r\n\r\n      return {\r\n        type: 'base',\r\n        fast: singleTxFee,\r\n        fastest: singleTxFee,\r\n        average: singleTxFee,\r\n      } as Fees\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current fee for multi-send transaction.\r\n   *\r\n   * @returns {Fees} The current fee for multi-send transaction.\r\n   */\r\n  getMultiSendFees = async (): Promise<Fees> => {\r\n    try {\r\n      const transferFee = await this.getTransferFee()\r\n      const multiTxFee = baseAmount(transferFee.multi_transfer_fee)\r\n\r\n      return {\r\n        type: 'base',\r\n        average: multiTxFee,\r\n        fast: multiTxFee,\r\n        fastest: multiTxFee,\r\n      } as Fees\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current fee for both single and multi-send transaction.\r\n   *\r\n   * @returns {SingleAndMultiFees} The current fee for both single and multi-send transaction.\r\n   */\r\n  getSingleAndMultiFees = async (): Promise<{ single: Fees; multi: Fees }> => {\r\n    try {\r\n      const transferFee = await this.getTransferFee()\r\n      const singleTxFee = baseAmount(transferFee.fixed_fee_params.fee)\r\n      const multiTxFee = baseAmount(transferFee.multi_transfer_fee)\r\n\r\n      return {\r\n        single: {\r\n          type: 'base',\r\n          fast: singleTxFee,\r\n          fastest: singleTxFee,\r\n          average: singleTxFee,\r\n        } as Fees,\r\n        multi: {\r\n          type: 'base',\r\n          average: multiTxFee,\r\n          fast: multiTxFee,\r\n          fastest: multiTxFee,\r\n        } as Fees,\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n\r\nexport { Client }\r\n","import React from 'react'\r\n\r\nimport { omit } from 'lodash'\r\nimport { css } from 'styled-components'\r\n\r\nimport { FixmeType } from '../types'\r\n\r\ntype MediaQueriesType = {\r\n  [key: string]: string\r\n}\r\n\r\n// SC Media breakpoints utility\r\nconst mediaQueries: MediaQueriesType = {\r\n  xs: '(min-width: 0px)',\r\n  sm: '(min-width: 576px)',\r\n  md: '(min-width: 768px)',\r\n  lg: '(min-width: 992px)',\r\n  xl: '(min-width: 1200px)',\r\n  xxl: '(min-width: 1600px)',\r\n}\r\n\r\ntype FirstArg = FixmeType\r\ntype ExtraArgs = string[]\r\ntype ArgType = [FirstArg, ...ExtraArgs]\r\n\r\nexport const media: FixmeType = Object.keys(mediaQueries).reduce(\r\n  (acc, segment) => {\r\n    const styledMediaFunction = (...args: ArgType) => css`\r\n      @media ${mediaQueries[segment]} {\r\n        ${css(...args)};\r\n      }\r\n    `\r\n    return {\r\n      ...acc,\r\n      [segment]: styledMediaFunction,\r\n    }\r\n  },\r\n  {},\r\n)\r\n\r\nexport const cleanTag = (component: FixmeType, tagList = ['']) => (\r\n  props: FixmeType,\r\n) => React.createElement(component, omit(props, tagList))\r\n\r\nexport function provideResponsiveShow({ showFrom }: { showFrom: string }) {\r\n  return (\r\n    showFrom &&\r\n    css`\r\n      display: none;\r\n      ${media[showFrom]`\r\n        display: block;\r\n      `}\r\n    `\r\n  )\r\n}\r\n\r\nexport function provideResponsiveHide({ hideFrom }: { hideFrom: string }) {\r\n  return (\r\n    hideFrom &&\r\n    css`\r\n      display: block;\r\n      ${media[hideFrom]`\r\n        display: none;\r\n      `}\r\n    `\r\n  )\r\n}\r\n","export * from './binance'\r\nexport * as WS from './binance-ws'\r\nexport * from './common'\r\n","import { BigSource } from 'big.js'\r\n\r\n/**\r\n * Type definitions for Binance Chain API\r\n * @see https://docs.binance.org/api-reference/dex-api/\r\n *\r\n */\r\n\r\nimport { NETWORK_PREFIX_MAPPING } from '@binance-chain/javascript-sdk/lib/client'\r\nimport { Msg, StdSignature } from '@binance-chain/javascript-sdk/lib/types'\r\n\r\n/**\r\n * Address\r\n */\r\nexport type Address = string\r\n\r\n/**\r\n * Token\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#token\r\n */\r\nexport type Token = {\r\n  /**\r\n   * token name, e.g. Binance Chain\r\n   */\r\n  name: string\r\n  /**\r\n   * unique token trade symbol, e.g. BTC-000\r\n   */\r\n  symbol: string\r\n  /**\r\n   * token symbol, e.g. BTC\r\n   */\r\n  original_symbol: string\r\n  /**\r\n   * total token supply in decimal form, e.g. 1.00000000\r\n   */\r\n  total_supply: string\r\n  /**\r\n   * Address which issue the token\r\n   */\r\n  owner: string\r\n}\r\n\r\n/**\r\n * Market\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#market\r\n */\r\nexport type Market = {\r\n  /**\r\n   * symbol of base asset, e.g. BNB\r\n   */\r\n  base_asset_symbol: string\r\n  /**\r\n   * symbol of quote asset, e.g. ABC-5CA\r\n   */\r\n  quote_asset_symbol: string\r\n  /**\r\n   * Price in decimal form, e.g. 1.00000000\r\n   */\r\n  list_price: string\r\n  /**\r\n   * Minimium price change in decimal form, e.g. 0.00000001\r\n   */\r\n  tick_size: string\r\n  /**\r\n   * Minimium trading quantity in decimal form, e.g. 1.00000000\r\n   */\r\n  lot_size: string\r\n}\r\n\r\n/**\r\n * TickerStatistics\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#tickerstatistics\r\n */\r\nexport type TickerStatistics = {\r\n  /**\r\n   * sell price\r\n   */\r\n  askPrice: string\r\n  /**\r\n   * sell quantity\r\n   */\r\n  askQuantity: string\r\n  /**\r\n   * buy price\r\n   */\r\n  bidPrice: string\r\n  /**\r\n   * buy quantity\r\n   */\r\n  bidQuantity: string\r\n  /**\r\n   * time of closing\r\n   */\r\n  closeTime: number\r\n  /**\r\n   * total trade count\r\n   */\r\n  count: number\r\n  /**\r\n   * ID of first trade\r\n   */\r\n  firstId: string\r\n  /**\r\n   * highest price\r\n   */\r\n  highPrice: string\r\n  /**\r\n   * ID of last trade\r\n   */\r\n  lastId: string\r\n  /**\r\n   * last price\r\n   */\r\n  lastPrice: string\r\n  /**\r\n   * last quantity\r\n   */\r\n  lastQuantity: string\r\n  /**\r\n   * lowest price\r\n   */\r\n  lowPrice: string\r\n  /**\r\n   * open price\r\n   */\r\n  openPrice: string\r\n  /**\r\n   * open time\r\n   */\r\n  openTime: number\r\n  /**\r\n   * last close price\r\n   */\r\n  prevClosePrice: string\r\n  /**\r\n   * change of price\r\n   */\r\n  priceChange: string\r\n  /**\r\n   * change of price in percentage\r\n   */\r\n  priceChangePercent: string\r\n  /**\r\n   * trading volume in quote asset\r\n   */\r\n  quoteVolume: string\r\n  /**\r\n   * trading symbol\r\n   */\r\n  symbol: string\r\n  /**\r\n   * trading volume\r\n   */\r\n  volume: string\r\n  /**\r\n   * weighted average price\r\n   */\r\n  weightedAvgPrice: string\r\n}\r\n\r\n/**\r\n * Account\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#account\r\n */\r\nexport type Account = {\r\n  /**\r\n   * Account number\r\n   */\r\n  account_number: number\r\n  /**\r\n   * Address of the account\r\n   */\r\n  address: Address\r\n  /**\r\n   * List of balances\r\n   */\r\n  balances: Balance[]\r\n  /**\r\n   * Public key bytes\r\n   */\r\n  public_key: number[]\r\n  /**\r\n   * sequence is for preventing replay attack\r\n   */\r\n  sequence: number\r\n}\r\n\r\n/**\r\n * TxPage\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#txpage\r\n */\r\nexport type TxPage = {\r\n  /**\r\n   * total sum of transactions\r\n   */\r\n  total: number\r\n  /**\r\n   * List of transactions\r\n   */\r\n  tx: Txs\r\n}\r\n\r\nexport type FeeType =\r\n  | 'submit_proposal'\r\n  | 'deposit'\r\n  | 'vote'\r\n  | 'create_validator'\r\n  | 'remove_validator'\r\n  | 'dexList'\r\n  | 'orderNew'\r\n  | 'orderCancel'\r\n  | 'issueMsg'\r\n  | 'mintMsg'\r\n  | 'tokensBurn'\r\n  | 'tokensFreeze'\r\n  | 'send'\r\n  | 'timeLock'\r\n  | 'timeUnlock'\r\n  | 'timeRelock'\r\n  | 'setAccountFlags'\r\n  | 'HTLT'\r\n  | 'depositHTLT'\r\n  | 'claimHTLT'\r\n  | 'refundHTLT'\r\n\r\nexport type Fee = {\r\n  msg_type: FeeType\r\n  fee: number\r\n  fee_for: number\r\n}\r\n\r\nexport type TransferFee = {\r\n  fixed_fee_params: Fee\r\n  multi_transfer_fee: number\r\n  lower_limit_as_multi: number\r\n}\r\n\r\nexport type DexFeeName =\r\n  | 'ExpireFee'\r\n  | 'ExpireFeeNative'\r\n  | 'CancelFee'\r\n  | 'CancelFeeNative'\r\n  | 'FeeRate'\r\n  | 'FeeRateNative'\r\n  | 'IOCExpireFee'\r\n  | 'IOCExpireFeeNative'\r\n\r\nexport type DexFee = {\r\n  fee_name: DexFeeName\r\n  fee_value: number\r\n}\r\n\r\nexport type DexFees = {\r\n  dex_fee_fields: DexFee[]\r\n}\r\n\r\nexport type Fees = Array<Fee | TransferFee | DexFees>\r\n\r\n/**\r\n * Tx\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#tx\r\n */\r\nexport type Tx = {\r\n  /**\r\n   * block height\r\n   */\r\n  blockHeight: number\r\n  /**\r\n   * transaction result code\r\n   */\r\n  code: number\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  confirmBlocks: number\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  data: string | null\r\n  /**\r\n   * From address\r\n   */\r\n  fromAddr: Address\r\n  /**\r\n   * Order ID\r\n   */\r\n  orderId: string | null\r\n  /**\r\n   * Time of transaction\r\n   */\r\n  timeStamp: string\r\n  /**\r\n   * To address\r\n   */\r\n  toAddr: Address\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  txAge: number\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  txAsset: string\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  txFee: string\r\n  /**\r\n   * hash of transaction\r\n   */\r\n  txHash: string\r\n  /**\r\n   * Type of transaction\r\n   */\r\n  txType: TxType\r\n  /**\r\n   * memo\r\n   */\r\n  memo: string\r\n  /**\r\n   * Value of transaction\r\n   */\r\n  value: string\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  source: number\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  sequence: number\r\n  /**\r\n   * Optional. Available when the transaction type is one of HTL_TRANSFER, CLAIM_HTL, REFUND_HTL, DEPOSIT_HTL\r\n   */\r\n  swapId?: string\r\n  /**\r\n   * _no offical description_\r\n   */\r\n  proposalId: string | null\r\n}\r\n\r\nexport type Txs = Tx[]\r\n\r\nexport type TxSide = 'RECEIVE' | 'SEND'\r\n\r\n/**\r\n * Type of transactions\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#apiv1transactions\r\n */\r\nexport type TxType =\r\n  | 'NEW_ORDER'\r\n  | 'ISSUE_TOKEN'\r\n  | 'BURN_TOKEN'\r\n  | 'LIST_TOKEN'\r\n  | 'CANCEL_ORDER'\r\n  | 'FREEZE_TOKEN'\r\n  | 'UN_FREEZE_TOKEN'\r\n  | 'TRANSFER'\r\n  | 'PROPOSAL'\r\n  | 'VOTE'\r\n  | 'MINT'\r\n  | 'DEPOSIT'\r\n  | 'CREATE_VALIDATOR'\r\n  | 'REMOVE_VALIDATOR'\r\n  | 'TIME_LOCK'\r\n  | 'TIME_UNLOCK'\r\n  | 'TIME_RELOCK'\r\n  | 'SET_ACCOUNT_FLAG'\r\n  | 'HTL_TRANSFER'\r\n  | 'CLAIM_HTL'\r\n  | 'DEPOSIT_HTL'\r\n  | 'REFUND_HTL'\r\n\r\n/**\r\n * Parameters for `/api/v1/transactions` endpoint\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#apiv1transactions\r\n */\r\nexport type GetTxsParams = {\r\n  address?: string\r\n  blockHeight?: number\r\n  endTime?: number\r\n  limit?: number\r\n  offset?: number\r\n  side?: TxSide\r\n  startTime?: number\r\n  txAsset?: string\r\n  txType?: TxType\r\n}\r\n\r\nexport type VaultTxParams = {\r\n  addressFrom?: Address\r\n  addressTo: Address\r\n  amount: BigSource\r\n  asset: string\r\n  memo: string\r\n}\r\nexport type NormalTxParams = { addressFrom?: Address; addressTo: Address; amount: BigSource; asset: string }\r\nexport type GetMarketsParams = { limit?: number; offset?: number }\r\n/**\r\n * OrderList\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#orderlist\r\n */\r\nexport type OrderList = {\r\n  /**\r\n   * total sum of orders\r\n   */\r\n  total: number\r\n  /**\r\n   * List of orders\r\n   */\r\n  order: [Order]\r\n}\r\n\r\n/**\r\n * Order status as part of an order\r\n * See description of Order.status for more detail https://docs.binance.org/api-reference/dex-api/paths.html#order\r\n */\r\nexport enum OrderStatus {\r\n  Ack = 'Ack',\r\n  PartialFill = 'PartialFill',\r\n  IocNoFill = 'IocNoFill',\r\n  FullyFill = 'FullyFill',\r\n  Canceled = 'Canceled',\r\n  Expired = 'Expired',\r\n  FailedBlocking = 'FailedBlocking',\r\n  FailedMatching = 'FailedMatching',\r\n  IocExpire = 'IocExpire',\r\n}\r\n\r\n/**\r\n * Order\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#order\r\n */\r\nexport type Order = {\r\n  /**\r\n   * total amount of trades that have made\r\n   */\r\n  cumulateQuantity: string\r\n  /**\r\n   * trading fee on the latest updated block of this order. Multiple assets are split by semicolon.\r\n   */\r\n  fee: string\r\n  /**\r\n   * price of last execution\r\n   */\r\n  lastExecutedPrice: string\r\n  /**\r\n   * quantity of last execution\r\n   */\r\n  lastExecutedQuantity: string\r\n  /**\r\n   * time of order creation\r\n   */\r\n  orderCreateTime: number\r\n  /**\r\n   * Order ID\r\n   */\r\n  orderId: string\r\n  /**\r\n   * order issuer\r\n   */\r\n  owner: string\r\n  /**\r\n   * order price\r\n   */\r\n  price: string\r\n  /**\r\n   * order quantity\r\n   */\r\n  quantity: number\r\n  /**\r\n   * 1 for buy and 2 for sell\r\n   */\r\n  side: number\r\n  /**\r\n   * Order status\r\n   */\r\n  status: OrderStatus\r\n  /**\r\n   * trading pair symbol\r\n   */\r\n  symbol: string\r\n  /**\r\n   * 1 for Good Till Expire(GTE) order and 3 for Immediate Or Cancel (IOC)\r\n   */\r\n  timeInForce: number\r\n  /**\r\n   * trade ID\r\n   */\r\n  tradeId: string\r\n  /**\r\n   * hash of transaction\r\n   */\r\n  transactionHash: string\r\n  /**\r\n   * time of latest order update, for example, cancel, expire\r\n   */\r\n  transactionTime: number\r\n  /**\r\n   * only 2 is available for now, meaning limit order\r\n   */\r\n  type: string\r\n}\r\n\r\n/**\r\n * Balance\r\n * @see https://docs.binance.org/api-reference/dex-api/paths.html#balance\r\n */\r\nexport type Balance = {\r\n  /**\r\n   * asset symbol, e.g. BNB\r\n   */\r\n  symbol: string\r\n  /**\r\n   * In decimal form, e.g. 0.00000000\r\n   */\r\n  free: string\r\n  /**\r\n   * In decimal form, e.g. 0.00000000\r\n   */\r\n  locked: string\r\n  /**\r\n   * In decimal form, e.g. 0.00000000\r\n   */\r\n  frozen: string\r\n}\r\n\r\nexport type Balances = Balance[]\r\n\r\nexport type Transfer = {\r\n  code: number\r\n  hash: string\r\n  log: string\r\n  ok: boolean\r\n}\r\n\r\nexport type Transfers = Transfer[]\r\n/**\r\n * Result of  `bncClient.transfer(...)`\r\n * to transfer tokens from one address to another.\r\n * See https://github.com/binance-chain/javascript-sdk/blob/master/docs/api-docs/classes/bncclient.md#transfer\r\n * */\r\nexport type TransferResult = { result?: Transfers }\r\n\r\nexport type Network = keyof typeof NETWORK_PREFIX_MAPPING\r\n\r\nexport type Prefix = typeof NETWORK_PREFIX_MAPPING[Network]\r\n\r\nexport type AminoWrapping<T> = {\r\n  type: string\r\n  value: T\r\n}\r\n\r\nexport type StdTransaction = {\r\n  msg: Array<AminoWrapping<Msg>>\r\n  signatures: Array<StdSignature>\r\n  memo: string\r\n  source: number\r\n  data?: Buffer | null | string\r\n}\r\n\r\nexport type TransactionResult = {\r\n  hash: string\r\n  log: string\r\n  data?: string\r\n  height: string\r\n  code: number\r\n  tx: AminoWrapping<StdTransaction>\r\n}\r\n","/**\r\n * Type definitions for data of Binance WebSocket Streams\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html\r\n *\r\n */\r\n\r\nexport type Asset = {\r\n  /**\r\n   * Asset symbol\r\n   */\r\n  a: string\r\n  /**\r\n   * Asset value\r\n   */\r\n  A: string\r\n}\r\n\r\nexport type Assets = Asset[]\r\n\r\n/**\r\n * Event type of WS streams\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html\r\n */\r\nexport type WSEvent<T> = {\r\n  /**\r\n   * Name of the event\r\n   */\r\n  stream: string\r\n  /**\r\n   * Event payload\r\n   */\r\n  data?: T\r\n}\r\n\r\n/**\r\n * Payload of a order event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#1-orders\r\n */\r\nexport type Order = {\r\n  // Event type\r\n  e: string\r\n  // Event height\r\n  E: number\r\n  // Symbol\r\n  s: string\r\n  // Side, 1 for Buy; 2 for Sell\r\n  S: number\r\n  // Order type, 2 for LIMIT (only)\r\n  o: number\r\n  // Time in force,  1 for Good Till Expire (GTE); 3 for Immediate Or Cancel (IOC)\r\n  f: number\r\n  // Order quantity\r\n  q: string\r\n  // Order price\r\n  p: string\r\n  // Current execution type\r\n  x: string\r\n  // Current order status, possible values Ack, Canceled, Expired, IocNoFill, PartialFill, FullyFill, FailedBlocking, FailedMatching, Unknown\r\n  X: string\r\n  // Order ID\r\n  i: string\r\n  // Last executed quantity\r\n  l: string\r\n  // Cumulative filled quantity\r\n  z: string\r\n  // Last executed price\r\n  L: string\r\n  // Commission amount for all user trades within a given block. Fees will be displayed with each order but will be charged once.\r\n  // Fee can be composed of a single symbol, ex: \"10000BNB\"\r\n  // or multiple symbols if the available \"BNB\" balance is not enough to cover the whole fees, ex: \"1.00000000BNB;0.00001000BTC;0.00050000ETH\"\r\n  n: string\r\n  // Transaction time\r\n  T: number\r\n  // Trade ID\r\n  t: string\r\n  // Order creation time\r\n  O: number\r\n}\r\n\r\nexport type Orders = Order[]\r\n\r\n/**\r\n * Orders event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#1-orders\r\n */\r\nexport type OrdersEvent = WSEvent<Orders>\r\n\r\nexport type Balance = {\r\n  // Asset\r\n  a: string\r\n  // Free amount\r\n  f: string\r\n  // Locked amount\r\n  l: string\r\n  // Frozen amount\r\n  r: string\r\n}\r\n\r\nexport type Balances = Balance[]\r\n\r\nexport type Account = {\r\n  // Event type\r\n  e: string\r\n  // Event height\r\n  E: number\r\n  // balances\r\n  B: Balances\r\n}\r\n\r\nexport type Accounts = Account[]\r\n\r\n/**\r\n * Accounts event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#2-account\r\n */\r\nexport type AccountsEvent = WSEvent<Accounts>\r\n\r\nexport type AccountTrade = {\r\n  /**\r\n   * Receiver address\r\n   */\r\n  o: string\r\n  /**\r\n   * Asset to trade\r\n   */\r\n  c: Assets\r\n}\r\n\r\nexport type AccountTrades = AccountTrade[]\r\n\r\n/**\r\n * Payload of a transfer event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#3-transfer\r\n */\r\nexport type Transfer = {\r\n  /**\r\n   * Event type\r\n   */\r\n  e: string\r\n  /**\r\n   * Event heihgt\r\n   */\r\n  E: number\r\n  /**\r\n   * Tx hash\r\n   */\r\n  H: string\r\n  /**\r\n   * Memo\r\n   */\r\n  M: string\r\n  /**\r\n   * Sender address\r\n   */\r\n  f: string\r\n  t: AccountTrades\r\n}\r\n\r\n/**\r\n * Transfer event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#3-transfer\r\n */\r\nexport type TransferEvent = WSEvent<Transfer>\r\n\r\n/**\r\n * Taker (as part of {@link Trade})\r\n */\r\nexport enum Taker {\r\n  UNKNOWN,\r\n  SELL_TAKER,\r\n  BUY_TAKER,\r\n  BUY_SURPLUS,\r\n  SELL_SURPLUS,\r\n  NEUTRAL,\r\n}\r\n\r\n/**\r\n * Trade event payload\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#4-trades\r\n */\r\nexport type Trade = {\r\n  // Event type\r\n  e: string // 'trade'\r\n  // Event height\r\n  E: number // 123456789\r\n  // Symbol\r\n  s: string // 'BNB_BTC'\r\n  // Trade ID\r\n  t: string // '12345'\r\n  // Price\r\n  p: string // '0.001'\r\n  // Quantity\r\n  q: string // '100'\r\n  // Buyer order ID\r\n  b: string // '88'\r\n  // Seller order ID\r\n  a: string // '50'\r\n  // Trade time\r\n  T: number // 123456785\r\n  // SellerAddress\r\n  sa: string // 'bnb1me5u083m2spzt8pw8vunprnctc8syy64hegrcp'\r\n  // BuyerAddress\r\n  ba: string // 'bnb1kdr00ydr8xj3ydcd3a8ej2xxn8lkuja7mdunr5'\r\n  // takertype 0: Unknown 1: SellTaker 2: BuyTaker 3: BuySurplus 4: SellSurplus 5: Neutral\r\n  tt: Taker\r\n}\r\n\r\n/**\r\n * Trades event payload\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#4-trades\r\n */\r\nexport type Trades = Trade\r\n\r\n/**\r\n * Trade event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#4-trades\r\n */\r\nexport type TradesEvent = WSEvent<Trades>\r\n\r\nexport type Kline = {\r\n  // Kline start time\r\n  t: number\r\n  // Kline close time\r\n  T: number\r\n  // Symbol\r\n  s: string\r\n  // Interval\r\n  i: string\r\n  // First trade ID\r\n  f: string\r\n  // Last trade ID\r\n  L: string\r\n  // Open price\r\n  o: string\r\n  // Close price\r\n  c: string\r\n  // High price\r\n  h: string\r\n  // Low price\r\n  l: string\r\n  // Base asset volume\r\n  v: string\r\n  // Number of trades\r\n  n: number\r\n  // Is this kline closed?\r\n  x: boolean\r\n  // Quote asset volume\r\n  q: string\r\n}\r\n\r\nexport type KlineData = {\r\n  // Event type\r\n  e: string\r\n  // Event time\r\n  E: number\r\n  // Symbol\r\n  s: string\r\n  k: Kline\r\n}\r\n\r\n/**\r\n * Kline/Candlestick event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#7-klinecandlestick-streams\r\n */\r\nexport type KlineDataEvent = WSEvent<KlineData>\r\n\r\n/**\r\n * Payload of symbol ticker event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#8-individual-symbol-ticker-streams\r\n */\r\nexport type SymbolTicker = {\r\n  // Event type\r\n  e: string\r\n  // Event time\r\n  E: number\r\n  // Symbol\r\n  s: string\r\n  // Price change\r\n  p: string\r\n  // Price change percent\r\n  P: string\r\n  // Weighted average price\r\n  w: string\r\n  // Previous day's close price\r\n  x: string\r\n  // Current day's close price\r\n  c: string\r\n  // Close trade's quantity\r\n  Q: string\r\n  // Best bid price\r\n  b: string\r\n  // Best bid quantity\r\n  B: string\r\n  // Best ask price\r\n  a: string\r\n  // Best ask quantity\r\n  A: string\r\n  // Open price\r\n  o: string\r\n  // High price\r\n  h: string\r\n  // Low price\r\n  l: string\r\n  // Total traded base asset volume\r\n  v: string\r\n  // Total traded quote asset volume\r\n  q: string\r\n  // Statistics open time\r\n  O: number\r\n  // Statistics close time\r\n  C: number\r\n  // First trade ID\r\n  F: string\r\n  // Last trade Id\r\n  L: string\r\n  // Total number of trades\r\n  n: number\r\n}\r\n\r\n/**\r\n * Symbol ticker event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#8-individual-symbol-ticker-streams\r\n */\r\nexport type SymbolTickerEvent = WSEvent<SymbolTicker>\r\n\r\nexport type SymbolTickers = SymbolTicker[]\r\n\r\n/**\r\n * Symbol tickers event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#9-all-symbols-ticker-streams\r\n */\r\nexport type SymbolTickersEvent = WSEvent<SymbolTickers>\r\n\r\nexport type MiniTicker = {\r\n  // Event type\r\n  e: string\r\n  // Event time\r\n  E: number\r\n  // Symbol\r\n  s: string\r\n  // Current day's close price\r\n  c: string\r\n  // Open price\r\n  o: string\r\n  // High price\r\n  h: string\r\n  // Low price\r\n  l: string\r\n  // Total traded base asset volume\r\n  v: string\r\n  // Total traded quote asset volume\r\n  q: string\r\n}\r\n\r\n/**\r\n * Payload of a mini ticker event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#10-individual-symbol-mini-ticker-streams\r\n */\r\nexport type MiniTickerEvent = WSEvent<MiniTicker>\r\n\r\nexport type MiniTickers = MiniTicker[]\r\n\r\n/**\r\n * Payload of a mini tickers event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#10-individual-symbol-mini-ticker-streams\r\n */\r\n\r\nexport type MiniTickersEvent = WSEvent<MiniTickers>\r\n\r\nexport type BlockHeight = { h: number }\r\n\r\n/**\r\n * Payload of block height event\r\n * @see https://docs.binance.org/api-reference/dex-api/ws-streams.html#12-blockheight\r\n */\r\nexport type BlockHeightEvent = WSEvent<BlockHeight>\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 584;","export { FancyButton } from './FancyButton'\r\nexport * from './types'\r\n","import React from 'react'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { IconButton } from 'components/UIElements'\r\n\r\nexport const ExternalLink = ({\r\n  link,\r\n  children,\r\n}: {\r\n  link: string\r\n  children: React.ReactChild\r\n}) => (\r\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n    {children}\r\n  </a>\r\n)\r\n\r\nexport const ExternalButtonLink = ({\r\n  link,\r\n  children,\r\n}: {\r\n  link: string\r\n  children: React.ReactChild\r\n}) => (\r\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n    <IconButton>{children}</IconButton>\r\n  </a>\r\n)\r\n\r\nexport const ButtonLink = ({\r\n  to,\r\n  children,\r\n}: {\r\n  to: string\r\n  children: React.ReactChild\r\n}) => (\r\n  <Link to={to}>\r\n    <IconButton>{children}</IconButton>\r\n  </Link>\r\n)\r\n","export const truncateAddress = (addr: string) => {\r\n  if (addr && addr.length > 9) {\r\n    const first = addr.substr(0, 6)\r\n    const last = addr.substr(addr.length - 3, 3)\r\n    return `${first}...${last}`\r\n  }\r\n  return addr\r\n}\r\n","import { Pagination } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Label } from '../../UIElements/Label'\r\n\r\nexport const StyledText = styled(Label)`\r\n  font-size: 14px;\r\n  color: ${palette('text', 1)};\r\n  white-space: nowrap;\r\n  text-transform: lowercase;\r\n`\r\n\r\nexport const StyledTx = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nexport const StyledLink = styled.a`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    font-weight: bold;\r\n  }\r\n`\r\n\r\nexport const StyledLinkText = styled(Label)`\r\n  margin-right: 10px;\r\n  font-size: 14px;\r\n`\r\n\r\nexport const TransactionWrapper = styled.div`\r\n  padding: 20px 0px;\r\n`\r\n\r\nexport const StyledPagination = styled(Pagination)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px 0;\r\n\r\n  li {\r\n    a.ant-pagination-item-link {\r\n      transition: none;\r\n    }\r\n  }\r\n\r\n  li.ant-pagination-item.ant-pagination-item-active {\r\n    border-color: ${palette('primary', 0)};\r\n    a {\r\n      color: ${palette('primary', 0)};\r\n    }\r\n  }\r\n\r\n  li.ant-pagination-item {\r\n    background: ${palette('background', 1)};\r\n    border-color: ${palette('gray', 0)};\r\n    a {\r\n      color: ${palette('text', 0)};\r\n    }\r\n\r\n    &:hover {\r\n      border-color: ${palette('primary', 0)};\r\n      a {\r\n        color: ${palette('primary', 0)};\r\n      }\r\n    }\r\n  }\r\n\r\n  .ant-pagination-item-link {\r\n    background: ${palette('background', 1)};\r\n    border-color: ${palette('gray', 0)};\r\n    color: ${palette('text', 0)};\r\n    &:hover {\r\n      border-color: ${palette('primary', 0)};\r\n      color: ${palette('primary', 0)};\r\n    }\r\n  }\r\n\r\n  li.ant-pagination-prev,\r\n  li.ant-pagination-next {\r\n    a {\r\n      background: ${palette('background', 1)};\r\n      border-color: ${palette('gray', 0)};\r\n      color: ${palette('text', 0)};\r\n      &:hover {\r\n        border-color: ${palette('primary', 0)};\r\n        color: ${palette('primary', 0)};\r\n      }\r\n    }\r\n  }\r\n\r\n  .anticon.ant-pagination-item-link-icon {\r\n    color: ${palette('primary', 0)};\r\n  }\r\n\r\n  .ant-select-dropdown {\r\n    background: ${palette('background', 1)};\r\n    color: ${palette('text', 0)};\r\n    .ant-select-item {\r\n      color: ${palette('text', 0)};\r\n      &.ant-select-item-option-active {\r\n        background: ${palette('background', 2)};\r\n        color: ${palette('primary', 0)};\r\n      }\r\n    }\r\n  }\r\n\r\n  .ant-select.ant-pagination-options-size-changer {\r\n    .ant-select-selector {\r\n      background: ${palette('background', 1)};\r\n      border-color: ${palette('gray', 0)};\r\n      color: ${palette('text', 0)};\r\n      transition: none;\r\n    }\r\n    svg {\r\n      path {\r\n        fill: ${palette('text', 0)};\r\n      }\r\n    }\r\n\r\n    &:hover {\r\n      .ant-select-selector {\r\n        border-color: ${palette('primary', 0)};\r\n        color: ${palette('primary', 0)};\r\n      }\r\n      svg {\r\n        path {\r\n          fill: ${palette('primary', 0)};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","/* eslint-disable no-underscore-dangle */\r\nimport React, { useState, useCallback, useMemo, useEffect } from 'react'\r\n\r\nimport { LinkOutlined } from '@ant-design/icons'\r\nimport { THORChain } from '@xchainjs/xchain-util'\r\nimport { Grid, Tag } from 'antd'\r\nimport { ColumnType } from 'antd/lib/table'\r\nimport { ActionTypeEnum, ActionType, Action, Transaction } from 'midgard-sdk'\r\nimport moment from 'moment'\r\nimport { Amount, Asset } from 'multichain-sdk'\r\nimport { FixmeType } from 'types'\r\n\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nimport { truncateAddress } from 'helpers/string'\r\n\r\nimport { TX_PUBLIC_PAGE_LIMIT } from 'settings/constants'\r\n\r\nimport { Label } from '../../UIElements/Label'\r\nimport { Table } from '../../UIElements/Table'\r\nimport {\r\n  StyledTx,\r\n  StyledText,\r\n  StyledLink,\r\n  StyledLinkText,\r\n  TransactionWrapper,\r\n  StyledPagination,\r\n} from './TxTable.style'\r\n\r\ntype Column = 'address' | 'date' | 'type' | 'in' | 'out'\r\n\r\nconst tags: Record<ActionTypeEnum, string> = {\r\n  swap: '#2db7f5',\r\n  addLiquidity: '#87d068',\r\n  withdraw: '#f50',\r\n  donate: '#2db7f5',\r\n  refund: '#f50',\r\n}\r\n\r\ntype Props = {\r\n  address?: string\r\n  txId?: string\r\n  asset?: string\r\n  type?: ActionType\r\n  limit?: number\r\n}\r\n\r\nexport const TxTable: React.FC<Props> = React.memo(\r\n  (props: Props): JSX.Element => {\r\n    const { address, txId, asset, type, limit = TX_PUBLIC_PAGE_LIMIT } = props\r\n\r\n    const { getTxData, txData, txDataLoading } = useMidgard()\r\n\r\n    const isDesktopView = Grid.useBreakpoint()?.lg ?? false\r\n    const [currentTxPage, setCurrentTxPage] = useState<number>(1)\r\n\r\n    useEffect(() => {\r\n      const offset = (currentTxPage - 1) * limit\r\n\r\n      getTxData({\r\n        address,\r\n        txId,\r\n        asset,\r\n        type,\r\n        offset,\r\n      })\r\n    }, [address, txId, asset, type, limit, currentTxPage, getTxData])\r\n\r\n    const renderTxAssets = useCallback((tx: Transaction[]) => {\r\n      if (tx.length === 0) {\r\n        return <StyledLinkText>N/A</StyledLinkText>\r\n      }\r\n\r\n      return (\r\n        <StyledTx>\r\n          {tx.map((txObj: Transaction, index: number) => {\r\n            const txHash = txObj.txID\r\n            const coinAsset = txObj.coins?.[0]\r\n\r\n            if (!coinAsset) {\r\n              const txUrl = multichain.getExplorerTxUrl(THORChain, txHash)\r\n\r\n              return (\r\n                <StyledLink\r\n                  href={txUrl}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  key={index}\r\n                >\r\n                  <LinkOutlined />\r\n                </StyledLink>\r\n              )\r\n            }\r\n\r\n            const { asset: assetName, amount } = coinAsset\r\n            const assetObj = Asset.fromAssetString(assetName)\r\n            const assetValue = assetObj?.ticker ?? 'N/A'\r\n            const amountValue = Amount.fromMidgard(amount).toFixed(3)\r\n\r\n            const txUrl = assetObj\r\n              ? multichain.getExplorerTxUrl(assetObj.chain, txHash)\r\n              : '#'\r\n\r\n            const displayLabel = `${assetValue}: ${amountValue}`\r\n\r\n            return (\r\n              <>\r\n                <StyledLink\r\n                  href={txUrl}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  key={index}\r\n                >\r\n                  <LinkOutlined />\r\n                  <StyledLinkText>{displayLabel}</StyledLinkText>\r\n                </StyledLink>\r\n              </>\r\n            )\r\n          })}\r\n        </StyledTx>\r\n      )\r\n    }, [])\r\n\r\n    const getColumnRenderer = useCallback((): Record<\r\n      Column,\r\n      (value: FixmeType, row: Action) => JSX.Element\r\n    > => {\r\n      return {\r\n        address: (_, row) => {\r\n          return (\r\n            <StyledText>\r\n              {truncateAddress(row?.in?.[0]?.address ?? '')}\r\n            </StyledText>\r\n          )\r\n        },\r\n        type: (_, row) => {\r\n          return (\r\n            <Tag color={tags[row?.type ?? ActionTypeEnum.Swap]}>{row.type}</Tag>\r\n          )\r\n        },\r\n        in: (_, row) => renderTxAssets(row.in),\r\n        out: (_, row) => renderTxAssets(row.out),\r\n        date: (_, row) => {\r\n          return (\r\n            <span>\r\n              {moment.unix(Number(row?.date ?? 0) / 1000000000).fromNow()}\r\n            </span>\r\n          )\r\n        },\r\n      }\r\n    }, [renderTxAssets])\r\n\r\n    const columnRenders = useMemo(() => getColumnRenderer(), [\r\n      getColumnRenderer,\r\n    ])\r\n\r\n    const addressColumn: ColumnType<Action> = useMemo(\r\n      () => ({\r\n        key: 'address',\r\n        title: 'Address',\r\n        dataIndex: 'address',\r\n        align: 'left',\r\n        render: columnRenders.address,\r\n      }),\r\n      [columnRenders.address],\r\n    )\r\n\r\n    const dateColumn: ColumnType<Action> = useMemo(\r\n      () => ({\r\n        key: 'date',\r\n        title: 'Time',\r\n        dataIndex: 'date',\r\n        align: 'right',\r\n        render: columnRenders.date,\r\n      }),\r\n      [columnRenders.date],\r\n    )\r\n\r\n    const typeColumn: ColumnType<Action> = useMemo(\r\n      () => ({\r\n        key: 'type',\r\n        title: 'type',\r\n        dataIndex: 'type',\r\n        align: 'center',\r\n        render: columnRenders.type,\r\n      }),\r\n      [columnRenders.type],\r\n    )\r\n\r\n    const inColumn: ColumnType<Action> = useMemo(\r\n      () => ({\r\n        key: 'in',\r\n        title: 'In',\r\n        dataIndex: 'in',\r\n        align: 'left',\r\n        render: columnRenders.in,\r\n      }),\r\n      [columnRenders.in],\r\n    )\r\n\r\n    const outColumn: ColumnType<Action> = useMemo(\r\n      () => ({\r\n        key: 'out',\r\n        title: 'Out',\r\n        dataIndex: 'out',\r\n        align: 'left',\r\n        render: columnRenders.out,\r\n      }),\r\n      [columnRenders.out],\r\n    )\r\n\r\n    const desktopColumns = useMemo(\r\n      () => [addressColumn, typeColumn, inColumn, outColumn, dateColumn],\r\n      [addressColumn, typeColumn, inColumn, outColumn, dateColumn],\r\n    )\r\n\r\n    const mobileColumns = useMemo(\r\n      () => [addressColumn, typeColumn, dateColumn],\r\n      [addressColumn, typeColumn, dateColumn],\r\n    )\r\n\r\n    return (\r\n      <TransactionWrapper>\r\n        <Label size=\"big\" color=\"primary\">\r\n          Transactions ({txData ? txData.count : 0})\r\n        </Label>\r\n        <Table\r\n          loading={txDataLoading}\r\n          columns={isDesktopView ? desktopColumns : mobileColumns}\r\n          dataSource={txData ? txData.actions : []}\r\n          size=\"small\"\r\n        />\r\n        <StyledPagination\r\n          defaultCurrent={1}\r\n          current={currentTxPage}\r\n          total={txData ? Number(txData.count) : 0}\r\n          showSizeChanger={false}\r\n          onChange={setCurrentTxPage}\r\n        />\r\n      </TransactionWrapper>\r\n    )\r\n  },\r\n)\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport type RoundValue = 'left' | 'right'\r\n\r\nexport const TxStatusWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n\r\n  ${(props: { round: RoundValue }) =>\r\n    props.round === 'right'\r\n      ? `\r\n      border-top-right-radius: 20px;\r\n      border-bottom-right-radius: 20px;\r\n      `\r\n      : `\r\n      border-top-left-radius: 20px;\r\n      border-bottom-left-radius: 20px;\r\n  `};\r\n  background: ${palette('gray', 1)};\r\n  text-transform: uppercase;\r\n\r\n  height: 20px;\r\n  padding: 8px 8px;\r\n  ${media.sm`\r\n    height: 30px;\r\n    padding: 10px 18px;\r\n  `}\r\n\r\n  .txStatus-type {\r\n    font-size: 10px;\r\n    letter-spacing: 0.7px;\r\n    padding-right: 6px;\r\n    color: ${palette('text', 2)};\r\n    ${media.sm`\r\n      font-size: 12px;\r\n      letter-spacing: 1px;\r\n      padding-right: 20px;\r\n    `}\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n`\r\n\r\nexport const TxStatusContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  text-transform: uppercase;\r\n\r\n  .txStatus-amount,\r\n  .txStatus-asset {\r\n    color: ${palette('text', 0)};\r\n    font-size: 13px;\r\n    letter-spacing: 0.7px;\r\n    padding: 0 2px;\r\n    ${media.sm`\r\n      font-size: 15px;\r\n      letter-spacing: 1px;\r\n      padding: 0 2px;\r\n    `}\r\n  }\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n  }\r\n`\r\n\r\nexport const Seperator = styled.div`\r\n  width: 1px;\r\n  height: 20px;\r\n  border-left: 1px solid ${palette('gray', 2)};\r\n  margin: 0 2px;\r\n  ${media.sm`\r\n    margin: 0 15px;\r\n  `}\r\n`\r\n","import React from 'react'\r\n\r\nimport { Transaction } from 'midgard-sdk'\r\nimport { Asset, Amount } from 'multichain-sdk'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nimport { Label } from '../../UIElements/Label'\r\nimport { TxStatusWrapper, TxStatusContent, Seperator } from './TxStatus.style'\r\n\r\nexport type RoundValue = 'left' | 'right'\r\n\r\nexport type Props = {\r\n  type: string\r\n  data: Transaction[]\r\n  round: RoundValue\r\n}\r\n\r\nexport const TxStatus: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const { type, data, round } = props\r\n\r\n  return (\r\n    <TxStatusWrapper className=\"txStatus-wrapper\" round={round}>\r\n      <p className=\"txStatus-type\">{type}</p>\r\n      {data.map((txObj: Transaction, index: number) => {\r\n        const txHash = txObj.txID\r\n        const coinAsset = txObj.coins?.[0]\r\n\r\n        if (!coinAsset) {\r\n          return (\r\n            <TxStatusContent className=\"tx-status-content\" key={index}>\r\n              <Label color=\"gray\">N/A</Label>\r\n            </TxStatusContent>\r\n          )\r\n        }\r\n\r\n        const { asset: assetName, amount } = coinAsset\r\n        const assetObj = Asset.fromAssetString(assetName)\r\n        const assetValue = assetObj?.ticker ?? 'N/A'\r\n        const amountValue = Amount.fromMidgard(amount).toFixed(3)\r\n\r\n        const txUrl = assetObj\r\n          ? multichain.getExplorerTxUrl(assetObj.chain, txHash)\r\n          : '#'\r\n\r\n        return (\r\n          <a href={txUrl} target=\"_blank\" rel=\"noopener noreferrer\" key={index}>\r\n            <TxStatusContent className=\"tx-status-content\" key={index}>\r\n              <p className=\"txStatus-amount\">{amountValue}</p>\r\n              <p className=\"txStatus-asset\">{assetValue}</p>\r\n              {index < data.length - 1 ? <Seperator /> : ''}\r\n            </TxStatusContent>\r\n          </a>\r\n        )\r\n      })}\r\n    </TxStatusWrapper>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport const TxInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${media.sm`\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n  `}\r\n\r\n  .txInfo-main-data,\r\n  .txInfo-extra-data {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .txInfo-extra-data {\r\n    padding: 10px 0;\r\n  }\r\n\r\n  .tx-event-label {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    font-size: 11px;\r\n    text-transform: uppercase;\r\n\r\n    ${media.sm`\r\n      font-size: 14px;\r\n    `}\r\n    &.left-margin {\r\n      margin-left: 4px;\r\n      ${media.sm`\r\n        margin-left: 30px;\r\n      `}\r\n    }\r\n\r\n    .tx-event-title {\r\n      font-weight: 600;\r\n      margin-right: 4px;\r\n      ${media.sm`\r\n        margin-right: 10px;\r\n      `}\r\n    }\r\n  }\r\n`\r\n\r\nexport const Seperator = styled.div`\r\n  width: 0px;\r\n  height: 20px;\r\n  margin: 0 6px;\r\n  border-left: 1px solid ${palette('gray', 1)};\r\n  ${media.sm`\r\n    height: 30px;\r\n    margin: 0 10px;\r\n  `}\r\n`\r\n\r\nexport const Dash = styled.div`\r\n  width: 0px;\r\n  border-left: 1px solid ${palette('gray', 1)};\r\n  height: 14px;\r\n  margin: 0 10px;\r\n  ${media.sm`\r\n    height: 20px;\r\n    margin: 0 20px;\r\n  `}\r\n`\r\n","import React from 'react'\r\n\r\nimport { ActionTypeEnum, Action } from 'midgard-sdk'\r\nimport { AmountType, Percent } from 'multichain-sdk'\r\n\r\nimport { TxStatus } from '../TxStatus'\r\nimport { TxInfoWrapper, Seperator, Dash } from './TxInfo.style'\r\n\r\ntype Props = {\r\n  data: Action\r\n}\r\n\r\nexport const TxInfo: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const {\r\n    data: { type, metadata, in: inData, out: outData },\r\n  } = props\r\n\r\n  // swap tx\r\n  const slipValueLabel = new Percent(\r\n    Number(metadata?.swap?.tradeSlip ?? 0) / 100,\r\n    AmountType.BASE_AMOUNT,\r\n  ).toFixed(3)\r\n\r\n  return (\r\n    <TxInfoWrapper className=\"txInfo-wrapper swap-tx\">\r\n      <div className=\"txInfo-main-data\">\r\n        <TxStatus type=\"in\" data={inData} round=\"left\" />\r\n        <Seperator />\r\n        <TxStatus type=\"out\" data={outData} round=\"right\" />\r\n      </div>\r\n      {type === ActionTypeEnum.Swap && (\r\n        <div className=\"txInfo-extra-data\">\r\n          <Dash />\r\n          <div className=\"tx-event-label\">\r\n            <p className=\"tx-event-title\">SLIP</p>\r\n            <p className=\"tx-event-value\">{slipValueLabel}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TxInfoWrapper>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport const TxLabelWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 20px;\r\n  font-size: 11px;\r\n  letter-spacing: 0.7px;\r\n  text-transform: uppercase;\r\n  color: ${palette('text', 0)};\r\n\r\n  ${media.sm`\r\n    height: 26px;\r\n    width: 150px;\r\n    font-size: 13px;\r\n    letter-spacing: 1px;\r\n  `}\r\n  p {\r\n    margin-right: 10px;\r\n    ${media.sm`\r\n      width: 100px;\r\n      text-align: right;\r\n      margin-right: 10px;\r\n    `}\r\n  }\r\n\r\n  .tx-label-icon {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    width: 20px;\r\n    height: 20px;\r\n    ${media.sm`\r\n      width: 40px;\r\n    `}\r\n    svg {\r\n      height: 20px;\r\n      ${media.sm`\r\n        height: auto;\r\n      `}\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport {\r\n  SwapOutlined,\r\n  DoubleRightOutlined,\r\n  ImportOutlined,\r\n} from '@ant-design/icons'\r\nimport { ActionTypeEnum } from 'midgard-sdk'\r\n\r\nimport { TxLabelWrapper } from './TxLabel.style'\r\n\r\ntype Props = {\r\n  type?: ActionTypeEnum\r\n}\r\n\r\nexport const TxLabel: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const { type } = props\r\n  let label = ''\r\n  let TxIcon = <SwapOutlined />\r\n\r\n  if (type === ActionTypeEnum.Swap) {\r\n    label = 'swap'\r\n    TxIcon = <SwapOutlined />\r\n  }\r\n\r\n  if (type === ActionTypeEnum.Withdraw) {\r\n    label = 'withdraw'\r\n    TxIcon = <ImportOutlined />\r\n  }\r\n\r\n  if (type === ActionTypeEnum.AddLiquidity) {\r\n    label = 'add liquidity'\r\n    TxIcon = <DoubleRightOutlined />\r\n  }\r\n\r\n  return (\r\n    <TxLabelWrapper className=\"txLabel-wrapper\">\r\n      <p>{label}</p>\r\n      <div className=\"tx-label-icon\">{TxIcon}</div>\r\n    </TxLabelWrapper>\r\n  )\r\n}\r\n","import { Menu as Unstyled } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nimport { Button } from '../../UIElements/Button'\r\n\r\nexport const Menu = styled(Unstyled)`\r\n  background: ${palette('background', 1)};\r\n  li {\r\n    color: ${palette('text', 0)};\r\n  }\r\n  svg {\r\n    color: ${palette('primary', 0)};\r\n  }\r\n\r\n  .ant-dropdown-menu-item-selected {\r\n    color: ${palette('text', 1)};\r\n    background: ${palette('secondary', 1)};\r\n  }\r\n  .ant-dropdown-menu-item:hover,\r\n  .ant-dropdown-menu-submenu-title:hover {\r\n    background: ${palette('secondary', 1)};\r\n  }\r\n`\r\n\r\nexport const DesktopButton = styled(Button)`\r\n  display: none !important;\r\n  ${media.sm`\r\n    display: flex !important;\r\n  `}\r\n`\r\n\r\nexport const MobileButton = styled(Button)`\r\n  display: flex;\r\n  width: 30px;\r\n  min-width: 30px !important;\r\n  padding: 0;\r\n  ${media.sm`\r\n    display: none !important;\r\n  `}\r\n`\r\n","import React, { useCallback, ReactNode } from 'react'\r\n\r\nimport {\r\n  DatabaseOutlined,\r\n  SwapOutlined,\r\n  DoubleRightOutlined,\r\n  ImportOutlined,\r\n  CaretDownOutlined,\r\n  FilterOutlined,\r\n} from '@ant-design/icons'\r\nimport { Dropdown } from 'antd'\r\nimport { ActionTypeEnum } from 'midgard-sdk'\r\n\r\nimport { Menu, DesktopButton, MobileButton } from './TxFilter.style'\r\n\r\nexport type FilterValue =\r\n  | ActionTypeEnum.Swap\r\n  | ActionTypeEnum.AddLiquidity\r\n  | ActionTypeEnum.Withdraw\r\n  | 'all'\r\n\r\ntype Props = {\r\n  value: string\r\n  onClick?: (key: string) => void\r\n}\r\n\r\ntype MenuItem = {\r\n  icon: ReactNode\r\n  title: string\r\n  key: FilterValue\r\n}\r\n\r\ntype MenuItems = MenuItem[]\r\n\r\nexport const TxFilter: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const { value, onClick } = props\r\n\r\n  const items: MenuItems = [\r\n    {\r\n      icon: <DatabaseOutlined />,\r\n      title: 'ALL',\r\n      key: 'all',\r\n    },\r\n    {\r\n      icon: <SwapOutlined />,\r\n      title: 'SWAP',\r\n      key: ActionTypeEnum.Swap,\r\n    },\r\n    {\r\n      icon: <DoubleRightOutlined />,\r\n      title: 'ADD LIQUIDITY',\r\n      key: ActionTypeEnum.AddLiquidity,\r\n    },\r\n    {\r\n      icon: <ImportOutlined />,\r\n      title: 'WITHDRAW',\r\n      key: ActionTypeEnum.Withdraw,\r\n    },\r\n  ]\r\n\r\n  const handleClickItem = useCallback(\r\n    ({ key }) => {\r\n      if (onClick) onClick(key)\r\n    },\r\n    [onClick],\r\n  )\r\n\r\n  const renderMenu = () => {\r\n    return (\r\n      <Menu\r\n        className=\"filterDropdown-menu-items\"\r\n        onClick={handleClickItem}\r\n        selectedKeys={[value]}\r\n      >\r\n        {items.map((item) => {\r\n          return (\r\n            <Menu.Item key={item.key}>\r\n              {item.icon} {item.title}\r\n            </Menu.Item>\r\n          )\r\n        })}\r\n      </Menu>\r\n    )\r\n  }\r\n\r\n  const menuLabel = value === ActionTypeEnum.Withdraw ? 'WITHDRAW' : value\r\n\r\n  return (\r\n    <Dropdown overlay={renderMenu()} trigger={['click']}>\r\n      <div className=\"dropdown-wrapper\">\r\n        <DesktopButton color=\"primary\" typevalue=\"ghost\">\r\n          {menuLabel} <CaretDownOutlined />\r\n        </DesktopButton>\r\n        <MobileButton color=\"primary\" typevalue=\"ghost\">\r\n          <FilterOutlined />\r\n        </MobileButton>\r\n      </div>\r\n    </Dropdown>\r\n  )\r\n}\r\n","import { useRef, useEffect } from 'react'\r\n\r\nexport const INACTIVE_INTERVAL = NaN\r\n\r\n/**\r\n * Custom hook for using `setTimeout`\r\n * Based on https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n * @param callback Callback called on each timeout\r\n * @param delay  Delay in ms\r\n */\r\nconst useTimeout = (\r\n  callback: () => void,\r\n  delay: number = INACTIVE_INTERVAL,\r\n) => {\r\n  const savedCallback = useRef(callback)\r\n\r\n  // Remember the latest function.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the timeout.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current()\r\n    }\r\n    if (!Number.isNaN(delay)) {\r\n      const id = setTimeout(tick, delay)\r\n      return () => clearTimeout(id)\r\n    }\r\n  }, [delay])\r\n}\r\n\r\nexport default useTimeout\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { FancyButton } from '../../UIElements'\r\n\r\nexport const Content = styled.div`\r\n  width: 100%;\r\n  flex-direction: column;\r\n\r\n  padding: 20px 20px;\r\n`\r\n\r\nexport const ModalIcon = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  color: ${palette('text', 2)};\r\n`\r\n\r\nexport const ModalData = styled.div`\r\n  margin-bottom: 10px;\r\n`\r\n\r\nexport const Button = styled(FancyButton)`\r\n  width: 100%;\r\n`\r\n","import React, { useState, useCallback } from 'react'\r\n\r\nimport { LockOutlined } from '@ant-design/icons'\r\nimport { delay } from '@xchainjs/xchain-util'\r\nimport { Form } from 'antd'\r\n\r\nimport { useWallet } from 'redux/wallet/hooks'\r\n\r\nimport useTimeout from 'hooks/useTimeout'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nimport { Overlay, Input } from '../../UIElements'\r\nimport * as Styled from './ConfirmModal.style'\r\n\r\nconst MODAL_DISMISS_TIME = 25 * 1000 // 25s\r\n\r\nexport type ConfirmModalProps = {\r\n  visible: boolean\r\n  onOk?: () => void\r\n  onCancel: () => void\r\n  children?: React.ReactNode\r\n}\r\n\r\nexport const ConfirmModal: React.FC<ConfirmModalProps> = (\r\n  props,\r\n): JSX.Element => {\r\n  const { visible, onOk, onCancel, children } = props\r\n\r\n  const { keystore, address } = useWallet()\r\n\r\n  const [password, setPassword] = useState('')\r\n  const [invalidPassword, setInvalidPassword] = useState(false)\r\n  const [validating, setValidating] = useState(false)\r\n\r\n  // dismiss modal after 25s\r\n  useTimeout(() => {\r\n    handleCancel()\r\n  }, MODAL_DISMISS_TIME)\r\n\r\n  const handleConfirm = useCallback(() => {\r\n    if (!onOk || !visible) {\r\n      return\r\n    }\r\n\r\n    onOk()\r\n  }, [onOk, visible])\r\n\r\n  const handleCancel = useCallback(() => {\r\n    if (onCancel) {\r\n      setPassword('')\r\n      setInvalidPassword(false)\r\n      setValidating(false)\r\n      onCancel()\r\n    }\r\n  }, [onCancel])\r\n\r\n  const onChangePasswordHandler = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value)\r\n      setInvalidPassword(false)\r\n    },\r\n    [setPassword, setInvalidPassword],\r\n  )\r\n\r\n  const handleOK = useCallback(async () => {\r\n    console.log(keystore, address)\r\n    if (!keystore || !address) return\r\n    setValidating(true)\r\n\r\n    try {\r\n      const isValid = multichain.validateKeystore(keystore, password, address)\r\n\r\n      if (isValid) {\r\n        // wait 100ms for settingup binance client\r\n\r\n        await delay(100)\r\n\r\n        handleConfirm()\r\n      } else {\r\n        setInvalidPassword(true)\r\n      }\r\n    } catch (error) {\r\n      setInvalidPassword(true)\r\n    }\r\n\r\n    setValidating(false)\r\n  }, [keystore, password, address, handleConfirm])\r\n\r\n  const renderModalContent = () => {\r\n    const modalIcon = (\r\n      <Styled.ModalIcon>\r\n        <LockOutlined />\r\n      </Styled.ModalIcon>\r\n    )\r\n\r\n    return (\r\n      <Form onFinish={handleOK} autoComplete=\"off\">\r\n        <Form.Item\r\n          className={invalidPassword ? 'has-error' : ''}\r\n          extra={validating ? 'Validating password ...' : ''}\r\n        >\r\n          <Input\r\n            data-test=\"password-confirmation-input\"\r\n            type=\"password\"\r\n            typevalue=\"ghost\"\r\n            sizevalue=\"big\"\r\n            value={password}\r\n            onChange={onChangePasswordHandler}\r\n            prefix={modalIcon}\r\n            autoComplete=\"new-password\"\r\n          />\r\n          {invalidPassword && (\r\n            <div className=\"ant-form-explain\">Password is wrong.</div>\r\n          )}\r\n        </Form.Item>\r\n        <Styled.Button>Confirm</Styled.Button>\r\n      </Form>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Overlay isOpen={visible} onDismiss={handleCancel}>\r\n      <Styled.Content>\r\n        {children && <Styled.ModalData>{children}</Styled.ModalData>}\r\n        {renderModalContent()}\r\n      </Styled.Content>\r\n    </Overlay>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport { Modal as UnstyledModal } from '../../UIElements'\r\n\r\nexport const Modal = styled(UnstyledModal)`\r\n  .ant-modal-body {\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nexport const ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  .label-wrapper {\r\n    padding: 20px 0;\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nimport { Label } from '../../UIElements'\r\n\r\nexport const Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  padding: 0 8px;\r\n  ${media.sm`\r\n    padding: 0 20px;\r\n  `}\r\n\r\n  margin-top: 10px;\r\n\r\n  .ant-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 300px;\r\n  padding: 10px 0;\r\n\r\n  .ant-btn {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nexport const FormLabel = styled(Label)`\r\n  margin-bottom: 10px;\r\n`\r\n\r\nexport const PasswordLabel = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n\r\n  svg {\r\n    color: ${palette('text', 0)};\r\n    margin-left: 4px;\r\n  }\r\n`\r\n\r\nexport const PasswordInput = styled.div`\r\n  padding-top: 20px;\r\n`\r\n\r\nexport const Footer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n\r\n  margin-top: 16px;\r\n`\r\n\r\nexport const FooterContent = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  a {\r\n    margin-right: 12px;\r\n    text-decoration: underline;\r\n  }\r\n`\r\n","import Keystore from './Keystore'\r\n\r\nexport default Keystore\r\n","import React, { useState, useCallback } from 'react'\r\n\r\nimport { FilePicker } from 'react-file-picker'\r\n\r\nimport {\r\n  QuestionCircleOutlined,\r\n  UploadOutlined,\r\n  CheckCircleTwoTone,\r\n} from '@ant-design/icons'\r\nimport { crypto } from '@binance-chain/javascript-sdk'\r\nimport { KeyStore } from '@binance-chain/javascript-sdk/lib/crypto'\r\nimport { Form, Tooltip } from 'antd'\r\nimport { Button, Input, Label } from 'components'\r\n\r\nimport { getPrefix } from 'services/binance'\r\nimport { multichain } from 'services/multichain'\r\n\r\nimport { config } from 'settings/config'\r\n\r\nimport * as Styled from './Keystore.style'\r\n\r\ntype Props = {\r\n  onConnect: (keystore: KeyStore, address: string) => void\r\n}\r\n\r\nconst KeystoreView = ({ onConnect }: Props) => {\r\n  const [keystore, setKeystore] = useState<KeyStore>()\r\n  const [password, setPassword] = useState<string>('')\r\n  const [invalideStatus, setInvalideStatus] = useState(false)\r\n  const [keystoreError, setKeystoreError] = useState('')\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  const onChangeFile = useCallback((file: Blob) => {\r\n    const reader = new FileReader()\r\n    const onLoadHandler = () => {\r\n      try {\r\n        const key = JSON.parse(reader.result as string)\r\n        if (!('version' in key) || !('crypto' in key)) {\r\n          setKeystoreError('Not a valid keystore file')\r\n        } else {\r\n          setKeystoreError('')\r\n          setKeystore(key)\r\n        }\r\n      } catch {\r\n        setKeystoreError('Not a valid json file')\r\n      }\r\n    }\r\n    reader.addEventListener('load', onLoadHandler)\r\n    reader.readAsText(file)\r\n    return () => {\r\n      reader.removeEventListener('load', onLoadHandler)\r\n    }\r\n  }, [])\r\n\r\n  const onErrorFile = useCallback((error: Error) => {\r\n    setKeystoreError(`Selecting a key file failed: ${error}`)\r\n  }, [])\r\n\r\n  const onPasswordChange = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setPassword(e.target.value)\r\n      setInvalideStatus(false)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const handleUnlock = useCallback(() => {\r\n    if (keystore) {\r\n      setProcessing(true)\r\n\r\n      try {\r\n        const privateKey = crypto.getPrivateKeyFromKeyStore(\r\n          JSON.stringify(keystore),\r\n          password,\r\n        )\r\n        const address = crypto.getAddressFromPrivateKey(\r\n          privateKey,\r\n          getPrefix(config.network),\r\n        )\r\n        // set private key for bnb chain\r\n        multichain.bnb.getClient().setAddress(address)\r\n\r\n        // clean up\r\n        setPassword('')\r\n        setKeystore(undefined)\r\n        setProcessing(false)\r\n\r\n        onConnect(keystore, address)\r\n      } catch (error) {\r\n        setProcessing(false)\r\n\r\n        setInvalideStatus(true)\r\n        console.error(error)\r\n      }\r\n    }\r\n  }, [keystore, password, onConnect])\r\n\r\n  const ready = password.length > 0 && !keystoreError && !processing\r\n\r\n  return (\r\n    <Styled.Container>\r\n      <Form onFinish={handleUnlock}>\r\n        <Styled.Content>\r\n          <Styled.FormLabel weight=\"bold\" color=\"normal\">\r\n            Please Select Keystore File\r\n          </Styled.FormLabel>\r\n          <FilePicker onChange={onChangeFile} onError={onErrorFile}>\r\n            <Button color=\"primary\" typevalue=\"outline\" fixedWidth={false}>\r\n              {keystore && !keystoreError && (\r\n                <CheckCircleTwoTone twoToneColor=\"#50E3C2\" />\r\n              )}\r\n              {(!keystore || keystoreError) && <UploadOutlined />}\r\n              Choose File to Upload\r\n            </Button>\r\n          </FilePicker>\r\n          {keystoreError && <Label color=\"error\">{keystoreError}</Label>}\r\n          <Styled.PasswordInput>\r\n            <Styled.PasswordLabel>\r\n              <Label weight=\"bold\" color=\"normal\">\r\n                Decryption password{' '}\r\n              </Label>\r\n              <Tooltip\r\n                title=\"This is the password used to decrypt your encrypted keystore file\"\r\n                placement=\"topLeft\"\r\n              >\r\n                <QuestionCircleOutlined />\r\n              </Tooltip>\r\n            </Styled.PasswordLabel>\r\n            <Input\r\n              onChange={onPasswordChange}\r\n              placeholder=\"Password\"\r\n              allowClear\r\n              disabled={!keystore}\r\n              type=\"password\"\r\n              sizevalue=\"big\"\r\n            />\r\n            {invalideStatus && <Label color=\"error\">Password is wrong.</Label>}\r\n          </Styled.PasswordInput>\r\n        </Styled.Content>\r\n        <Styled.Footer>\r\n          <Styled.FooterContent>\r\n            <a\r\n              href=\"https://www.binance.org/en/create\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <Label color=\"primary\">Create Wallet</Label>\r\n            </a>\r\n            <Button\r\n              htmlType=\"submit\"\r\n              onClick={handleUnlock}\r\n              disabled={!ready}\r\n              round\r\n              loading={processing}\r\n              fixedWidth={false}\r\n            >\r\n              Unlock Wallet\r\n            </Button>\r\n          </Styled.FooterContent>\r\n        </Styled.Footer>\r\n      </Form>\r\n    </Styled.Container>\r\n  )\r\n}\r\n\r\nexport default KeystoreView\r\n","import styled from 'styled-components/macro'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Panel } from '../Panel'\r\n\r\nexport const ConnectContainer = styled(Panel)`\r\n  border: 1px solid ${palette('gray', 0)};\r\n  border-radius: 14px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\r\n  padding-bottom: 24px;\r\n`\r\n\r\nexport const ConnectTabHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 4px 0;\r\n`\r\n\r\nexport const TabContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n","import WalletModal from './WalletModal'\r\n\r\nexport default WalletModal\r\n","import React, { useCallback } from 'react'\r\n\r\nimport { KeyStore as KeystoreType } from '@binance-chain/javascript-sdk/lib/crypto'\r\nimport { Overlay, Helmet } from 'components'\r\n\r\nimport { useWallet } from 'redux/wallet/hooks'\r\n\r\nimport KeystoreView from './Keystore'\r\nimport * as Styled from './WalletModal.style'\r\n\r\nconst ConnectView = () => {\r\n  const {\r\n    unlockWallet,\r\n    setIsConnectModalOpen,\r\n    isConnectModalOpen,\r\n  } = useWallet()\r\n\r\n  const handleConnect = useCallback(\r\n    async (keystore: KeystoreType, address: string) => {\r\n      await unlockWallet(keystore, address)\r\n\r\n      setIsConnectModalOpen(false)\r\n    },\r\n    [unlockWallet, setIsConnectModalOpen],\r\n  )\r\n\r\n  return (\r\n    <Overlay\r\n      isOpen={isConnectModalOpen}\r\n      onDismiss={() => setIsConnectModalOpen(false)}\r\n    >\r\n      <Styled.ConnectContainer>\r\n        <Helmet title=\"Connect Wallet\" content=\"Connect Wallet\" />\r\n        <Styled.TabContent>\r\n          <KeystoreView onConnect={handleConnect} />\r\n        </Styled.TabContent>\r\n      </Styled.ConnectContainer>\r\n    </Overlay>\r\n  )\r\n}\r\n\r\nexport default ConnectView\r\n","import { Layout as AntLayout } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nconst { Content } = AntLayout\r\n\r\nexport const LayoutWrapper = styled.div``\r\n\r\nexport const ContentWrapper = styled(Content)<{ transparent: boolean }>`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  background: ${(props) =>\r\n    props.transparent ? palette('background', 3) : palette('background', 3)};\r\n\r\n  min-height: calc(100vh - 230px);\r\n  padding: 10px 10px 0px 10px;\r\n  ${media.sm`\r\n    padding: 10px 20px 0px 20px;\r\n  `}\r\n  ${media.md`\r\n    padding: 10px 30px 0px 30px;\r\n    min-height: calc(100vh - 146px);\r\n  `}\r\n`\r\n","import React from 'react'\r\n\r\nimport { Footer } from 'components/Footer'\r\nimport { Header } from 'components/Header'\r\n\r\nimport WalletModal from '../WalletModal'\r\nimport * as Styled from './Layout.style'\r\n\r\nexport type Props = {\r\n  transparent?: boolean\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const Layout = (props: Props) => {\r\n  const { children, transparent = false } = props\r\n\r\n  return (\r\n    <Styled.LayoutWrapper>\r\n      <Header />\r\n      <Styled.ContentWrapper transparent={transparent}>\r\n        {children}\r\n      </Styled.ContentWrapper>\r\n      <Footer />\r\n      <WalletModal />\r\n    </Styled.LayoutWrapper>\r\n  )\r\n}\r\n","import { Client as BtcClient, Network } from '@xchainjs/xchain-bitcoin'\r\nimport { TxHash, Balance } from '@xchainjs/xchain-client'\r\nimport { baseAmount, Chain, BTCChain } from '@xchainjs/xchain-util'\r\n\r\nimport { AmountType, Amount, Asset, AssetAmount } from '../entities'\r\nimport { IClient } from './client'\r\nimport { TxParams } from './types'\r\n\r\nexport interface IBtcChain extends IClient {\r\n  getClient(): BtcClient\r\n}\r\n\r\nexport class BtcChain implements IBtcChain {\r\n  private balances: AssetAmount[] = []\r\n\r\n  private client: BtcClient\r\n\r\n  public readonly chain: Chain\r\n\r\n  constructor({\r\n    network = 'testnet',\r\n    phrase,\r\n  }: {\r\n    network?: Network\r\n    phrase: string\r\n  }) {\r\n    this.chain = BTCChain\r\n\r\n    this.client = new BtcClient({\r\n      network,\r\n      phrase,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * get xchain-binance client\r\n   */\r\n  getClient(): BtcClient {\r\n    return this.client\r\n  }\r\n\r\n  get balance() {\r\n    return this.balances\r\n  }\r\n\r\n  loadBalance = async (): Promise<AssetAmount[]> => {\r\n    try {\r\n      const balances: Balance[] = await this.client.getBalance()\r\n\r\n      this.balances = balances.map((data: Balance) => {\r\n        const { asset, amount } = data\r\n\r\n        const assetObj = new Asset(asset.chain, asset.symbol)\r\n        const amountObj = new Amount(\r\n          amount.amount(),\r\n          AmountType.BASE_AMOUNT,\r\n          assetObj.decimal,\r\n        )\r\n\r\n        return new AssetAmount(assetObj, amountObj)\r\n      })\r\n\r\n      return this.balances\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  hasAmountInBalance = async (assetAmount: AssetAmount): Promise<boolean> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(assetAmount.asset),\r\n      )\r\n\r\n      if (!assetBalance) return false\r\n\r\n      return assetBalance.amount.gte(assetAmount.amount)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getAssetBalance = async (asset: Asset): Promise<AssetAmount> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(asset),\r\n      )\r\n\r\n      if (!assetBalance)\r\n        return new AssetAmount(asset, Amount.fromAssetAmount(0, asset.decimal))\r\n\r\n      return assetBalance\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * transfer on binance chain\r\n   * @param {TxParams} tx transfer parameter\r\n   */\r\n  transfer = async (tx: TxParams): Promise<TxHash> => {\r\n    // use xchainjs-client standard internally\r\n    try {\r\n      const { assetAmount, recipient, memo, feeOptionKey = 'fastest' } = tx\r\n      const { asset } = assetAmount\r\n      const amount = baseAmount(assetAmount.amount.baseAmount)\r\n      const feeRates = await this.client.getFeeRates()\r\n      const feeRate = feeRates[feeOptionKey]\r\n\r\n      return await this.client.transfer({\r\n        asset: {\r\n          chain: asset.chain,\r\n          symbol: asset.symbol,\r\n          ticker: asset.ticker,\r\n        },\r\n        amount,\r\n        recipient,\r\n        memo,\r\n        feeRate,\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n","import { TxHash, Balance, Network } from '@xchainjs/xchain-client'\r\nimport { Client as EthClient } from '@xchainjs/xchain-ethereum'\r\nimport { baseAmount, Chain, ETHChain } from '@xchainjs/xchain-util'\r\n\r\nimport { ETHERSCAN_API_KEY } from '../config'\r\nimport { AmountType, Amount, Asset, AssetAmount } from '../entities'\r\nimport { IClient } from './client'\r\nimport { TxParams } from './types'\r\n\r\nexport interface IEthChain extends IClient {\r\n  getClient(): EthClient\r\n}\r\n\r\nexport class EthChain implements IEthChain {\r\n  private balances: AssetAmount[] = []\r\n\r\n  private client: EthClient\r\n\r\n  public readonly chain: Chain\r\n\r\n  constructor({\r\n    network = 'testnet',\r\n    phrase,\r\n  }: {\r\n    network?: Network\r\n    phrase: string\r\n  }) {\r\n    this.chain = ETHChain\r\n    this.client = new EthClient({\r\n      network,\r\n      phrase,\r\n      etherscanApiKey: ETHERSCAN_API_KEY,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * get xchain-binance client\r\n   */\r\n  getClient(): EthClient {\r\n    return this.client\r\n  }\r\n\r\n  get balance() {\r\n    return this.balances\r\n  }\r\n\r\n  loadBalance = async (): Promise<AssetAmount[]> => {\r\n    try {\r\n      const balances: Balance[] = await this.client.getBalance()\r\n\r\n      this.balances = balances.map((data: Balance) => {\r\n        const { asset, amount } = data\r\n\r\n        const assetObj = new Asset(asset.chain, asset.symbol)\r\n        const amountObj = new Amount(\r\n          amount.amount(),\r\n          AmountType.BASE_AMOUNT,\r\n          assetObj.decimal,\r\n        )\r\n\r\n        return new AssetAmount(assetObj, amountObj)\r\n      })\r\n\r\n      return this.balances\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  hasAmountInBalance = async (assetAmount: AssetAmount): Promise<boolean> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(assetAmount.asset),\r\n      )\r\n\r\n      if (!assetBalance) return false\r\n\r\n      return assetBalance.amount.gte(assetAmount.amount)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getAssetBalance = async (asset: Asset): Promise<AssetAmount> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(asset),\r\n      )\r\n\r\n      if (!assetBalance)\r\n        return new AssetAmount(asset, Amount.fromAssetAmount(0, asset.decimal))\r\n\r\n      return assetBalance\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * transfer on binance chain\r\n   * @param {TxParams} tx transfer parameter\r\n   */\r\n  transfer = async (tx: TxParams): Promise<TxHash> => {\r\n    // use xchainjs-client standard internally\r\n    try {\r\n      const { assetAmount, recipient, memo, feeOptionKey = 'fastest' } = tx\r\n      const { asset } = assetAmount\r\n      const amount = baseAmount(assetAmount.amount.baseAmount)\r\n\r\n      const txHash = await this.client.transfer({\r\n        asset: {\r\n          chain: asset.chain,\r\n          symbol: asset.symbol,\r\n          ticker: asset.ticker,\r\n        },\r\n        amount,\r\n        recipient,\r\n        memo,\r\n        feeOptionKey,\r\n      })\r\n\r\n      return txHash\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n","export const BLOCKCHAIR_API_KEY = process.env.REACT_APP_BLOCKCHAIR_API_KEY\r\n\r\nexport const BLOCKCHAIR_TESTNET = 'https://api.blockchair.com/bitcoin/testnet'\r\nexport const BLOCKCHAIR_MAINNET = 'https://api.blockchair.com/bitcoin'\r\n\r\nexport const ETHERSCAN_API_KEY = process.env.REACT_APP_ETHERSCAN_API_KEY\r\n","import { TxHash, Balance } from '@xchainjs/xchain-client'\r\nimport { Client as LtcClient, Network } from '@xchainjs/xchain-litecoin'\r\nimport { baseAmount, Chain, LTCChain } from '@xchainjs/xchain-util'\r\n\r\nimport { BLOCKCHAIR_TESTNET, BLOCKCHAIR_MAINNET } from '../config'\r\nimport { AmountType, Amount, Asset, AssetAmount } from '../entities'\r\nimport { IClient } from './client'\r\nimport { TxParams } from './types'\r\n\r\nexport interface ILtcChain extends IClient {\r\n  getClient(): LtcClient\r\n}\r\n\r\nexport class LtcChain implements ILtcChain {\r\n  private balances: AssetAmount[] = []\r\n\r\n  private client: LtcClient\r\n\r\n  public readonly chain: Chain\r\n\r\n  constructor({\r\n    network = 'testnet',\r\n    phrase,\r\n  }: {\r\n    network?: Network\r\n    phrase: string\r\n  }) {\r\n    this.chain = LTCChain\r\n    const blockchairUrl =\r\n      network === 'testnet' ? BLOCKCHAIR_TESTNET : BLOCKCHAIR_MAINNET\r\n\r\n    this.client = new LtcClient({\r\n      network,\r\n      phrase,\r\n      nodeUrl: blockchairUrl,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * get xchain-binance client\r\n   */\r\n  getClient(): LtcClient {\r\n    return this.client\r\n  }\r\n\r\n  get balance() {\r\n    return this.balances\r\n  }\r\n\r\n  loadBalance = async (): Promise<AssetAmount[]> => {\r\n    try {\r\n      const balances: Balance[] = await this.client.getBalance()\r\n\r\n      this.balances = balances.map((data: Balance) => {\r\n        const { asset, amount } = data\r\n\r\n        const assetObj = new Asset(asset.chain, asset.symbol)\r\n        const amountObj = new Amount(\r\n          amount.amount(),\r\n          AmountType.BASE_AMOUNT,\r\n          assetObj.decimal,\r\n        )\r\n\r\n        return new AssetAmount(assetObj, amountObj)\r\n      })\r\n\r\n      return this.balances\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  hasAmountInBalance = async (assetAmount: AssetAmount): Promise<boolean> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(assetAmount.asset),\r\n      )\r\n\r\n      if (!assetBalance) return false\r\n\r\n      return assetBalance.amount.gte(assetAmount.amount)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getAssetBalance = async (asset: Asset): Promise<AssetAmount> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(asset),\r\n      )\r\n\r\n      if (!assetBalance)\r\n        return new AssetAmount(asset, Amount.fromAssetAmount(0, asset.decimal))\r\n\r\n      return assetBalance\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * transfer on binance chain\r\n   * @param {TxParams} tx transfer parameter\r\n   */\r\n  transfer = async (tx: TxParams): Promise<TxHash> => {\r\n    // use xchainjs-client standard internally\r\n    try {\r\n      const { assetAmount, recipient, memo, feeOptionKey = 'fastest' } = tx\r\n      const { asset } = assetAmount\r\n      const amount = baseAmount(assetAmount.amount.baseAmount)\r\n      const feeRates = await this.client.getFeeRates()\r\n      const feeRate = feeRates[feeOptionKey]\r\n\r\n      return await this.client.transfer({\r\n        asset: {\r\n          chain: asset.chain,\r\n          symbol: asset.symbol,\r\n          ticker: asset.ticker,\r\n        },\r\n        amount,\r\n        recipient,\r\n        memo,\r\n        feeRate,\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n","import { TxHash, Balance, Network } from '@xchainjs/xchain-client'\r\nimport { Client as ThorClient } from '@xchainjs/xchain-thorchain'\r\nimport { baseAmount, Chain, THORChain } from '@xchainjs/xchain-util'\r\n\r\nimport { AmountType, Amount, Asset, AssetAmount } from '../entities'\r\nimport { IClient } from './client'\r\nimport { TxParams } from './types'\r\n\r\nexport type DepositParam = {\r\n  assetAmount: AssetAmount\r\n  memo?: string\r\n}\r\n\r\nexport interface IThorChain extends IClient {\r\n  getClient(): ThorClient\r\n  deposit(tx: DepositParam): Promise<TxHash>\r\n}\r\n\r\nexport class ThorChain implements IThorChain {\r\n  private balances: AssetAmount[] = []\r\n\r\n  private client: ThorClient\r\n\r\n  public readonly chain: Chain\r\n\r\n  constructor({\r\n    network = 'testnet',\r\n    phrase,\r\n  }: {\r\n    network?: Network\r\n    phrase: string\r\n  }) {\r\n    this.chain = THORChain\r\n    this.client = new ThorClient({\r\n      network,\r\n      phrase,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * get xchain-binance client\r\n   */\r\n  getClient(): ThorClient {\r\n    return this.client\r\n  }\r\n\r\n  get balance() {\r\n    return this.balances\r\n  }\r\n\r\n  loadBalance = async (): Promise<AssetAmount[]> => {\r\n    try {\r\n      const balances: Balance[] = await this.client.getBalance()\r\n\r\n      this.balances = balances.map((data: Balance) => {\r\n        const { asset, amount } = data\r\n\r\n        const assetObj = new Asset(asset.chain, asset.symbol)\r\n        const amountObj = new Amount(\r\n          amount.amount(),\r\n          AmountType.BASE_AMOUNT,\r\n          assetObj.decimal,\r\n        )\r\n\r\n        return new AssetAmount(assetObj, amountObj)\r\n      })\r\n\r\n      return this.balances\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  hasAmountInBalance = async (assetAmount: AssetAmount): Promise<boolean> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(assetAmount.asset),\r\n      )\r\n\r\n      if (!assetBalance) return false\r\n\r\n      return assetBalance.amount.gte(assetAmount.amount)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getAssetBalance = async (asset: Asset): Promise<AssetAmount> => {\r\n    try {\r\n      await this.loadBalance()\r\n\r\n      const assetBalance = this.balances.find((data: AssetAmount) =>\r\n        data.asset.eq(asset),\r\n      )\r\n\r\n      if (!assetBalance)\r\n        return new AssetAmount(asset, Amount.fromAssetAmount(0, asset.decimal))\r\n\r\n      return assetBalance\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * transfer on binance chain\r\n   * @param {TxParams} tx transfer parameter\r\n   */\r\n  transfer = async (tx: TxParams): Promise<TxHash> => {\r\n    // use xchainjs-client standard internally\r\n    try {\r\n      const { assetAmount, recipient, memo } = tx\r\n      const { asset } = assetAmount\r\n      const amount = baseAmount(assetAmount.amount.baseAmount)\r\n\r\n      return await this.client.transfer({\r\n        asset: {\r\n          chain: asset.chain,\r\n          symbol: asset.symbol,\r\n          ticker: asset.ticker,\r\n        },\r\n        amount,\r\n        recipient,\r\n        memo,\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  async deposit(tx: DepositParam): Promise<TxHash> {\r\n    try {\r\n      const { assetAmount, memo } = tx\r\n      const { asset } = assetAmount\r\n      const amount = baseAmount(assetAmount.amount.baseAmount)\r\n\r\n      if (memo) {\r\n        return await this.client.deposit({\r\n          asset: {\r\n            chain: asset.chain,\r\n            symbol: asset.symbol,\r\n            ticker: asset.ticker,\r\n          },\r\n          amount,\r\n          memo,\r\n        })\r\n      }\r\n      throw new Error('Invalid Memo')\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n","import { crypto } from '@binance-chain/javascript-sdk'\r\nimport { KeyStore } from '@binance-chain/javascript-sdk/lib/crypto'\r\nimport {\r\n  TxHash,\r\n  Network,\r\n  Fees,\r\n  TxsPage,\r\n  TxHistoryParams,\r\n  Tx,\r\n} from '@xchainjs/xchain-client'\r\nimport {\r\n  Chain,\r\n  BTCChain,\r\n  BNBChain,\r\n  THORChain,\r\n  ETHChain,\r\n  LTCChain,\r\n  // BCHChain,\r\n} from '@xchainjs/xchain-util'\r\nimport {\r\n  MidgardV2,\r\n  NetworkType as MidgardNetwork,\r\n  PoolAddress,\r\n} from 'midgard-sdk'\r\n\r\nimport { Swap, Memo, Asset, AssetAmount } from '../entities'\r\nimport { BnbChain } from './binance'\r\nimport { BtcChain } from './bitcoin'\r\n// import { BchChain } from './bitcoinCash'\r\nimport { EthChain } from './ethereum'\r\nimport { LtcChain } from './litecoin'\r\nimport { ThorChain } from './thorchain'\r\nimport {\r\n  TxParams,\r\n  AddLiquidityParams,\r\n  WithdrawParams,\r\n  Wallet,\r\n  supportedChains,\r\n} from './types'\r\n\r\n// thorchain pool address is empty string\r\nconst THORCHAIN_POOL_ADDRESS = ''\r\n\r\nexport interface IMultiChain {\r\n  chains: typeof supportedChains\r\n  midgard: MidgardV2\r\n  network: string\r\n\r\n  wallets: Wallet | null\r\n\r\n  thor: ThorChain\r\n  btc: BtcChain\r\n  bnb: BnbChain\r\n  eth: EthChain\r\n  ltc: LtcChain\r\n\r\n  validateKeystore(keystore: KeyStore, password: string, addr: string): boolean\r\n\r\n  getMidgard(): MidgardV2\r\n  getPoolAddressByChain(chain: Chain): Promise<PoolAddress>\r\n  loadWallet(): Promise<Wallet | null>\r\n\r\n  getExplorerUrl(chain: Chain): string\r\n  getExplorerAddressUrl(chain: Chain, address: string): string\r\n  getExplorerTxUrl(chain: Chain, txHash: string): string\r\n\r\n  getTransactions(params?: TxHistoryParams): Promise<TxsPage>\r\n  getTransactionData(txHash: string): Promise<Tx>\r\n\r\n  getFees(): Promise<Fees>\r\n\r\n  transfer(tx: TxParams, native?: boolean): Promise<TxHash>\r\n  swap(swap: Swap, recipient?: string): Promise<TxHash>\r\n  addLiquidity(params: AddLiquidityParams): Promise<TxHash>\r\n  withdraw(params: WithdrawParams): Promise<TxHash>\r\n}\r\n\r\nexport class MultiChain implements IMultiChain {\r\n  private phrase: string\r\n\r\n  private wallet: Wallet | null = null\r\n\r\n  public readonly chains = supportedChains\r\n\r\n  public readonly midgard: MidgardV2\r\n\r\n  public readonly network: Network\r\n\r\n  public thor: ThorChain\r\n\r\n  public btc: BtcChain\r\n\r\n  public bnb: BnbChain\r\n\r\n  public eth: EthChain\r\n\r\n  // public bch: BchChain\r\n\r\n  public ltc: LtcChain\r\n\r\n  constructor({\r\n    network = 'testnet',\r\n    phrase = '',\r\n  }: {\r\n    network?: Network\r\n    phrase?: string\r\n  }) {\r\n    this.network = network\r\n    this.phrase = phrase\r\n\r\n    // create midgard client\r\n    this.midgard = new MidgardV2(MultiChain.getMidgardNetwork(network))\r\n\r\n    // create chain clients\r\n    this.thor = new ThorChain({ network, phrase })\r\n    this.bnb = new BnbChain({ network, phrase })\r\n    this.btc = new BtcChain({ network, phrase })\r\n    this.eth = new EthChain({ network, phrase })\r\n    this.ltc = new LtcChain({ network, phrase })\r\n  }\r\n\r\n  setPrivateKey = (privateKey: string) => {\r\n    this.bnb.getClient().setPrivateKey(privateKey)\r\n\r\n    this.initWallet()\r\n  }\r\n\r\n  getPhrase = () => {\r\n    return this.phrase\r\n  }\r\n\r\n  // used to validate keystore and password for bnb chain\r\n  validateKeystore = (\r\n    keystore: KeyStore,\r\n    password: string,\r\n    addr: string,\r\n  ): boolean => {\r\n    try {\r\n      const privateKey = crypto.getPrivateKeyFromKeyStore(\r\n        JSON.stringify(keystore),\r\n        password,\r\n      )\r\n\r\n      const address = crypto.getAddressFromPrivateKey(\r\n        privateKey,\r\n        this.network === 'testnet' ? 'tbnb' : 'bnb',\r\n      )\r\n\r\n      if (address === addr) {\r\n        this.setPrivateKey(privateKey)\r\n        return true\r\n      }\r\n\r\n      return false\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    return false\r\n  }\r\n\r\n  initWallet = () => {\r\n    this.wallet = {\r\n      address: this.bnb.getClient().getAddress(),\r\n      balance: [],\r\n    }\r\n  }\r\n\r\n  /**\r\n   * return midgard network type\r\n   *\r\n   * @param network mainnet or testnet\r\n   */\r\n  public static getMidgardNetwork(network: Network): MidgardNetwork {\r\n    if (network === 'testnet') return 'testnet'\r\n    return 'chaosnet'\r\n  }\r\n\r\n  get wallets(): Wallet | null {\r\n    return this.wallet\r\n  }\r\n\r\n  /**\r\n   * get midgard client\r\n   */\r\n  getMidgard(): MidgardV2 {\r\n    return this.midgard\r\n  }\r\n\r\n  getPoolAddressByChain = async (chain: Chain): Promise<PoolAddress> => {\r\n    try {\r\n      const poolAddress = await this.midgard.getInboundAddressByChain(chain)\r\n\r\n      return poolAddress\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  loadWallet = async (): Promise<Wallet | null> => {\r\n    try {\r\n      const balance = (await this.bnb?.loadBalance()) ?? []\r\n      const address = this.bnb.getClient().getAddress()\r\n      this.wallet = {\r\n        address,\r\n        balance,\r\n      }\r\n\r\n      return {\r\n        address,\r\n        balance,\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  getChainClient = (chain: Chain) => {\r\n    if (chain === THORChain) return this.thor\r\n    if (chain === BNBChain) return this.bnb\r\n    if (chain === BTCChain) return this.btc\r\n    if (chain === ETHChain) return this.eth\r\n    if (chain === LTCChain) return this.ltc\r\n    // if (chain === BCHChain) return this.bch\r\n\r\n    return null\r\n  }\r\n\r\n  getExplorerUrl = (chain: Chain): string => {\r\n    const chainClient = this.getChainClient(chain)\r\n    if (!chainClient) return '#'\r\n\r\n    return chainClient.getClient().getExplorerUrl()\r\n  }\r\n\r\n  getExplorerAddressUrl = (chain: Chain, address: string): string => {\r\n    const chainClient = this.getChainClient(chain)\r\n    if (!chainClient) return '#'\r\n\r\n    return chainClient.getClient().getExplorerAddressUrl(address)\r\n  }\r\n\r\n  getExplorerTxUrl = (chain: Chain, txHash: string): string => {\r\n    const chainClient = this.getChainClient(chain)\r\n    if (!chainClient) return '#'\r\n\r\n    return chainClient.getClient().getExplorerTxUrl(txHash)\r\n  }\r\n\r\n  getTransactions = (params?: TxHistoryParams): Promise<TxsPage> => {\r\n    return this.bnb.getClient().getTransactions(params)\r\n  }\r\n\r\n  getTransactionData = (txHash: string): Promise<Tx> => {\r\n    return this.bnb.getClient().getTransactionData(txHash)\r\n  }\r\n\r\n  getFees = (): Promise<Fees> => {\r\n    return this.bnb.getClient().getFees()\r\n  }\r\n\r\n  /**\r\n   * transfer on binance chain\r\n   * @param {TxParams} tx transfer parameter\r\n   */\r\n  transfer = async (tx: TxParams): Promise<TxHash> => {\r\n    try {\r\n      return await this.bnb.transfer(tx)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * swap assets\r\n   * @param {Swap} swap Swap Object\r\n   */\r\n  swap = async (swap: Swap, recipient?: string): Promise<TxHash> => {\r\n    /**\r\n     * 1. check if swap has sufficient fee\r\n     * 2. get pool address\r\n     * 3. get swap memo\r\n     * 4. transfer input asset to pool address\r\n     */\r\n\r\n    try {\r\n      if (!this.wallet) {\r\n        return await Promise.reject(new Error('Wallet not detected'))\r\n      }\r\n\r\n      if (swap.hasInSufficientFee) {\r\n        return await Promise.reject(new Error('Insufficient Fee'))\r\n      }\r\n\r\n      const recipientAddress = recipient\r\n\r\n      const poolAddress = await this.getPoolAddressByChain(\r\n        swap.inputAsset.chain,\r\n      )\r\n      const memo = Memo.swapMemo(\r\n        swap.outputAsset,\r\n        recipientAddress,\r\n        swap.minOutputAmount, // slip limit\r\n      )\r\n\r\n      return await this.transfer({\r\n        assetAmount: swap.inputAmount,\r\n        recipient: poolAddress,\r\n        memo,\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * add liquidity to pool\r\n   * @param {AddLiquidityParams} params\r\n   */\r\n  addLiquidity = async (params: AddLiquidityParams): Promise<TxHash> => {\r\n    /**\r\n     * 1. get pool address\r\n     * 2. get add liquidity memo\r\n     * 3. check add type (Sym or Asym add)\r\n     * 4. add liquidity to pool\r\n     */\r\n\r\n    try {\r\n      const { pool, runeAmount, assetAmount } = params\r\n      const { chain } = pool.asset\r\n\r\n      const poolAddress = await this.getPoolAddressByChain(chain)\r\n\r\n      // sym stake\r\n      if (runeAmount && runeAmount.gt(runeAmount._0_AMOUNT)) {\r\n        if (assetAmount.lte(assetAmount._0_AMOUNT)) {\r\n          return await Promise.reject(new Error('Invalid Asset Amount'))\r\n        }\r\n\r\n        // 1. send rune (NOTE: recipient should be empty string)\r\n        await this.transfer({\r\n          assetAmount: runeAmount,\r\n          recipient: THORCHAIN_POOL_ADDRESS,\r\n          memo: Memo.depositMemo(Asset.RUNE()),\r\n        })\r\n\r\n        // 2. send asset\r\n        return await this.transfer({\r\n          assetAmount,\r\n          recipient: poolAddress,\r\n          memo: Memo.depositMemo(pool.asset),\r\n        })\r\n      }\r\n      // asym stake\r\n      if (assetAmount.lte(assetAmount._0_AMOUNT)) {\r\n        return await Promise.reject(new Error('Invalid Asset Amount'))\r\n      }\r\n\r\n      return await this.transfer({\r\n        assetAmount,\r\n        recipient: poolAddress,\r\n        memo: Memo.depositMemo(pool.asset),\r\n      })\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * withdraw asset from pool\r\n   * @param {WithdrawParams} params\r\n   */\r\n  withdraw = async (params: WithdrawParams): Promise<TxHash> => {\r\n    /**\r\n     * 1. get pool address\r\n     * 2. get withdraw memo\r\n     * 3. transfer withdraw tx\r\n     */\r\n\r\n    try {\r\n      const { pool, percent } = params\r\n      const memo = Memo.withdrawMemo(pool.asset, percent)\r\n      const { chain } = pool.asset\r\n\r\n      const poolAddress = await this.getPoolAddressByChain(chain)\r\n\r\n      const txHash = await this.transfer({\r\n        assetAmount: AssetAmount.getMinAmountByChain(chain),\r\n        recipient: poolAddress,\r\n        memo,\r\n      })\r\n\r\n      return txHash\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport { Spin } from 'antd'\r\nimport styled from 'styled-components'\r\n\r\nconst LoaderWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  width: 100%;\r\n  height: 80vh;\r\n`\r\n\r\nexport const PageLoader: React.FC = (): JSX.Element => {\r\n  return (\r\n    <LoaderWrapper>\r\n      <Spin />\r\n    </LoaderWrapper>\r\n  )\r\n}\r\n","/* eslint-disable @typescript-eslint/no-inferrable-types */\r\nexport const abbreviateNumber = (\r\n  value: number,\r\n  decimal: number = 0,\r\n): string => {\r\n  let newValue = value\r\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'Q', 'Q', 's']\r\n  let suffixNum = 0\r\n\r\n  while (newValue >= 1000) {\r\n    newValue /= 1000\r\n    suffixNum++\r\n  }\r\n\r\n  return `${newValue.toFixed(decimal)}${\r\n    suffixNum > 0 ? ` ${suffixes[suffixNum]}` : ''\r\n  }`\r\n}\r\n\r\nexport const abbreviateNumberFromString = (\r\n  value: string,\r\n  decimal: number = 2,\r\n): string => {\r\n  const num = parseFloat(value.replace(/,/g, ''))\r\n  return abbreviateNumber(num, decimal)\r\n}\r\n","import { Line, Bar } from 'react-chartjs-2'\r\n\r\nimport { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\ntype HeaderToggleProps = {\r\n  primary?: boolean\r\n}\r\n\r\ntype BlurWrapperProps = {\r\n  isBlur?: boolean\r\n}\r\n\r\ntype ChartContainerProps = {\r\n  gradientStart: string\r\n  gradientStop: string\r\n}\r\n\r\nexport const ChartContainer = styled.div`\r\n  background: transparent;\r\n  border: 1px solid ${palette('gray', 0)};\r\n  padding: 5px;\r\n  border-radius: 4px;\r\n  width: 100%;\r\n  height: 100%;\r\n  ${media.sm`\r\n    padding: 10px 20px;\r\n    height: 288px;\r\n  `}\r\n  background-image: ${(props: ChartContainerProps) =>\r\n    `linear-gradient(to bottom, ${transparentize(\r\n      0.7,\r\n      props.gradientStart,\r\n    )}, ${transparentize(1, props.gradientStop)})`};\r\n`\r\n\r\nexport const ChartHeaderType = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nexport const ChartHeaderItem = styled.div`\r\n  margin-right: 20px;\r\n  &:last-child {\r\n    margin-right: 0px;\r\n  }\r\n`\r\n\r\nexport const HeaderContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n`\r\n\r\nexport const TypeContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  & > * {\r\n    margin-right: 20px;\r\n  }\r\n`\r\n\r\nexport const TimeContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  & > * {\r\n    margin-right: 20px;\r\n  }\r\n`\r\n\r\nexport const HeaderToggle = styled.span`\r\n  color: ${palette('text', 0)};\r\n  font-size: 14px !important;\r\n  font-weight: ${(props: HeaderToggleProps) =>\r\n    props.primary ? '600' : 'normal'};\r\n  cursor: pointer;\r\n  ${media.sm`\r\n    font-size: 18px;\r\n    &:hover {\r\n      opacity: 0.8;\r\n    }\r\n  `}\r\n`\r\n\r\nexport const ChartWrapper = styled.div`\r\n  margin-top: 10px;\r\n  position: relative;\r\n  width: calc(100% - 10px);\r\n  height: calc(100% - 40px);\r\n  min-height: 200px;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  justify-content: center;\r\n`\r\n\r\nexport const LineChart = styled(Line)`\r\n  width: 100%;\r\n  font-family: 'Exo 2';\r\n`\r\n\r\nexport const BarChart = styled(Bar)`\r\n  width: 100%;\r\n  font-family: 'Exo 2';\r\n`\r\n\r\nexport const ComingSoonWrapper = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  z-index: 5;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: ${palette('text', 1)};\r\n`\r\n\r\nexport const ComingSoonText = styled.p`\r\n  text-transform: uppercase;\r\n  margin: 10px 0 0;\r\n  padding: 0;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  letter-spacing: 1px;\r\n`\r\n\r\nexport const BlurWrapper = styled.div<BlurWrapperProps>`\r\n  width: 100%;\r\n  height: 100%;\r\n  filter: ${(props) => (props.isBlur ? 'blur(10px)' : 'none')};\r\n`\r\n","import { random } from 'lodash'\r\nimport moment from 'moment'\r\n\r\nimport { FixmeType } from 'types/global'\r\n\r\nexport const generateRandomTimeSeries = (\r\n  minValue: number,\r\n  maxValue: number,\r\n) => {\r\n  const series = []\r\n  for (\r\n    let itr = moment().subtract(15, 'days');\r\n    itr.isBefore(moment.now());\r\n    itr = itr.add(1, 'day')\r\n  ) {\r\n    series.push({\r\n      time: itr.unix(),\r\n      value: (\r\n        minValue +\r\n        (random(100) / 100) * (maxValue - minValue)\r\n      ).toString(),\r\n    })\r\n  }\r\n  return series\r\n}\r\n\r\nexport const getRandomChartData = () => {\r\n  const randomSeries = generateRandomTimeSeries(0, 15)\r\n\r\n  const labels: Array<string> = randomSeries.map((data) => {\r\n    return moment.unix(data.time).format('MMM DD')\r\n  })\r\n\r\n  const values: Array<number> = randomSeries.map((data) =>\r\n    Number(data.value.split(',').join('')),\r\n  )\r\n\r\n  return {\r\n    labels,\r\n    values,\r\n  }\r\n}\r\n\r\nexport const getDisplayData = ({ labels, values, colors }: FixmeType) => (\r\n  canvas: HTMLCanvasElement,\r\n) => {\r\n  const ctx = canvas.getContext('2d')\r\n  let gradientStroke: CanvasGradient\r\n\r\n  if (ctx) {\r\n    gradientStroke = ctx.createLinearGradient(0, 100, 0, 300)\r\n    gradientStroke.addColorStop(0, colors.gradientStart)\r\n    gradientStroke.addColorStop(1, colors.gradientStop)\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          fill: true,\r\n          lineTension: 0.5,\r\n          backgroundColor: gradientStroke,\r\n          borderColor: colors.line,\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          borderWidth: 2,\r\n          pointBorderColor: colors.line,\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 1,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 1,\r\n          pointRadius: 1,\r\n          pointHitRadius: 50,\r\n          data: values,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n\r\n  return {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        fill: false,\r\n        lineTension: 0.2,\r\n        borderColor: '#436eb9',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        borderWidth: 2,\r\n        pointBorderColor: '#436eb9',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 1,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 0,\r\n        pointRadius: 1,\r\n        pointHitRadius: 50,\r\n        data: values,\r\n      },\r\n    ],\r\n  }\r\n}\r\n","import React, { useMemo } from 'react'\r\n\r\nimport { defaults } from 'react-chartjs-2'\r\n\r\nimport themes, { ThemeType } from '@thorchain/asgardex-theme'\r\nimport { Grid } from 'antd'\r\nimport { takeRight } from 'lodash'\r\nimport moment from 'moment'\r\n\r\nimport { useApp } from 'redux/app/hooks'\r\n\r\nimport { abbreviateNumber } from 'helpers/number'\r\n\r\nimport { CodeIcon } from '../Icons'\r\nimport { ChartLoader } from '../Loaders/ChartLoader'\r\nimport {\r\n  ChartContainer,\r\n  HeaderContainer,\r\n  TypeContainer,\r\n  TimeContainer,\r\n  HeaderToggle,\r\n  ChartWrapper,\r\n  BarChart,\r\n  LineChart,\r\n  BlurWrapper,\r\n  ComingSoonWrapper,\r\n  ComingSoonText,\r\n} from './Chart.style'\r\nimport { ChartData, ChartTimeFrame, ChartValues } from './types'\r\nimport { getDisplayData, getRandomChartData } from './utils'\r\n\r\ntype Props = {\r\n  chartData: ChartData\r\n  chartIndexes: string[]\r\n  selectedIndex: string\r\n  selectChart: (value: string) => void\r\n}\r\n\r\n// https://www.chartjs.org/docs/latest/general/fonts.html#missing-fonts\r\ndefaults.global.defaultFontSize = 14\r\ndefaults.global.defaultFontStyle = 'normal'\r\n\r\nexport const Chart: React.FC<Props> = React.memo(\r\n  (props: Props): JSX.Element => {\r\n    const {\r\n      chartIndexes = [],\r\n      chartData,\r\n      selectedIndex,\r\n      selectChart,\r\n      ...otherProps\r\n    } = props\r\n    const [chartTimeframe, setChartTimeframe] = React.useState<ChartTimeFrame>(\r\n      'allTime',\r\n    )\r\n\r\n    const isDesktopView = Grid.useBreakpoint()?.md ?? false\r\n\r\n    const { themeType } = useApp()\r\n    const isLight = themeType === ThemeType.LIGHT\r\n    const theme = isLight ? themes.light : themes.dark\r\n    const colors = useMemo(\r\n      () => ({\r\n        text: theme.palette.text[0],\r\n        line: isLight ? '#23DCC8' : '#23DCC8',\r\n        backgroundGradientStart: isLight ? '#c8fffa' : '#186b63',\r\n        backgroundGradientStop: isLight ? '#ffffff' : '#23DCC8',\r\n        gradientStart: isLight ? '#23DCC8' : '#186b63',\r\n        gradientStop: isLight ? '#ffffff' : '#23dcca',\r\n      }),\r\n      [isLight, theme],\r\n    )\r\n    const randomData = useMemo(() => getRandomChartData(), [])\r\n\r\n    const selectedChartData = chartData?.[selectedIndex]\r\n    const isComingSoonChart = selectedChartData?.comingSoon ?? false\r\n    const isChartLoading = selectedChartData?.loading ?? false\r\n    const selectedChartType = selectedChartData?.type ?? 'line'\r\n    const selectedChartValues = selectedChartData?.values\r\n    const unit = selectedChartData?.unit ?? ''\r\n\r\n    const filteredByTime: ChartValues = useMemo(() => {\r\n      if (chartTimeframe === 'allTime') {\r\n        return selectedChartValues || []\r\n      }\r\n\r\n      return takeRight(selectedChartValues, 7) || []\r\n    }, [selectedChartValues, chartTimeframe])\r\n\r\n    const labels: Array<string> = filteredByTime.map((data) => {\r\n      return moment.unix(data.time).format('MMM DD')\r\n    })\r\n\r\n    const values: Array<number> = filteredByTime.map((data) =>\r\n      Number(data.value.split(',').join('')),\r\n    )\r\n\r\n    const getData = useMemo(() => getDisplayData({ labels, values, colors }), [\r\n      labels,\r\n      values,\r\n      colors,\r\n    ])\r\n\r\n    const getRandomSeries = useMemo(\r\n      () =>\r\n        getDisplayData({\r\n          labels: randomData.labels,\r\n          values: randomData.values,\r\n          colors,\r\n        }),\r\n      [randomData, colors],\r\n    )\r\n\r\n    const options = useMemo(\r\n      () => ({\r\n        maintainAspectRatio: false,\r\n        title: {\r\n          display: false,\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n        layout: {\r\n          padding: {\r\n            left: '10px',\r\n            right: '10px',\r\n            top: '10px',\r\n            bottom: '10px',\r\n          },\r\n        },\r\n        animation: {\r\n          duration: 0,\r\n        },\r\n        tooltips: {\r\n          titleFontSize: 18,\r\n          bodyFontSize: 16,\r\n          callbacks: {\r\n            label: ({ yLabel }: { yLabel: number }) => {\r\n              // if greater than 100M\r\n              if (yLabel > 100000000) {\r\n                return `${unit}${abbreviateNumber(yLabel, 0)}`\r\n              }\r\n              const label = `${unit}${new Intl.NumberFormat().format(\r\n                Math.floor(yLabel),\r\n              )}`\r\n              return label\r\n            },\r\n          },\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                fontSize: 14,\r\n                fontColor: colors.text,\r\n                maxTicksLimit: isDesktopView ? 5 : 3,\r\n                autoSkipPadding: 5,\r\n                maxRotation: 0,\r\n                callback(value: string) {\r\n                  if (Number(value) === 0) {\r\n                    return '0'\r\n                  }\r\n                  return value\r\n                },\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              type: 'linear',\r\n              stacked: true,\r\n              id: 'value',\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: isDesktopView ? 4 : 3,\r\n                callback(value: string) {\r\n                  if (Number(value) === 0) {\r\n                    return `${unit}0`\r\n                  }\r\n                  return `${unit}${abbreviateNumber(Number(value))}`\r\n                },\r\n                padding: 10,\r\n                fontSize: 14,\r\n                fontColor: colors.text,\r\n              },\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      }),\r\n      [unit, colors, isDesktopView],\r\n    )\r\n\r\n    const renderComingSoonChart = useMemo(() => {\r\n      return (\r\n        <>\r\n          <ComingSoonWrapper>\r\n            <CodeIcon />\r\n            <ComingSoonText>Coming Soon...</ComingSoonText>\r\n          </ComingSoonWrapper>\r\n          <BlurWrapper isBlur>\r\n            <LineChart data={getRandomSeries} options={options} />\r\n          </BlurWrapper>\r\n        </>\r\n      )\r\n    }, [getRandomSeries, options])\r\n\r\n    const renderChart = () => {\r\n      if (isComingSoonChart) {\r\n        return renderComingSoonChart\r\n      }\r\n\r\n      if (isChartLoading) {\r\n        return <ChartLoader />\r\n      }\r\n\r\n      if (selectedChartType === 'bar') {\r\n        return <BarChart data={getData} options={options} />\r\n      }\r\n\r\n      return <LineChart data={getData} options={options} />\r\n    }\r\n\r\n    const renderHeader = () => {\r\n      return (\r\n        <HeaderContainer>\r\n          <TypeContainer>\r\n            {chartIndexes.map((chartIndex) => (\r\n              <HeaderToggle\r\n                primary={selectedIndex === chartIndex}\r\n                onClick={() => selectChart(chartIndex)}\r\n                key={chartIndex}\r\n              >\r\n                {chartIndex}\r\n              </HeaderToggle>\r\n            ))}\r\n          </TypeContainer>\r\n          <TimeContainer>\r\n            <HeaderToggle\r\n              primary={chartTimeframe === 'week'}\r\n              onClick={() => setChartTimeframe('week')}\r\n            >\r\n              Week\r\n            </HeaderToggle>\r\n            <HeaderToggle\r\n              primary={chartTimeframe === 'allTime'}\r\n              onClick={() => setChartTimeframe('allTime')}\r\n            >\r\n              All\r\n            </HeaderToggle>\r\n          </TimeContainer>\r\n        </HeaderContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ChartContainer\r\n        gradientStart={colors.backgroundGradientStart}\r\n        gradientStop={colors.backgroundGradientStop}\r\n        {...otherProps}\r\n      >\r\n        {renderHeader()}\r\n        <ChartWrapper>{renderChart()}</ChartWrapper>\r\n      </ChartContainer>\r\n    )\r\n  },\r\n)\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nimport { midgardApi } from 'services/midgard'\r\n\r\nexport const getPools = createAsyncThunk(\r\n  'midgard/getPools',\r\n  midgardApi.getPools,\r\n)\r\n\r\nexport const getPoolStats = createAsyncThunk(\r\n  'midgard/getPoolStats',\r\n  midgardApi.getPoolStats,\r\n)\r\n\r\nexport const getNetworkData = createAsyncThunk(\r\n  'midgard/getNetworkData',\r\n  midgardApi.getNetworkData,\r\n)\r\n\r\nexport const getStats = createAsyncThunk(\r\n  'midgard/getStats',\r\n  midgardApi.getStats,\r\n)\r\n\r\nexport const getConstants = createAsyncThunk(\r\n  'midgard/getConstants',\r\n  midgardApi.getConstants,\r\n)\r\n\r\nexport const getQueue = createAsyncThunk(\r\n  'midgard/getQueue',\r\n  midgardApi.getQueue,\r\n)\r\n\r\nexport const getLastblock = createAsyncThunk(\r\n  'midgard/getLastblock',\r\n  midgardApi.getLastblock,\r\n)\r\n\r\nexport const getActions = createAsyncThunk(\r\n  'midgard/getActions',\r\n  midgardApi.getActions,\r\n)\r\n\r\nexport const getSwapHistory = createAsyncThunk(\r\n  'midgard/getSwapHistory',\r\n  midgardApi.getSwapHistory,\r\n)\r\n\r\nexport const getLiquidityHistory = createAsyncThunk(\r\n  'midgard/getLiquidityHistory',\r\n  midgardApi.getLiquidityHistory,\r\n)\r\n\r\nexport const getEarningsHistory = createAsyncThunk(\r\n  'midgard/getEarningsHistory',\r\n  midgardApi.getEarningsHistory,\r\n)\r\n\r\nexport const getDepthHistory = createAsyncThunk(\r\n  'midgard/getDepthHistory',\r\n  midgardApi.getDepthHistory,\r\n)\r\n\r\nexport const getMemberDetail = createAsyncThunk(\r\n  'midgard/getMemberDetail',\r\n  midgardApi.getMemberDetail,\r\n)\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport const BackLinkWrapper = styled.div`\r\n  display: flex;\r\n  width: 200px;\r\n  align-items: center;\r\n  margin-bottom: 10px !important;\r\n  ${media.sm`\r\n    margin-bottom: 20px !important;\r\n  `}\r\n\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    margin-right: 6px;\r\n    font-size: 22px;\r\n    font-weight: bold;\r\n    color: ${palette('primary', 0)};\r\n  }\r\n\r\n  span {\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    letter-spacing: 1px;\r\n    text-transform: uppercase;\r\n    color: ${palette('primary', 0)};\r\n  }\r\n`\r\n","import React, { useCallback } from 'react'\r\n\r\nimport { useHistory } from 'react-router'\r\n\r\nimport { LeftOutlined } from '@ant-design/icons'\r\n\r\nimport { IconButton } from 'components/UIElements'\r\n\r\nimport { BackLinkWrapper } from './BackLink.style'\r\n\r\nexport const BackLink = () => {\r\n  const history = useHistory()\r\n\r\n  const handleGoBack = useCallback(() => {\r\n    history.push('/')\r\n  }, [history])\r\n\r\n  return (\r\n    <BackLinkWrapper onClick={handleGoBack}>\r\n      <IconButton>\r\n        <LeftOutlined />\r\n        <span>Back</span>\r\n      </IconButton>\r\n    </BackLinkWrapper>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const PoolFilterWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  button {\r\n    &:first-child {\r\n      margin-right: 20px;\r\n    }\r\n  }\r\n`\r\n","/* eslint-disable react/no-unescaped-entities */\r\nimport React, { useCallback } from 'react'\r\n\r\nimport { CheckCircleOutlined, FieldTimeOutlined } from '@ant-design/icons'\r\nimport { PoolStatus } from 'midgard-sdk'\r\n\r\nimport { Button } from 'components/UIElements/Button'\r\nimport { Question } from 'components/UIElements/Tooltip'\r\n\r\nimport { PoolFilterWrapper } from './PoolStatusFilter.style'\r\n\r\nexport type Props = {\r\n  selected: PoolStatus\r\n  onClick: (key: PoolStatus) => void\r\n}\r\n\r\nexport const PoolStatusFilter: React.FC<Props> = (\r\n  props: Props,\r\n): JSX.Element => {\r\n  const { selected, onClick } = props\r\n\r\n  const handleClick = useCallback(\r\n    (key: PoolStatus) => {\r\n      onClick(key)\r\n    },\r\n    [onClick],\r\n  )\r\n\r\n  return (\r\n    <PoolFilterWrapper className=\"pool-filter\">\r\n      <Button\r\n        typevalue=\"outline\"\r\n        round\r\n        onClick={() => handleClick('available')}\r\n        focused={selected === 'available'}\r\n        fixedWidth={false}\r\n      >\r\n        <CheckCircleOutlined />\r\n        Active\r\n      </Button>\r\n      <Button\r\n        typevalue=\"outline\"\r\n        round\r\n        onClick={() => handleClick('staged')}\r\n        focused={selected === 'staged'}\r\n        fixedWidth={false}\r\n      >\r\n        <FieldTimeOutlined />\r\n        Pending\r\n      </Button>\r\n      <Question\r\n        tooltip=\"Pools don't immediately become enabled on THORChain and must participate\r\n      in a liquidity competition to become enabled. Every 50k blocks (approx 3\r\n      days), the pool with the most liquidity wins & becomes enabled. During\r\n      this time swapping is disabled but liquidity can be added & withdrawn.\"\r\n      />\r\n    </PoolFilterWrapper>\r\n  )\r\n}\r\n","import { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Label } from 'components/UIElements/Label'\r\n\r\nimport { boxShadow, transition } from 'settings/style-util'\r\n\r\nexport const Card = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  height: 120px;\r\n\r\n  background: ${(props) =>\r\n    transparentize(0.1, props.theme.palette.background[0])};\r\n  border: 1px solid ${palette('gray', 0)};\r\n\r\n  padding: 4px 4px;\r\n  border-radius: 4px;\r\n  ${transition()};\r\n\r\n  &:hover {\r\n    ${boxShadow('0px 1px 4px 0px #00c0ff')}\r\n  }\r\n\r\n  &:before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 6px;\r\n    height: 120px;\r\n    left: 8px;\r\n    top: 0px;\r\n    border-bottom-left-radius: 3px;\r\n    border-top-left-radius: 3px;\r\n    background: ${palette('gradient', 0)};\r\n  }\r\n`\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  padding: 0 10px;\r\n\r\n  height: 50px;\r\n`\r\n\r\nexport const Title = styled(Label)`\r\n  padding: 8px 0 4px 0;\r\n`\r\n\r\nexport const Description = styled(Label)`\r\n  padding: 4px 0 8px 0;\r\n  text-align: center;\r\n`\r\n\r\nexport const Info = styled(Label)`\r\n  padding: 0;\r\n`\r\n","import React from 'react'\r\n\r\nimport * as Styled from './ToolCard.style'\r\n\r\nexport type Props = {\r\n  title: string\r\n  description: string\r\n  info: string\r\n  link: string\r\n}\r\n\r\nexport const ToolCard: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const { title, description, info, link } = props\r\n\r\n  return (\r\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <Styled.Card>\r\n        <Styled.Title color=\"primary\" weight=\"bold\" size=\"large\">\r\n          {title}\r\n        </Styled.Title>\r\n        <Styled.Content>\r\n          <Styled.Description>{description}</Styled.Description>\r\n        </Styled.Content>\r\n        <Styled.Info color=\"success\">{info}</Styled.Info>\r\n      </Styled.Card>\r\n    </a>\r\n  )\r\n}\r\n","import { InfoCircleOutlined } from '@ant-design/icons'\r\nimport styled from 'styled-components/macro'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const PopoverContent = styled.div`\r\n  width: 300px;\r\n  font-size: '11px';\r\n  color: ${palette('text', 0)};\r\n`\r\n\r\nexport const TooltipContent = styled.div`\r\n  font-size: '12px';\r\n  color: ${palette('text', 0)};\r\n\r\n  z-index: 99999;\r\n`\r\n\r\nexport const PopoverIcon = styled(InfoCircleOutlined)`\r\n  color: ${palette('error', 0)};\r\n  margin: 0 10px;\r\n`\r\n","import React, { useRef } from 'react'\r\n\r\nimport { Settings } from 'react-feather'\r\n\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { useApp } from 'redux/app/hooks'\r\n\r\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nimport { Button, CoreButton, Label, Question } from '../UIElements'\r\n\r\nconst StyledMenuIcon = styled(Settings)`\r\n  height: 20px;\r\n  width: 20px;\r\n\r\n  > * {\r\n    stroke: ${({ theme }) => theme.text1};\r\n  }\r\n`\r\n\r\nconst StyledMenu = styled.div`\r\n  margin-left: 0.5rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  border: none;\r\n  text-align: left;\r\n`\r\n\r\nconst MenuFlyout = styled.span`\r\n  min-width: 18.125rem;\r\n  background: ${palette('background', 0)};\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04),\r\n    0px 16px 24px rgba(0, 0, 0, 0.04), 0px 24px 32px rgba(0, 0, 0, 0.01);\r\n\r\n  border: 1px solid ${palette('gray', 0)};\r\n  border-radius: 0.5rem;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 1rem;\r\n  position: absolute;\r\n  top: 3rem;\r\n  right: -1rem;\r\n  z-index: 100;\r\n\r\n  padding: 8px 8px;\r\n\r\n  ${media.sm`\r\n    min-width: 20.125rem;\r\n  `}\r\n`\r\n\r\nconst StyledCol = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px 8px;\r\n`\r\n\r\nconst StyledRow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 4px 8px;\r\n`\r\n\r\nconst StyledToggleBtn = styled(Button).attrs({\r\n  typevalue: 'outline',\r\n  round: true,\r\n  fixedWidth: false,\r\n})`\r\n  margin-right: 8px;\r\n`\r\n\r\nconst slipOptions = [3, 5, 10]\r\n\r\nexport const SettingsOverlay = () => {\r\n  const node = useRef<HTMLDivElement>()\r\n\r\n  const {\r\n    isSettingOpen: open,\r\n    toggleSettings: toggle,\r\n    slippageTolerance,\r\n    feeOptionType,\r\n    FeeOptions,\r\n    setSlippage,\r\n    setFeeOptionType,\r\n  } = useApp()\r\n\r\n  useOnClickOutside(node, open ? toggle : undefined)\r\n\r\n  return (\r\n    <StyledMenu ref={node as any}>\r\n      <CoreButton onClick={toggle}>\r\n        <StyledMenuIcon />\r\n      </CoreButton>\r\n      {open && (\r\n        <MenuFlyout>\r\n          <StyledCol>\r\n            <StyledRow>\r\n              <Label>Slippage Tolerance</Label>\r\n              <Question tooltip=\"Your transaction will revert if the price changes unfavorably by more than this percentage.\" />\r\n            </StyledRow>\r\n            <StyledRow>\r\n              {slipOptions.map((slipOption: number) => (\r\n                <StyledToggleBtn\r\n                  onClick={() => setSlippage(slipOption)}\r\n                  focused={slippageTolerance === slipOption}\r\n                  key={slipOption}\r\n                >\r\n                  {slipOption}%\r\n                </StyledToggleBtn>\r\n              ))}\r\n            </StyledRow>\r\n          </StyledCol>\r\n          <StyledCol>\r\n            <StyledRow>\r\n              <Label>Transaction Fee</Label>\r\n              <Question tooltip=\"Accelerating a transaction by using a higher gas price increases its chances of getting processed by the network faster\" />\r\n            </StyledRow>\r\n            <StyledRow>\r\n              <StyledToggleBtn\r\n                onClick={() => setFeeOptionType(FeeOptions.average)}\r\n                focused={feeOptionType === FeeOptions.average}\r\n              >\r\n                Average\r\n              </StyledToggleBtn>\r\n              <StyledToggleBtn\r\n                onClick={() => setFeeOptionType(FeeOptions.fast)}\r\n                focused={feeOptionType === FeeOptions.fast}\r\n              >\r\n                Fast\r\n              </StyledToggleBtn>\r\n              <StyledToggleBtn\r\n                onClick={() => setFeeOptionType(FeeOptions.fastest)}\r\n                focused={feeOptionType === FeeOptions.fastest}\r\n              >\r\n                Fastest\r\n              </StyledToggleBtn>\r\n            </StyledRow>\r\n          </StyledCol>\r\n        </MenuFlyout>\r\n      )}\r\n    </StyledMenu>\r\n  )\r\n}\r\n","import { RefObject, useEffect, useRef } from 'react'\r\n\r\nexport function useOnClickOutside<T extends HTMLElement>(\r\n  node: RefObject<T | undefined>,\r\n  handler: undefined | (() => void),\r\n) {\r\n  const handlerRef = useRef<undefined | (() => void)>(handler)\r\n  useEffect(() => {\r\n    handlerRef.current = handler\r\n  }, [handler])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent) => {\r\n      if (node.current?.contains(e.target as Node) ?? false) {\r\n        return\r\n      }\r\n      if (handlerRef.current) handlerRef.current()\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  }, [node])\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { Label } from '../Label'\r\n\r\nexport const AddWalletWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .add-wallet-icon {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    width: 100px;\r\n    height: 100px;\r\n    margin-bottom: 20px;\r\n    border-radius: 50%;\r\n    background: ${palette('background', 1)};\r\n    svg {\r\n      width: 60px;\r\n      height: 60px;\r\n      fill: ${palette('gray', 1)};\r\n    }\r\n  }\r\n`\r\n\r\nexport const ConnectLabel = styled(Label)`\r\n  font-size: 14px;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n`\r\n","import { Collapse } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette, key } from 'styled-theme'\r\n\r\nconst { Panel: AntPanel } = Collapse\r\n\r\nexport const CollapseWrapper = styled(Collapse)`\r\n  &.ant-collapse {\r\n    border: none;\r\n    background-color: ${palette('background', 3)};\r\n\r\n    .ant-collapse-header {\r\n      color: ${palette('text', 0)};\r\n      font-size: ${key('sizes.font.big', '15px')};\r\n      font-weight: bold;\r\n      padding-top: 20px !important;\r\n      padding-bottom: 20px !important;\r\n      letter-spacing: 1px;\r\n    }\r\n\r\n    .ant-collapse-header,\r\n    .ant-collapse-content {\r\n      background-color: ${palette('background', 2)};\r\n      border: none;\r\n      .ant-collapse-content-box {\r\n        padding-left: 28px;\r\n      }\r\n    }\r\n\r\n    .collapse-panel-wrapper {\r\n      margin-bottom: 24px;\r\n      border: none !important;\r\n      border-radius: 4px;\r\n      background-color: ${palette('background', 1)};\r\n      overflow: hidden;\r\n    }\r\n  }\r\n`\r\n\r\nexport const Panel = styled(AntPanel)`\r\n  &.ant-collapse-content {\r\n    background-color: ${palette('background', 1)};\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { CollapseProps } from 'antd/lib/collapse'\r\n\r\nimport { Label } from '../Label'\r\nimport { CollapseWrapper, Panel } from './Collapse.style'\r\nimport { Item } from './data'\r\n\r\nexport type ComponentProps = {\r\n  data: Item[]\r\n  className?: string\r\n}\r\n\r\nexport type Props = ComponentProps & CollapseProps\r\n\r\nexport const Collapse: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const { data, className = '', ...otherProps } = props\r\n\r\n  return (\r\n    <CollapseWrapper\r\n      className={`collapse-wrapper ${className}`}\r\n      bordered={false}\r\n      {...otherProps}\r\n    >\r\n      {data.map((value, index) => {\r\n        const { title, content } = value\r\n\r\n        return (\r\n          <Panel header={title} className=\"collapse-panel-wrapper\" key={index}>\r\n            <Label size=\"big\" color=\"normal\">\r\n              {content}\r\n            </Label>\r\n          </Panel>\r\n        )\r\n      })}\r\n    </CollapseWrapper>\r\n  )\r\n}\r\n","import { transparentize } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const ContentTitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 64px;\r\n\r\n  background-color: ${(props) =>\r\n    transparentize(0.5, props.theme.palette.gray[0])};\r\n  border-radius: 1px solid ${palette('gray', 1)};\r\n\r\n  color: ${palette('text', 0)};\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  letter-spacing: 2px;\r\n  text-transform: uppercase;\r\n\r\n  border-radius: 14px;\r\n`\r\n","import React from 'react'\r\n\r\nimport { ContentTitleWrapper } from './ContentTitle.style'\r\n\r\nexport type Props = {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const ContentTitle = (props: Props) => {\r\n  return <ContentTitleWrapper {...props} />\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport { Label } from '../Label'\r\n\r\nconst NoWrapLabel = styled(Label)`\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nexport const Title = styled(NoWrapLabel)`\r\n  padding: 11px 0;\r\n  padding-bottom: 4px;\r\n`\r\n\r\nexport const Value = styled(NoWrapLabel)`\r\n  padding-top: 4px;\r\n  font-size: 13px;\r\n  text-transform: uppercase;\r\n`\r\n\r\nexport const StatusWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n`\r\n","import React from 'react'\r\n\r\nimport { CheckOutlined } from '@ant-design/icons'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { AssetIcon as BaseAssetIcon } from 'components/Assets/AssetIcon'\r\nimport { Label } from 'components/UIElements/Label'\r\n\r\ntype DragWrapperProps = {\r\n  dragging: boolean\r\n  missed: boolean\r\n  overlap: boolean\r\n  success: boolean\r\n  disabled: boolean\r\n}\r\n\r\nconst ICON_SIZE = '32px'\r\n\r\nexport const DragContainer = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 200px;\r\n  height: 40px;\r\n  border: 1px solid ${palette('primary', 0)};\r\n  padding: 0 4px;\r\n  ${(props: DragWrapperProps) =>\r\n    props.success && `border: 1px solid ${palette('success', 0)}`};\r\n\r\n  border-radius: 20px;\r\n  ${(props) => props.dragging && 'box-shadow: 0px 0px 4px 1px #50E3C2'};\r\n  ${(props) => props.success && 'box-shadow: 0px 0px 4px 1px #50E3C2'};\r\n  ${(props) => props.disabled && 'opacity: .5'};\r\n  ${(props) => props.disabled && 'cursor: not-allowed'};\r\n\r\n  overflow: hidden;\r\n\r\n  .source-asset {\r\n    position: absolute;\r\n    z-index: 500;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n    ${(props) => props.missed && 'transition: all .8s'};\r\n\r\n    &:hover {\r\n      box-shadow: '0px 0px 4px 1px #50E3C2';\r\n      ${(props) => props.success && 'box-shadow: 0px 0px 4px 1px #50E3C2'};\r\n    }\r\n\r\n    ${(props) => props.success && 'box-shadow: 0px 0px 4px 1px #50E3C2'};\r\n  }\r\n\r\n  .target-asset {\r\n    position: absolute;\r\n    right: 4px;\r\n    opacity: ${(props) => (props.overlap || props.success ? '1' : '0.5')};\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n    z-index: 300;\r\n\r\n    ${(props) => props.success && 'box-shadow: 0px 0px 4px 1px #50E3C2'};\r\n  }\r\n`\r\n\r\nexport const AssetIcon = styled(BaseAssetIcon)`\r\n  cursor: pointer;\r\n`\r\n\r\nexport const BlueIconPlaceholder = styled('div')`\r\n  cursor: pointer;\r\n  background: ${palette('secondary', 0)};\r\n  width: ${ICON_SIZE};\r\n  height: ${ICON_SIZE};\r\n`\r\n\r\nexport const ConfirmIconPlaceholder = styled('div').attrs({\r\n  className: 'target-asset',\r\n  children: <CheckOutlined />,\r\n})`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: ${ICON_SIZE};\r\n  height: ${ICON_SIZE};\r\n  background: ${palette('primary', 0)};\r\n  color: ${palette('background', 0)};\r\n`\r\n\r\nexport const TitleLabel = styled(Label).attrs({\r\n  align: 'center',\r\n})`\r\n  width: 200px;\r\n  font-size: 12px;\r\n  margin: 0 ${ICON_SIZE}; /* icon size */\r\n  text-transform: uppercase;\r\n  color: ${palette('text', 2)};\r\n`\r\n","import { InputNumber } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette, key } from 'styled-theme'\r\n\r\nimport { InputNumberWrapperColor, InputNumberWrapperSize } from './types'\r\n\r\nconst fontSettings = {\r\n  small: {\r\n    size: key('sizes.font.small', '10px'),\r\n  },\r\n  default: {\r\n    size: key('sizes.font.normal', '11px'),\r\n  },\r\n  large: {\r\n    size: key('sizes.font.normal', '12px'),\r\n  },\r\n}\r\n\r\nconst colors = {\r\n  primary: palette('gradient', 0),\r\n  success: palette('success', 0),\r\n  warning: palette('warning', 0),\r\n  error: palette('error', 0),\r\n}\r\n\r\ntype InputNumberWrapperProps = {\r\n  color: InputNumberWrapperColor\r\n  size: InputNumberWrapperSize\r\n}\r\n\r\nexport const InputNumberWrapper = styled(InputNumber)<InputNumberWrapperProps>`\r\n  &.ant-input-number {\r\n    font-size: ${(props) => fontSettings[props.size].size};\r\n    letter-spacing: '0.5px';\r\n    &:hover,\r\n    &:focus {\r\n      border-color: ${(props) => colors[props.color]};\r\n      --antd-wave-shadow-color: ${(props) => colors[props.color]};\r\n    }\r\n  }\r\n`\r\n","import { Modal } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const ModalWrapper = styled(Modal)`\r\n  border-color: ${palette('gray', 0)};\r\n\r\n  .ant-modal-content {\r\n    border-radius: 10px;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .ant-modal-header {\r\n    padding: 10px 14px;\r\n    text-align: center;\r\n    background: ${palette('gradient', 0)};\r\n    border: none;\r\n    text-transform: uppercase;\r\n    letter-spacing: 1.5px;\r\n\r\n    .ant-modal-title {\r\n      color: ${palette('text', 3)};\r\n    }\r\n  }\r\n  .ant-modal-body {\r\n    padding: 46px 32px;\r\n    background: ${palette('background', 1)};\r\n    border-color: ${palette('gray', 0)};\r\n\r\n    .ant-input-prefix {\r\n      color: ${palette('gray', 0)};\r\n    }\r\n    .ant-form-item-extra,\r\n    .ant-form-explain {\r\n      color: ${palette('text', 2)};\r\n    }\r\n  }\r\n  .ant-modal-close {\r\n    .ant-modal-close-x {\r\n      width: 44px;\r\n      height: 48px;\r\n      line-height: 48px;\r\n      color: ${palette('text', 3)};\r\n    }\r\n  }\r\n  .ant-modal-footer {\r\n    height: 46px;\r\n    padding: 0;\r\n    background: ${palette('background', 1)};\r\n    border-color: ${palette('gray', 0)};\r\n    text-transform: uppercase;\r\n\r\n    & > div {\r\n      display: flex;\r\n      flex-direction: row;\r\n      height: 100%;\r\n    }\r\n  }\r\n\r\n  .ok-ant-btn,\r\n  .cancel-ant-btn {\r\n    flex-grow: 1;\r\n    height: 100%;\r\n    border: none;\r\n    border-radius: 0px;\r\n    background: ${palette('background', 1)};\r\n    color: ${palette('text', 2)};\r\n\r\n    &:first-child {\r\n      border-right: 1px solid ${palette('gray', 0)};\r\n    }\r\n\r\n    &.disabled,\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n      color: ${palette('primary', 0)};\r\n      background-color: ${palette('background', 1)} !important;\r\n    }\r\n\r\n    &.ant-btn-primary {\r\n      color: ${palette('primary', 0)};\r\n      border-color: ${palette('gray', 0)};\r\n\r\n      &:hover,\r\n      &:active,\r\n      &:focus {\r\n        background-color: ${palette('gradient', 1)};\r\n        border-color: ${palette('gray', 1)};\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React, { ReactNode } from 'react'\r\n\r\nimport { ModalProps } from 'antd/lib/modal'\r\n\r\nimport { ModalWrapper } from './Modal.style'\r\n\r\nexport interface Props extends ModalProps {\r\n  children?: ReactNode\r\n}\r\n\r\nexport const Modal: React.FC<Props> = (props): JSX.Element => {\r\n  const { children, ...others } = props\r\n\r\n  return (\r\n    <ModalWrapper\r\n      okButtonProps={{ className: 'ok-ant-btn' }}\r\n      cancelButtonProps={{ className: 'cancel-ant-btn' }}\r\n      {...others}\r\n    >\r\n      {children}\r\n    </ModalWrapper>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nconst colors = {\r\n  red: palette('error', 0),\r\n  yellow: palette('warning', 0),\r\n  green: palette('success', 0),\r\n}\r\n\r\ntype Props = {\r\n  color: 'red' | 'yellow' | 'green'\r\n}\r\n\r\nexport const StatusBadgeWrapper = styled.div`\r\n  width: 14px;\r\n  height: 14px;\r\n  border: none;\r\n  border-radius: 50%;\r\n  background-color: ${(props: Props) =>\r\n    colors[props.color] || palette('success', 0)};\r\n  opacity: 0.5;\r\n`\r\n","import React from 'react'\r\n\r\nimport { StatusBadgeWrapper } from './StatusBadge.style'\r\n\r\nexport type Props = {\r\n  color?: 'red' | 'yellow' | 'green'\r\n}\r\n\r\nexport const StatusBadge = (props: Props) => {\r\n  const { color = 'red', ...others } = props\r\n\r\n  return <StatusBadgeWrapper color={color} {...others} />\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\ntype Props = {\r\n  size: number\r\n}\r\n\r\nexport const StepBarWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 9px;\r\n\r\n  .step-end-dot,\r\n  .step-start-dot {\r\n    width: 9px;\r\n    height: 9px;\r\n    border-radius: 50%;\r\n    background: ${palette('gray', 1)};\r\n  }\r\n\r\n  .step-bar-line {\r\n    width: 5px;\r\n    ${(props: Props) => `height: ${props.size}px;`};\r\n    border-right: 1px solid ${palette('gray', 1)};\r\n  }\r\n`\r\n","import { Tabs } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { size, key, palette } from 'styled-theme'\r\n\r\ntype Props = {\r\n  action: boolean\r\n  withBorder: boolean\r\n}\r\n\r\nexport const StyledTab = styled(Tabs)`\r\n  width: 100%;\r\n\r\n  .ant-tabs-nav-wrap {\r\n    justify-content: center;\r\n  }\r\n\r\n  .ant-tabs {\r\n    .ant-tabs-nav-container,\r\n    .ant-tabs-nav-wrap,\r\n    .ant-tabs-nav-scroll,\r\n    .ant-tabs-nav {\r\n      overflow: visible !important;\r\n    }\r\n  }\r\n\r\n  .ant-tabs-nav {\r\n    height: ${size('panelHeaderHeight', '50px')};\r\n    padding: 0 ${key('sizes.gutter.content', '25px')};\r\n    font-size: 12px;\r\n    text-transform: uppercase;\r\n\r\n    &::before {\r\n      border-bottom-width: ${(props: Props) =>\r\n        props.withBorder ? '1px' : '0px'} !important;\r\n      border-color: ${palette('gray', 0)};\r\n    }\r\n\r\n    .ant-tabs-tab,\r\n    .ant-tabs-tab a {\r\n      padding-top: 18px;\r\n      letter-spacing: 2.5px;\r\n      color: ${palette('text', 0)};\r\n      font-weight: bold;\r\n\r\n      &:hover {\r\n        color: ${palette('primary', 0)};\r\n      }\r\n    }\r\n\r\n    .ant-tabs-tab-active,\r\n    .ant-tabs-tab-active .ant-tabs-tab-btn {\r\n      color: ${palette('primary', 0)};\r\n    }\r\n\r\n    .ant-tabs-ink-bar {\r\n      bottom: 0px;\r\n      height: 3px;\r\n      background: ${palette('gradient', 0)};\r\n    }\r\n  }\r\n\r\n  .ant-tabs-content {\r\n    width: 100%;\r\n    height: ${(props: Props) => (props.action ? '0' : 'auto')};\r\n    padding: ${key('sizes.gutter.vertical', '20px')} 0;\r\n    ${(props: Props) => props.action && 'padding: 0 0;'}\r\n  }\r\n\r\n  .ant-tabs-nav .ant-tabs-tab-disabled,\r\n  .ant-tabs-nav .ant-tabs-tab-disabled:hover {\r\n    color: ${palette('text', 2)};\r\n    cursor: not-allowed;\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { Tabs as AntTabs } from 'antd'\r\nimport { TabsProps } from 'antd/lib/tabs'\r\n\r\nimport { StyledTab } from './Tabs.style'\r\n\r\ntype ComponentProps = {\r\n  action: boolean\r\n  withBorder?: boolean\r\n  children: React.ReactNode\r\n}\r\n\r\nexport type Props = ComponentProps & TabsProps\r\n\r\nexport const Tabs = (props: Props) => {\r\n  const { withBorder = true } = props\r\n  return <StyledTab withBorder={withBorder} {...props} />\r\n}\r\n\r\nexport const { TabPane } = AntTabs\r\n","import styled from 'styled-components'\r\n\r\nexport const TxProgressWrapper = styled.div`\r\n  position: relative;\r\n  width: 26px;\r\n  height: 26px;\r\n  cursor: pointer;\r\n  opacity: 0.4;\r\n\r\n  &.active {\r\n    opacity: 1;\r\n  }\r\n\r\n  .timerchart-icon {\r\n    position: absolute;\r\n    top: 2px;\r\n    left: 2px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    width: 22px;\r\n    height: 22px;\r\n\r\n    svg {\r\n      width: 22px;\r\n      height: 22px;\r\n    }\r\n  }\r\n\r\n  .timerchart-circular-progressbar {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    &.hide {\r\n      visibility: hidden;\r\n    }\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const TxTimerWrapper = styled.div`\r\n  position: relative;\r\n  width: 100px;\r\n  height: 100px;\r\n\r\n  .timerchart-icon {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: ${palette('background', 1)};\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .confirm-icon {\r\n    }\r\n  }\r\n\r\n  .timerchart-circular-progressbar {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    &.hide {\r\n      visibility: hidden;\r\n    }\r\n  }\r\n`\r\n","import styled from 'styled-components/macro'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n`\r\n","import React from 'react'\r\n\r\nimport { Label } from '../Label'\r\nimport * as Styled from './Information.style'\r\n\r\nexport type InformationProps = {\r\n  title: string\r\n  description: string\r\n  error?: boolean\r\n}\r\n\r\nexport const Information = ({\r\n  title,\r\n  description,\r\n  error = false,\r\n}: InformationProps) => {\r\n  return (\r\n    <Styled.Container>\r\n      <Label color={error ? 'error' : 'normal'}>\r\n        <b>{title}: </b>\r\n        {description}\r\n      </Label>\r\n    </Styled.Container>\r\n  )\r\n}\r\n","import { Chain } from '@xchainjs/xchain-util'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\nimport { Wallet } from '../clients/types'\r\nimport { Asset, AssetAmount, Pool, Amount } from '../entities'\r\n\r\nexport const getWalletAssets = (wallet: Wallet | null) => {\r\n  const assets: Asset[] = []\r\n\r\n  if (!wallet) return assets\r\n\r\n  wallet.balance.forEach((data: AssetAmount) => {\r\n    assets.push(data.asset)\r\n  })\r\n\r\n  return assets\r\n}\r\n\r\nexport const getWalletAddressByChain = (\r\n  wallet: Wallet,\r\n  chain: Chain,\r\n): string | null => {\r\n  if (chain in wallet) {\r\n    return wallet?.address ?? null\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const getAssetUSDPrice = (asset: Asset, pools: Pool[]): BigNumber => {\r\n  const assetPool = pools.find((pool) => pool.asset.eq(asset))\r\n\r\n  if (!assetPool) return new BigNumber(0)\r\n\r\n  return new BigNumber(assetPool.detail.assetPriceUSD)\r\n}\r\n\r\nexport const getAssetBalance = (asset: Asset, wallet: Wallet): AssetAmount => {\r\n  const emptyAmount = new AssetAmount(\r\n    asset,\r\n    Amount.fromBaseAmount(0, asset.decimal),\r\n  )\r\n\r\n  return (\r\n    wallet.balance.find((assetData: AssetAmount) =>\r\n      assetData.asset.eq(asset),\r\n    ) || emptyAmount\r\n  )\r\n}\r\n\r\nexport const getTotalUSDPriceInBalance = (\r\n  balance: AssetAmount[],\r\n  pools: Pool[],\r\n): BigNumber => {\r\n  let total = new BigNumber(0)\r\n\r\n  if (!balance.length) return total\r\n\r\n  balance.forEach((assetBalance: AssetAmount) => {\r\n    const usdPrice = getAssetUSDPrice(assetBalance.asset, pools)\r\n\r\n    total = total.plus(assetBalance.amount.assetAmount.multipliedBy(usdPrice))\r\n  })\r\n\r\n  return total\r\n}\r\n","import { Chain, THORChain } from '@xchainjs/xchain-util'\r\n\r\nimport { Amount, Asset, Pool, Price } from '../entities'\r\n\r\n/**\r\n * return a ticker of asset that represents the network fee\r\n * @param chain\r\n */\r\nexport const chainToFeeAsset = (chain: Chain): string => {\r\n  if (chain === THORChain) return 'RUNE'\r\n\r\n  return chain\r\n}\r\n\r\n/**\r\n *\r\n * @param runeAmount rune amount\r\n * @param quoteAsset quote asset - selected base currency\r\n * @param pools pools\r\n */\r\nexport const runeToAsset = ({\r\n  runeAmount,\r\n  quoteAsset,\r\n  pools,\r\n}: {\r\n  runeAmount: Amount\r\n  quoteAsset?: Asset | null\r\n  pools: Pool[]\r\n}): Price => {\r\n  const price = new Price({\r\n    baseAsset: Asset.RUNE(),\r\n    quoteAsset: quoteAsset || Asset.RUNE(),\r\n    pools,\r\n    priceAmount: runeAmount,\r\n  })\r\n\r\n  return price\r\n}\r\n","import React from 'react'\r\n\r\nimport { Helmet as ReactHelmet } from 'react-helmet'\r\n\r\nexport const Helmet = ({\r\n  title,\r\n  content,\r\n}: {\r\n  title: string\r\n  content: string\r\n}) => (\r\n  <ReactHelmet>\r\n    <title>{title}</title>\r\n    <meta name=\"description\" content={content} />\r\n  </ReactHelmet>\r\n)\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport WebFont from 'webfontloader'\r\n\r\nexport type Props = {\r\n  config: WebFont.Config\r\n  onStatus?: (status: string) => void\r\n  children: JSX.Element\r\n}\r\n\r\nexport const WebFontLoader: React.FC<Props> = (props): JSX.Element => {\r\n  const { config, onStatus = () => {}, children } = props\r\n  const [status, setStatus] = useState<string>('')\r\n\r\n  const handleLoading = () => {\r\n    setStatus('loading')\r\n  }\r\n\r\n  const handleActive = () => {\r\n    setStatus('active')\r\n  }\r\n\r\n  const handleInactive = () => {\r\n    setStatus('inactive')\r\n  }\r\n\r\n  const loadFonts = () => {\r\n    WebFont.load({\r\n      ...config,\r\n      loading: handleLoading,\r\n      active: handleActive,\r\n      inactive: handleInactive,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadFonts()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    onStatus(status)\r\n  }, [onStatus, status])\r\n\r\n  return children\r\n}\r\n\r\nexport default WebFontLoader\r\n","import React from 'react'\r\n\r\nimport { Row, Col } from 'antd'\r\nimport { Percent, Amount } from 'multichain-sdk'\r\n\r\nimport { useGlobalState } from 'redux/hooks'\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport { StatsCard } from '../UIElements/StatsCard'\r\n\r\nexport const GlobalStats: React.FC = (): JSX.Element => {\r\n  const { stats, networkData } = useMidgard()\r\n  const { runeToCurrency } = useGlobalState()\r\n\r\n  const bondingAPYLabel = new Percent(networkData?.bondingAPY ?? 0).toFixed(2)\r\n  const liquidityAPYLabel = new Percent(networkData?.liquidityAPY ?? 0).toFixed(\r\n    2,\r\n  )\r\n\r\n  const swapVolume = Amount.fromMidgard(stats?.swapVolume)\r\n  const addLiquidityVolume = Amount.fromMidgard(stats?.addLiquidityVolume)\r\n  const withdrawVolume = Amount.fromMidgard(stats?.withdrawVolume)\r\n\r\n  const swapCount = Amount.fromNormalAmount(stats?.swapCount)\r\n  const addLiquidityCount = Amount.fromNormalAmount(stats?.addLiquidityCount)\r\n  const withdrawCount = Amount.fromNormalAmount(stats?.withdrawCount)\r\n\r\n  const totalVolume = swapVolume.add(addLiquidityVolume).add(withdrawVolume)\r\n  const totalTx = swapCount.add(addLiquidityCount).add(withdrawCount)\r\n\r\n  const statsData = React.useMemo(() => {\r\n    return [\r\n      {\r\n        title: 'Total Volume',\r\n        value: runeToCurrency(totalVolume).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Total Tx',\r\n        value: totalTx.toFixed(0),\r\n      },\r\n      {\r\n        title: 'Total Rune Depth',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(stats?.runeDepth),\r\n        ).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Monthly Active Users',\r\n        value: Amount.fromNormalAmount(stats?.monthlyActiveUsers).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Bonding APY',\r\n        value: bondingAPYLabel,\r\n      },\r\n      {\r\n        title: 'Liquidity APY',\r\n        value: liquidityAPYLabel,\r\n      },\r\n    ]\r\n  }, [\r\n    stats,\r\n    bondingAPYLabel,\r\n    liquidityAPYLabel,\r\n    totalVolume,\r\n    totalTx,\r\n    runeToCurrency,\r\n  ])\r\n\r\n  return (\r\n    <Row gutter={[16, 16]}>\r\n      {statsData.map((statProps, index) => {\r\n        return (\r\n          <Col\r\n            key={index}\r\n            xs={{ span: 24 }}\r\n            sm={{ span: 12 }}\r\n            md={{ span: 8 }}\r\n            lg={{ span: 8 }}\r\n            xl={{ span: 4 }}\r\n          >\r\n            <StatsCard {...statProps} />\r\n          </Col>\r\n        )\r\n      })}\r\n    </Row>\r\n  )\r\n}\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\n\r\nimport { Grid, Row, Col } from 'antd'\r\nimport { Amount } from 'multichain-sdk'\r\n\r\nimport { Label } from 'components/UIElements'\r\n\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport { Chart } from '../Chart'\r\nimport { ChartDetail, ChartValues, ChartData } from '../Chart/types'\r\n\r\n// display volume and earning time series graph\r\nexport const GlobalChart = () => {\r\n  const isDesktopView = Grid.useBreakpoint()?.md ?? true\r\n\r\n  const {\r\n    getGlobalHistory,\r\n    isGlobalHistoryLoading,\r\n    earningsHistory,\r\n    swapHistory,\r\n    liquidityHistory,\r\n  } = useMidgard()\r\n\r\n  useEffect(() => {\r\n    getGlobalHistory()\r\n  }, [getGlobalHistory])\r\n\r\n  const [volumeChartIndex, setVolumeChartIndex] = useState('Total')\r\n  const [earningChartIndex, setEarningChartIndex] = useState('Total')\r\n  const volumeChartIndexes = useMemo(\r\n    () =>\r\n      isDesktopView ? ['Total', 'Swap', 'Add', 'Withdraw'] : ['Total', 'Swap'],\r\n    [isDesktopView],\r\n  )\r\n  const earningChartIndexes = useMemo(\r\n    () =>\r\n      isDesktopView\r\n        ? ['Total', 'Liquidity', 'Fee', 'Boding']\r\n        : ['Total', 'Liquidity'],\r\n    [isDesktopView],\r\n  )\r\n\r\n  const chartValueUnit = 'ᚱ'\r\n\r\n  const initialChartData = useMemo(() => {\r\n    const initialData: ChartData = {}\r\n    const defaultChartValues: ChartValues = []\r\n\r\n    const chartIndexes = [...volumeChartIndexes, ...earningChartIndexes]\r\n\r\n    chartIndexes.forEach((chartIndex) => {\r\n      initialData[chartIndex] = {\r\n        values: defaultChartValues,\r\n        loading: true,\r\n      }\r\n    })\r\n\r\n    return initialData\r\n  }, [volumeChartIndexes, earningChartIndexes])\r\n\r\n  const volumeChartData: ChartData = useMemo(() => {\r\n    if (isGlobalHistoryLoading || !swapHistory || !liquidityHistory) {\r\n      return initialChartData\r\n    }\r\n\r\n    const swapData = swapHistory.intervals || []\r\n    const liquidityData = liquidityHistory.intervals || []\r\n\r\n    const totalVolume: ChartDetail[] = []\r\n    const swapVolume: ChartDetail[] = []\r\n    const addVolume: ChartDetail[] = []\r\n    const withdrawVolume: ChartDetail[] = []\r\n\r\n    swapData.forEach((data, index) => {\r\n      const liquidityValue = liquidityData[index]\r\n      const time = Number(data?.startTime ?? 0)\r\n\r\n      const swapValue = Amount.fromMidgard(data?.totalVolume)\r\n      const addValue = Amount.fromMidgard(liquidityValue?.addLiquidityVolume)\r\n      const withdrawValue = Amount.fromMidgard(liquidityValue?.withdrawVolume)\r\n\r\n      const total = swapValue.add(addValue).add(withdrawValue)\r\n\r\n      swapVolume.push({\r\n        time,\r\n        value: swapValue.assetAmount.toString(),\r\n      })\r\n      addVolume.push({\r\n        time,\r\n        value: addValue.assetAmount.toString(),\r\n      })\r\n      withdrawVolume.push({\r\n        time,\r\n        value: withdrawValue.assetAmount.toString(),\r\n      })\r\n      totalVolume.push({\r\n        time,\r\n        value: total.assetAmount.toString(),\r\n      })\r\n    })\r\n\r\n    return {\r\n      Total: {\r\n        values: totalVolume,\r\n        unit: chartValueUnit,\r\n      },\r\n      Swap: {\r\n        values: swapVolume,\r\n        unit: chartValueUnit,\r\n      },\r\n      Add: {\r\n        values: addVolume,\r\n        unit: chartValueUnit,\r\n      },\r\n      Withdraw: {\r\n        values: withdrawVolume,\r\n        unit: chartValueUnit,\r\n      },\r\n    }\r\n  }, [swapHistory, liquidityHistory, isGlobalHistoryLoading, initialChartData])\r\n\r\n  const earningChartData: ChartData = useMemo(() => {\r\n    if (isGlobalHistoryLoading || !earningsHistory) {\r\n      return initialChartData\r\n    }\r\n\r\n    const earningsData = earningsHistory.intervals || []\r\n\r\n    const totalEarning: ChartDetail[] = []\r\n    const bondingEarning: ChartDetail[] = []\r\n    const liquidityEarning: ChartDetail[] = []\r\n    const liquidityFee: ChartDetail[] = []\r\n\r\n    earningsData.forEach((data) => {\r\n      const time = Number(data?.startTime ?? 0)\r\n      totalEarning.push({\r\n        time,\r\n        value: Amount.fromMidgard(data?.earnings).assetAmount.toString(),\r\n      })\r\n      bondingEarning.push({\r\n        time,\r\n        value: Amount.fromMidgard(data?.bondingEarnings).assetAmount.toString(),\r\n      })\r\n      liquidityEarning.push({\r\n        time,\r\n        value: Amount.fromMidgard(\r\n          data?.liquidityEarnings,\r\n        ).assetAmount.toString(),\r\n      })\r\n      liquidityFee.push({\r\n        time,\r\n        value: Amount.fromMidgard(data?.liquidityFees).assetAmount.toString(),\r\n      })\r\n    })\r\n\r\n    return {\r\n      Total: {\r\n        values: totalEarning,\r\n        unit: chartValueUnit,\r\n      },\r\n      Liquidity: {\r\n        values: liquidityEarning,\r\n        unit: chartValueUnit,\r\n      },\r\n      Bonding: {\r\n        values: bondingEarning,\r\n        unit: chartValueUnit,\r\n      },\r\n      Fee: {\r\n        values: liquidityFee,\r\n        unit: chartValueUnit,\r\n      },\r\n    }\r\n  }, [earningsHistory, isGlobalHistoryLoading, initialChartData])\r\n\r\n  return (\r\n    <Row gutter={[12, 12]}>\r\n      <Col xs={24} md={12}>\r\n        <Label size=\"big\" color=\"primary\">\r\n          Volume\r\n        </Label>\r\n        <Chart\r\n          chartIndexes={volumeChartIndexes}\r\n          chartData={volumeChartData}\r\n          selectedIndex={volumeChartIndex}\r\n          selectChart={setVolumeChartIndex}\r\n        />\r\n      </Col>\r\n      <Col xs={24} md={12}>\r\n        <Label size=\"big\" color=\"primary\">\r\n          Earnings\r\n        </Label>\r\n        <Chart\r\n          chartIndexes={earningChartIndexes}\r\n          chartData={earningChartData}\r\n          selectedIndex={earningChartIndex}\r\n          selectChart={setEarningChartIndex}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { Row, Col } from 'antd'\r\nimport { Percent, Amount, Pool } from 'multichain-sdk'\r\n\r\nimport { useGlobalState } from 'redux/hooks'\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport { StatsCard } from '../UIElements/StatsCard'\r\n\r\nexport type PoolStatsProps = {\r\n  pool: Pool\r\n}\r\n\r\nexport const PoolStats = ({ pool }: PoolStatsProps): JSX.Element => {\r\n  const dispatch = useDispatch()\r\n  const { poolStatsLoading, poolStats, actions } = useMidgard()\r\n  const { runeToCurrency } = useGlobalState()\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      actions.getPoolStats({ asset: pool.asset.toString(), period: '30d' }),\r\n    )\r\n  }, [dispatch, actions, pool])\r\n\r\n  const poolAPY = new Percent(pool?.detail?.poolAPY ?? 0).toFixed(2)\r\n\r\n  const swapVolume = Amount.fromMidgard(poolStats?.swapVolume)\r\n  const addLiquidityVolume = Amount.fromMidgard(poolStats?.addLiquidityVolume)\r\n  const withdrawVolume = Amount.fromMidgard(poolStats?.withdrawVolume)\r\n\r\n  const swapCount = Amount.fromMidgard(poolStats?.swapCount)\r\n  const addLiquidityCount = Amount.fromMidgard(poolStats?.addLiquidityCount)\r\n  const withdrawCount = Amount.fromMidgard(poolStats?.withdrawCount)\r\n\r\n  const totalVolume = swapVolume.add(addLiquidityVolume).add(withdrawVolume)\r\n  const totalTx = swapCount.add(addLiquidityCount).add(withdrawCount)\r\n\r\n  const statsData = React.useMemo(() => {\r\n    return [\r\n      {\r\n        title: 'Total Volume',\r\n        value: runeToCurrency(totalVolume).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Liquidity',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(pool?.detail?.runeDepth).mul(2),\r\n        ).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Volume 24H',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(pool?.detail?.volume24h),\r\n        ).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Pool Units',\r\n        value: Amount.fromMidgard(pool?.detail?.units).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Asset USD Price',\r\n        value: Amount.fromNormalAmount(pool?.detail?.assetPriceUSD).toFixed(3),\r\n      },\r\n      {\r\n        title: 'APY',\r\n        value: poolAPY,\r\n      },\r\n      {\r\n        title: 'Total Tx',\r\n        value: totalTx.toFixed(0),\r\n      },\r\n      {\r\n        title: 'Members',\r\n        value: Amount.fromNormalAmount(poolStats?.uniqueMemberCount).toFixed(0),\r\n      },\r\n    ]\r\n  }, [pool, poolAPY, poolStats, totalVolume, totalTx, runeToCurrency])\r\n\r\n  if (poolStatsLoading || !poolStats) return <></>\r\n\r\n  return (\r\n    <Row gutter={[16, 16]}>\r\n      {statsData.map((statProps, index) => {\r\n        return (\r\n          <Col\r\n            key={index}\r\n            xs={{ span: 12 }}\r\n            sm={{ span: 12 }}\r\n            md={{ span: 12 }}\r\n            lg={{ span: 12 }}\r\n            xl={{ span: 12 }}\r\n          >\r\n            <StatsCard {...statProps} />\r\n          </Col>\r\n        )\r\n      })}\r\n    </Row>\r\n  )\r\n}\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { Grid } from 'antd'\r\nimport { Pool, Amount } from 'multichain-sdk'\r\n\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nimport { Chart } from '../Chart'\r\nimport { ChartDetail, ChartValues, ChartData } from '../Chart/types'\r\n\r\nexport type PoolChartProps = {\r\n  pool: Pool\r\n}\r\n\r\nexport const PoolChart = ({ pool, ...otherProps }: PoolChartProps) => {\r\n  const dispatch = useDispatch()\r\n  const isDesktopView = Grid.useBreakpoint()?.md ?? true\r\n\r\n  const {\r\n    getPoolHistory,\r\n    swapHistory,\r\n    swapHistoryLoading,\r\n    depthHistory,\r\n    depthHistoryLoading,\r\n    liquidityHistory,\r\n    liquidityHistoryLoading,\r\n  } = useMidgard()\r\n\r\n  const isLoading = useMemo(\r\n    () => depthHistoryLoading || liquidityHistoryLoading || swapHistoryLoading,\r\n    [depthHistoryLoading, liquidityHistoryLoading, swapHistoryLoading],\r\n  )\r\n\r\n  useEffect(() => {\r\n    getPoolHistory(pool.asset.toString())\r\n  }, [dispatch, getPoolHistory, pool])\r\n\r\n  const [chartIndex, setChartIndex] = useState('Volume')\r\n  const chartIndexes = useMemo(\r\n    () =>\r\n      isDesktopView ? ['Volume', 'Liquidity', 'Price'] : ['Volume', 'Price'],\r\n    [isDesktopView],\r\n  )\r\n\r\n  const chartValueUnit = 'ᚱ'\r\n\r\n  const initialChartData = useMemo(() => {\r\n    const initialData: ChartData = {}\r\n    const defaultChartValues: ChartValues = []\r\n\r\n    chartIndexes.forEach((index) => {\r\n      initialData[index] = {\r\n        values: defaultChartValues,\r\n        loading: true,\r\n      }\r\n    })\r\n\r\n    return initialData\r\n  }, [chartIndexes])\r\n\r\n  const chartData: ChartData = useMemo(() => {\r\n    if (isLoading || !depthHistory || !liquidityHistory || !swapHistory) {\r\n      return initialChartData\r\n    }\r\n\r\n    const depthData = depthHistory.intervals || []\r\n    const liquidityData = liquidityHistory.intervals || []\r\n    const swapData = swapHistory.intervals || []\r\n\r\n    const volumeChart: ChartDetail[] = []\r\n    const liquidityChart: ChartDetail[] = []\r\n    const priceChart: ChartDetail[] = []\r\n\r\n    depthData.forEach((data, index) => {\r\n      const liquidityValue = liquidityData[index]\r\n      const swapValues = swapData[index]\r\n      const time = Number(data?.startTime ?? 0)\r\n\r\n      const swapValue = Amount.fromMidgard(swapValues?.totalVolume)\r\n      const addValue = Amount.fromMidgard(liquidityValue?.addLiquidityVolume)\r\n      const withdrawValue = Amount.fromMidgard(liquidityValue?.withdrawVolume)\r\n\r\n      const total = swapValue.add(addValue).add(withdrawValue)\r\n      const liquidity = Amount.fromMidgard(data?.runeDepth).mul(2)\r\n      const usdPrice = Amount.fromNormalAmount(data?.assetPriceUSD)\r\n\r\n      volumeChart.push({\r\n        time,\r\n        value: total.assetAmount.toString(),\r\n      })\r\n      liquidityChart.push({\r\n        time,\r\n        value: liquidity.assetAmount.toString(),\r\n      })\r\n      priceChart.push({\r\n        time,\r\n        value: usdPrice.assetAmount.toString(),\r\n      })\r\n    })\r\n\r\n    return {\r\n      Volume: {\r\n        values: volumeChart,\r\n        unit: chartValueUnit,\r\n      },\r\n      Liquidity: {\r\n        values: liquidityChart,\r\n        unit: chartValueUnit,\r\n      },\r\n      Price: {\r\n        values: priceChart,\r\n        unit: '$',\r\n      },\r\n    }\r\n  }, [depthHistory, liquidityHistory, swapHistory, isLoading, initialChartData])\r\n\r\n  return (\r\n    <Chart\r\n      chartIndexes={chartIndexes}\r\n      chartData={chartData}\r\n      selectedIndex={chartIndex}\r\n      selectChart={setChartIndex}\r\n      {...otherProps}\r\n    />\r\n  )\r\n}\r\n","import { Menu as AntdMenu } from 'antd'\r\nimport styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const Menu = styled(AntdMenu)`\r\n  background: ${palette('background', 1)};\r\n  li.ant-dropdown-menu-item {\r\n    color: ${palette('text', 0)};\r\n    &:hover,\r\n    &.ant-dropdown-menu-item-selected {\r\n      color: ${palette('text', 1)};\r\n      background: ${palette('secondary', 1)};\r\n    }\r\n  }\r\n`\r\n","import { notification } from 'antd'\r\n\r\nimport { getAppContainer } from 'helpers/element'\r\n\r\ntype NotificationType = {\r\n  type: 'open' | 'success' | 'info' | 'warning' | 'error'\r\n  message: string\r\n  description?: React.ReactNode\r\n  duration?: number\r\n  btn?: React.ReactNode\r\n}\r\n\r\nexport const Notification = ({\r\n  type,\r\n  message,\r\n  description = '',\r\n  duration = 10,\r\n  btn,\r\n}: NotificationType) => {\r\n  notification[type]({\r\n    message,\r\n    description,\r\n    duration,\r\n    btn,\r\n    getContainer: getAppContainer,\r\n  })\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const IconButton = styled.button`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  border: none;\r\n  background-color: transparent;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 32px;\r\n  margin-left: 8px;\r\n  padding: 0.15rem 0.25rem;\r\n  border-radius: 0.5rem;\r\n\r\n  outline: none;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n    outline: none;\r\n    background-color: ${palette('background', 2)};\r\n  }\r\n\r\n  svg {\r\n    margin-top: 2px;\r\n  }\r\n  > * {\r\n    stroke: ${palette('text', 0)};\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nexport const CoreButton = styled.button`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  border: none;\r\n  background-color: transparent;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 32px;\r\n  margin-left: 8px;\r\n  padding: 0.15rem 0.25rem;\r\n  border-radius: 0.5rem;\r\n\r\n  outline: none;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n    outline: none;\r\n    background-color: ${palette('background', 2)};\r\n  }\r\n\r\n  svg {\r\n    margin-top: 2px;\r\n  }\r\n  > * {\r\n    stroke: ${palette('text', 0)};\r\n  }\r\n`\r\n","/* eslint-disable jsx-a11y/tabindex-no-positive */\r\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\r\nimport React from 'react'\r\n\r\nimport { isMobile } from 'react-device-detect'\r\nimport { animated, useTransition, useSpring } from 'react-spring'\r\nimport { useGesture } from 'react-use-gesture'\r\n\r\nimport { DialogOverlay, DialogContent } from '@reach/dialog'\r\nimport { transparentize } from 'polished'\r\nimport styled, { css } from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport '@reach/dialog/styles.css'\r\nimport { media } from 'helpers/style'\r\n\r\nconst AnimatedDialogOverlay = animated(DialogOverlay)\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst StyledDialogOverlay = styled(AnimatedDialogOverlay)`\r\n  &[data-reach-dialog-overlay] {\r\n    z-index: 2;\r\n    background-color: transparent;\r\n    overflow: hidden;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    background-color: ${(props) =>\r\n      transparentize(0.2, props.theme.palette.background[0])};\r\n\r\n    /* top: 100px; */\r\n  }\r\n`\r\n\r\nconst AnimatedDialogContent = animated(DialogContent)\r\n// destructure to not pass custom props to Dialog DOM element\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst StyledDialogContent = styled(\r\n  ({ minHeight, maxHeight, mobile, isOpen, ...rest }) => (\r\n    <AnimatedDialogContent {...rest} />\r\n  ),\r\n).attrs({\r\n  'aria-label': 'dialog',\r\n})`\r\n  &[data-reach-dialog-content] {\r\n    margin: 0 0 2rem 0;\r\n    border: 1px solid ${palette('gray', 0)};\r\n    background: ${palette('background', 0)};\r\n    box-shadow: 0 4px 8px 0\r\n      ${(props) => transparentize(0.7, props.theme.palette.background[0])};\r\n    padding: 0px;\r\n    width: 50vw;\r\n    overflow: hidden;\r\n\r\n    align-self: ${({ mobile }) => (mobile ? 'flex-end' : 'center')};\r\n\r\n    max-width: 420px;\r\n    ${({ maxHeight }) =>\r\n      maxHeight &&\r\n      css`\r\n        max-height: ${maxHeight}vh;\r\n      `}\r\n    ${({ minHeight }) =>\r\n      minHeight &&\r\n      css`\r\n        min-height: ${minHeight}vh;\r\n      `}\r\n    display: flex;\r\n    border-radius: 20px;\r\n\r\n    width: 85vw;\r\n    ${({ mobile }) =>\r\n      mobile &&\r\n      css`\r\n        width: 100vw;\r\n        border-radius: 20px;\r\n        border-bottom-left-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n      `}\r\n    ${media.md`\r\n      width: 65vw;\r\n      margin: 0;\r\n    `}\r\n  }\r\n`\r\n\r\nexport interface OverlayProps {\r\n  isOpen: boolean\r\n  onDismiss: () => void\r\n  minHeight?: number | false\r\n  maxHeight?: number\r\n  initialFocusRef?: React.RefObject<any>\r\n  children?: React.ReactNode\r\n}\r\n\r\nfunction Overlay({\r\n  isOpen,\r\n  onDismiss,\r\n  minHeight = false,\r\n  maxHeight = 50,\r\n  initialFocusRef,\r\n  children,\r\n}: OverlayProps) {\r\n  const fadeTransition = useTransition(isOpen, null, {\r\n    config: { duration: 200 },\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  })\r\n\r\n  const [{ y }, set] = useSpring(() => ({\r\n    y: 0,\r\n    config: { mass: 1, tension: 210, friction: 20 },\r\n  }))\r\n  const bind = useGesture({\r\n    onDrag: (state) => {\r\n      set({\r\n        y: state.down ? state.movement[1] : 0,\r\n      })\r\n      if (\r\n        state.movement[1] > 300 ||\r\n        (state.velocity > 3 && state.direction[1] > 0)\r\n      ) {\r\n        onDismiss()\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {fadeTransition.map(\r\n        ({ item, key, props }) =>\r\n          item && (\r\n            <StyledDialogOverlay\r\n              key={key}\r\n              style={props}\r\n              onDismiss={onDismiss}\r\n              initialFocusRef={initialFocusRef}\r\n            >\r\n              <StyledDialogContent\r\n                {...(isMobile\r\n                  ? {\r\n                      ...bind(),\r\n                      style: {\r\n                        transform: y.interpolate(\r\n                          (y) => `translateY(${(y as number) > 0 ? y : 0}px)`,\r\n                        ),\r\n                      },\r\n                    }\r\n                  : {})}\r\n                minHeight={minHeight}\r\n                maxHeight={maxHeight}\r\n                mobile={isMobile}\r\n              >\r\n                {/* prevents the automatic focusing of inputs on mobile by the reach dialog */}\r\n                {!initialFocusRef && isMobile ? <div tabIndex={1} /> : null}\r\n                {children}\r\n              </StyledDialogContent>\r\n            </StyledDialogOverlay>\r\n          ),\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Overlay }\r\n","import styled from 'styled-components'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { FancyButtonProps } from './types'\r\n\r\nexport const StyledButton = styled.button<FancyButtonProps>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  font-size: 1.2rem;\r\n  letter-spacing: 2px;\r\n  font-weight: 600;\r\n  color: white;\r\n  text-align: center;\r\n  min-width: 50px;\r\n  width: 100%;\r\n  height: 56px;\r\n  border-radius: 28px;\r\n\r\n  position: relative;\r\n  overflow: hidden;\r\n\r\n  background-size: 400% 400%;\r\n  animation: TransitioningBackground 10s ease infinite;\r\n\r\n  background-image: ${(props) =>\r\n    props.disabled\r\n      ? palette('background', 3)\r\n      : !props.error\r\n      ? 'linear-gradient(to left, #23dcc8, #00ccff, #23dcc8)'\r\n      : 'linear-gradient(to left, #FF4954, #00ccff, #FF4954)'};\r\n\r\n  border: none;\r\n  padding: 24px;\r\n  width: 220px;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  color: #fff;\r\n  background-size: 200%;\r\n  transition: 0.3s;\r\n\r\n  outline: none;\r\n\r\n  // psuedo-element shine animation left side\r\n  &::before {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    background: rgba(255, 255, 255, 0.5);\r\n    width: 60px;\r\n    height: 100%;\r\n    top: 0;\r\n    left: -30px;\r\n    filter: blur(30px);\r\n    transform: translateX(-100px) skewX(-30deg);\r\n  }\r\n\r\n  // psuedo-element shine animation right side\r\n  &::after {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    background: rgba(255, 255, 255, 0.2);\r\n    width: 30px;\r\n    height: 100%;\r\n    top: 0;\r\n    left: -30px;\r\n    filter: blur(5px);\r\n    transform: translateX(-100px) skewX(-30deg);\r\n  }\r\n\r\n  // grow button and change background gradient on hover\r\n  &:active,\r\n  &:hover {\r\n    cursor: pointer;\r\n\r\n    // psuedo-elements for right- and left-side shine animations\r\n    &::before,\r\n    &::after {\r\n      transform: translateX(420px) skewX(-15deg);\r\n      transition: 0.5s;\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nimport { StyledButton } from './FancyButton.style'\r\nimport { FancyButtonProps } from './types'\r\n\r\nexport const FancyButton = ({\r\n  disabled = false,\r\n  error = false,\r\n  ...others\r\n}: FancyButtonProps) => {\r\n  return <StyledButton error={error} disabled={disabled} {...others} />\r\n}\r\n","import styled from 'styled-components'\r\nimport { palette, key } from 'styled-theme'\r\n\r\nimport { Color, Size } from './types'\r\n\r\nconst fontSettings = {\r\n  tiny: {\r\n    size: key('sizes.font.tiny', '8px'),\r\n    spacing: '0.36px',\r\n  },\r\n  small: {\r\n    size: key('sizes.font.small', '10px'),\r\n    spacing: '0.42px',\r\n  },\r\n  normal: {\r\n    size: '13px',\r\n    spacing: '1px',\r\n  },\r\n  big: {\r\n    size: key('sizes.font.big', '15px'),\r\n    spacing: '1px',\r\n  },\r\n  large: {\r\n    size: key('sizes.font.large', '18px'),\r\n    spacing: '1px',\r\n  },\r\n}\r\n\r\nconst colors = {\r\n  gradient: palette('gradient', 0),\r\n  primary: palette('primary', 0),\r\n  success: palette('success', 0),\r\n  warning: palette('warning', 0),\r\n  error: palette('error', 0),\r\n  normal: palette('text', 0),\r\n  light: palette('text', 2),\r\n  dark: palette('text', 1),\r\n  gray: palette('text', 2),\r\n  input: palette('text', 2),\r\n  white: '#fff',\r\n}\r\n\r\ntype Props = {\r\n  sizeValue: Size\r\n  color: Color\r\n  weight: string\r\n  align: string\r\n  onClick?: () => void\r\n}\r\n\r\nexport const LabelWrapper = styled.div`\r\n  font-size: ${(props: Props) => fontSettings[props.sizeValue].size};\r\n  font-weight: ${(props: Props) => props.weight};\r\n  text-align: ${(props: Props) => props.align};\r\n  letter-spacing: ${(props: Props) => fontSettings[props.sizeValue].spacing};\r\n  color: ${(props: Props) => colors[props.color]};\r\n  cursor: ${(props: Props) => props.onClick && 'pointer'};\r\n`\r\n","import React from 'react'\r\n\r\nimport { LabelWrapper } from './Label.style'\r\nimport { Color, Size } from './types'\r\n\r\nexport type Props = {\r\n  size?: Size\r\n  color?: Color\r\n  weight?: string\r\n  align?: string\r\n  loading?: boolean\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const Label = (props: Props) => {\r\n  const {\r\n    loading = false,\r\n    size = 'normal',\r\n    color = 'normal',\r\n    weight = 'normal',\r\n    align = 'left',\r\n    children,\r\n    ...others\r\n  } = props\r\n\r\n  return (\r\n    <LabelWrapper\r\n      sizeValue={size}\r\n      color={color}\r\n      weight={weight}\r\n      align={align}\r\n      {...others}\r\n    >\r\n      {loading && '...'}\r\n      {!loading && children}\r\n    </LabelWrapper>\r\n  )\r\n}\r\n","export * from './Assets'\r\nexport * from './BackLink'\r\nexport * from './ContentView'\r\nexport * from './Footer'\r\nexport * from './Header'\r\nexport * from './Helmet'\r\nexport * from './Icons'\r\nexport * from './Layout'\r\nexport * from './Loaders'\r\nexport * from './Logo'\r\nexport * from './PoolStatusFilter'\r\nexport * from './ThemeSwitch'\r\nexport * from './ToolCard'\r\nexport * from './WebFontLoader'\r\nexport * from './UIElements'\r\nexport * from './ChainHeader'\r\nexport * from './BalanceView'\r\nexport * from './WalletDrawer'\r\nexport * from './Modals'\r\nexport * from './NetworkStatus'\r\nexport * from './Refresh'\r\nexport * from './GlobalStats'\r\nexport * from './GlobalChart'\r\nexport * from './Tx'\r\nexport * from './Popover'\r\nexport * from './PoolStats'\r\nexport * from './PoolChart'\r\nexport * from './CurrencySelector'\r\nexport * from './Link'\r\nexport * from './Panel'\r\nexport * from './SettingsOverlay'\r\n"],"sourceRoot":""}
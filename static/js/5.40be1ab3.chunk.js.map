{"version":3,"sources":["hooks/useNetworkFee.ts","views/Swap/Swap.style.ts","views/Swap/Swap.tsx","views/Swap/utils.ts","views/Swap/index.ts"],"names":["useNetworkFee","useState","networkFee","setNetworkFee","useEffect","a","feeStr","multichain","getFees","feeValue","Amount","fromBaseAmount","fastest","amount","toFixed","console","log","getFeeValue","Container","styled","Panel","palette","ContentPanel","div","media","sm","ToolContainer","SliderWrapper","SwitchPair","FormItem","FormLabel","Label","attrs","weight","ConfirmButtonContainer","ConfirmModalContent","SwapInfo","HeaderContent","HeaderActions","SwapPage","inputAsset","outputAsset","history","useHistory","wallet","useWallet","useMidgard","pools","poolLoading","slippageTolerance","useApp","poolAssets","useMemo","assets","map","pool","asset","push","Asset","RUNE","inputAssets","getWalletAssets","filter","find","poolAsset","eq","chain","BNBChain","fromAssetAmount","inputAmount","setInputAmount","percent","setPercent","recipient","setRecipient","visibleConfirmModal","setVisibleConfirmModal","swap","inputAssetAmount","AssetAmount","Swap","error","outputAmount","slipPercent","slip","Percent","rate","ticker","price","toFixedInverted","minReceive","minOutputAmount","inputAssetPriceInUSD","Price","baseAsset","priceAmount","outputAssetPriceInUSD","address","getWalletAddressByChain","inputAssetBalance","getAssetBalance","handleChangeRecipient","useCallback","e","addr","target","value","handleSelectInputAsset","input","getSwapRoute","handleSelectOutputAsset","output","handleSwitchPair","handleChangeInputAmount","gt","mul","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleConfirm","txHash","txURL","bnb","getClient","getExplorerTxUrl","Notification","type","message","description","btn","href","rel","duration","handleCancel","handleSwap","hasInSufficientFee","isValidSwap","isValid","isValidSlip","isSlipValid","renderConfirmModalContent","title","toUpperCase","isRUNE","content","to","getPoolDetailRouteFromAsset","typevalue","fixedWidth","round","balance","onChange","onSelect","onMax","usdPrice","withLabel","onClick","SwapOutlined","inputProps","disabled","sizevalue","placeholder","visible","onOk","onCancel","SwapView","swapPair","pair","split","length","fromAssetString","getSwapPair","useParams"],"mappings":"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","file":"static/js/5.40be1ab3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nimport { Amount } from 'multichain-sdk'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nconst useNetworkFee = (): string => {\r\n  const [networkFee, setNetworkFee] = useState('')\r\n\r\n  useEffect(() => {\r\n    const getFeeValue = async () => {\r\n      let feeStr = ''\r\n\r\n      setNetworkFee('...')\r\n      try {\r\n        const feeValue = await multichain.getFees()\r\n        feeStr = Amount.fromBaseAmount(feeValue.fastest.amount(), 8).toFixed(8)\r\n      } catch (error) {\r\n        console.log('quote fee error', error)\r\n      }\r\n\r\n      setNetworkFee(`${feeStr} BNB`)\r\n    }\r\n\r\n    getFeeValue()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return networkFee\r\n}\r\n\r\nexport default useNetworkFee\r\n","import { Label, Panel } from 'components'\r\nimport styled from 'styled-components/macro'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport const Container = styled(Panel)`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  background: ${palette('background', 0)};\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-top: 0px;\r\n\r\n  border-radius: 14px;\r\n  border: 1px solid ${palette('gray', 0)};\r\n`\r\n\r\nexport const ContentPanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n\r\n  padding: 16px 8px 8px 8px;\r\n\r\n  ${media.sm`\r\n    padding: 16px 12px 4px 12px;\r\n  `}\r\n`\r\n\r\nexport const ToolContainer = styled.div`\r\n  display: flex;\r\n\r\n  height: 80px;\r\n`\r\n\r\nexport const SliderWrapper = styled.div`\r\n  width: 260px;\r\n`\r\n\r\nexport const SwitchPair = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1;\r\n\r\n  svg {\r\n    width: 24px;\r\n    height: 24px;\r\n    color: ${palette('primary', 0)};\r\n    transform: rotate(90deg);\r\n  }\r\n`\r\n\r\nexport const PoolSelect = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  margin: 24px 0;\r\n`\r\n\r\nexport const FormItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 16px 0;\r\n`\r\n\r\nexport const FormLabel = styled(Label).attrs({\r\n  weight: 'bold',\r\n})`\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const ConfirmButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 0 2%;\r\n\r\n  margin-top: 14px;\r\n\r\n  button {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nexport const ConfirmModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n`\r\n\r\nexport const SwapInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin-top: 14px;\r\n\r\n  border: 1px solid ${palette('gray', 0)};\r\n`\r\n\r\nexport const HeaderContent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex: 1;\r\n\r\n  padding: 0 20px;\r\n`\r\n\r\nexport const HeaderActions = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { SwapOutlined } from '@ant-design/icons'\r\nimport { BNBChain } from '@xchainjs/xchain-util'\r\nimport {\r\n  ContentTitle,\r\n  Helmet,\r\n  AssetInputCard,\r\n  Slider,\r\n  Input,\r\n  ConfirmModal,\r\n  Information,\r\n  Notification,\r\n  IconButton,\r\n  Button,\r\n  FancyButton,\r\n  SettingsOverlay,\r\n} from 'components'\r\nimport {\r\n  getWalletAssets,\r\n  Amount,\r\n  Asset,\r\n  AssetAmount,\r\n  getAssetBalance,\r\n  getWalletAddressByChain,\r\n  Swap,\r\n  Percent,\r\n  Price,\r\n} from 'multichain-sdk'\r\n\r\nimport { useApp } from 'redux/app/hooks'\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\nimport { useWallet } from 'redux/wallet/hooks'\r\n\r\nimport useNetworkFee from 'hooks/useNetworkFee'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nimport { getSwapRoute, getPoolDetailRouteFromAsset } from 'settings/constants'\r\n\r\nimport * as Styled from './Swap.style'\r\nimport { Pair } from './types'\r\nimport { getSwapPair } from './utils'\r\n\r\nconst SwapView = () => {\r\n  const { pair } = useParams<{ pair: string }>()\r\n\r\n  const swapPair = getSwapPair(pair)\r\n\r\n  if (swapPair) {\r\n    const { inputAsset, outputAsset } = swapPair\r\n    return <SwapPage inputAsset={inputAsset} outputAsset={outputAsset} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst SwapPage = ({ inputAsset, outputAsset }: Pair) => {\r\n  const history = useHistory()\r\n  const { wallet } = useWallet()\r\n  const { pools, poolLoading } = useMidgard()\r\n  const { slippageTolerance } = useApp()\r\n\r\n  const poolAssets = useMemo(() => {\r\n    const assets = pools.map((pool) => pool.asset)\r\n    assets.push(Asset.RUNE())\r\n\r\n    return assets\r\n  }, [pools])\r\n  const inputAssets = useMemo(() => {\r\n    if (wallet) {\r\n      const walletAssets = getWalletAssets(wallet)\r\n\r\n      return walletAssets.filter((asset: Asset) =>\r\n        poolAssets.find((poolAsset) => poolAsset.eq(asset)),\r\n      )\r\n    }\r\n\r\n    return poolAssets.filter((poolAsset) => poolAsset.chain === BNBChain)\r\n  }, [wallet, poolAssets])\r\n\r\n  const [inputAmount, setInputAmount] = useState<Amount>(\r\n    Amount.fromAssetAmount(0, 8),\r\n  )\r\n  const [percent, setPercent] = useState(0)\r\n  const [recipient, setRecipient] = useState('')\r\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\r\n  const networkFee = useNetworkFee()\r\n\r\n  const swap: Swap | null = useMemo(() => {\r\n    if (poolLoading) return null\r\n\r\n    try {\r\n      const inputAssetAmount = new AssetAmount(inputAsset, inputAmount)\r\n      return new Swap(\r\n        inputAsset,\r\n        outputAsset,\r\n        pools,\r\n        inputAssetAmount,\r\n        slippageTolerance,\r\n      )\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n\r\n    return null\r\n  }, [\r\n    inputAsset,\r\n    outputAsset,\r\n    pools,\r\n    inputAmount,\r\n    slippageTolerance,\r\n    poolLoading,\r\n  ])\r\n  const outputAmount: Amount = useMemo(() => {\r\n    if (swap) {\r\n      return swap.outputAmount.amount\r\n    }\r\n\r\n    return Amount.fromAssetAmount(0, 8)\r\n  }, [swap])\r\n\r\n  const slipPercent: Percent = useMemo(\r\n    () => (swap ? swap.slip : new Percent(0)),\r\n    [swap],\r\n  )\r\n\r\n  const rate: string = useMemo(\r\n    () =>\r\n      swap\r\n        ? `1 ${swap.inputAsset.ticker} = ${swap.price.toFixedInverted(3)} ${\r\n            swap.outputAsset.ticker\r\n          }`\r\n        : '',\r\n    [swap],\r\n  )\r\n\r\n  const minReceive: Amount = useMemo(\r\n    () => (swap ? swap.minOutputAmount : Amount.fromAssetAmount(0, 8)),\r\n    [swap],\r\n  )\r\n\r\n  const inputAssetPriceInUSD = useMemo(\r\n    () =>\r\n      new Price({\r\n        baseAsset: inputAsset,\r\n        pools,\r\n        priceAmount: inputAmount,\r\n      }),\r\n    [inputAsset, inputAmount, pools],\r\n  )\r\n\r\n  const outputAssetPriceInUSD = useMemo(\r\n    () =>\r\n      new Price({\r\n        baseAsset: outputAsset,\r\n        pools,\r\n        priceAmount: outputAmount,\r\n      }),\r\n    [outputAsset, outputAmount, pools],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (wallet) {\r\n      const address = getWalletAddressByChain(wallet, outputAsset.chain)\r\n      setRecipient(address || '')\r\n    }\r\n  }, [wallet, outputAsset])\r\n\r\n  const inputAssetBalance: Amount = useMemo(() => {\r\n    if (wallet) {\r\n      return getAssetBalance(inputAsset, wallet).amount\r\n    }\r\n\r\n    // allow max amount if wallet is not connected\r\n    return Amount.fromAssetAmount(10 ** 3, 8)\r\n  }, [inputAsset, wallet])\r\n\r\n  const handleChangeRecipient = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const addr = e.target.value\r\n      setRecipient(addr)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const handleSelectInputAsset = useCallback(\r\n    (input: Asset) => {\r\n      history.push(getSwapRoute(input, outputAsset))\r\n    },\r\n    [history, outputAsset],\r\n  )\r\n\r\n  const handleSelectOutputAsset = useCallback(\r\n    (output: Asset) => {\r\n      history.push(getSwapRoute(inputAsset, output))\r\n    },\r\n    [history, inputAsset],\r\n  )\r\n\r\n  const handleSwitchPair = useCallback(() => {\r\n    history.push(getSwapRoute(outputAsset, inputAsset))\r\n  }, [history, inputAsset, outputAsset])\r\n\r\n  const handleChangeInputAmount = useCallback(\r\n    (amount: Amount) => {\r\n      if (amount.gt(inputAssetBalance)) {\r\n        setInputAmount(inputAssetBalance)\r\n        setPercent(100)\r\n      } else {\r\n        setInputAmount(amount)\r\n        setPercent(\r\n          amount.div(inputAssetBalance).mul(100).assetAmount.toNumber(),\r\n        )\r\n      }\r\n    },\r\n    [inputAssetBalance],\r\n  )\r\n\r\n  const handleChangePercent = useCallback(\r\n    (p: number) => {\r\n      setPercent(p)\r\n      const newAmount = inputAssetBalance.mul(p).div(100)\r\n      setInputAmount(newAmount)\r\n    },\r\n    [inputAssetBalance],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    handleChangePercent(100)\r\n  }, [handleChangePercent])\r\n\r\n  const handleConfirm = useCallback(async () => {\r\n    setVisibleConfirmModal(false)\r\n\r\n    if (wallet && swap) {\r\n      const txHash = await multichain.swap(swap, recipient)\r\n\r\n      const txURL = multichain.bnb.getClient().getExplorerTxUrl(txHash)\r\n\r\n      Notification({\r\n        type: 'open',\r\n        message: 'View Swap Tx.',\r\n        description: 'Transaction sent successfully!',\r\n        btn: (\r\n          <a href={txURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            View Transaction\r\n          </a>\r\n        ),\r\n        duration: 20,\r\n      })\r\n      console.log('txhash', txHash)\r\n    }\r\n  }, [wallet, swap, recipient])\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setVisibleConfirmModal(false)\r\n  }, [])\r\n\r\n  const handleSwap = useCallback(() => {\r\n    if (wallet && swap) {\r\n      if (swap.hasInSufficientFee) {\r\n        Notification({\r\n          type: 'error',\r\n          message: 'Swap Insufficient Fee',\r\n          description: 'Input amount is not enough to cover the fee',\r\n        })\r\n        return\r\n      }\r\n\r\n      setVisibleConfirmModal(true)\r\n    } else {\r\n      Notification({\r\n        type: 'error',\r\n        message: 'Wallet Not Found',\r\n        description: 'Please connect wallet',\r\n      })\r\n    }\r\n  }, [wallet, swap])\r\n\r\n  const isValidSwap = useMemo(() => swap?.isValid() ?? false, [swap])\r\n  const isValidSlip = useMemo(() => swap?.isSlipValid() ?? false, [swap])\r\n\r\n  const renderConfirmModalContent = useMemo(() => {\r\n    return (\r\n      <Styled.ConfirmModalContent>\r\n        <Information\r\n          title=\"Send\"\r\n          description={`${inputAmount.toFixed()} ${inputAsset.ticker.toUpperCase()}`}\r\n        />\r\n        <Information\r\n          title=\"Receive\"\r\n          description={`${outputAmount.toFixed()} ${outputAsset.ticker.toUpperCase()}`}\r\n        />\r\n        <Information\r\n          title=\"Slip\"\r\n          description={slipPercent.toFixed(2)}\r\n          error={isValidSlip}\r\n        />\r\n        <Information\r\n          title=\"Minimum Received\"\r\n          description={minReceive.toFixed(2)}\r\n        />\r\n        {!!recipient && (\r\n          <Information title=\"Recipient\" description={recipient} />\r\n        )}\r\n      </Styled.ConfirmModalContent>\r\n    )\r\n  }, [\r\n    inputAmount,\r\n    outputAmount,\r\n    inputAsset,\r\n    outputAsset,\r\n    recipient,\r\n    slipPercent,\r\n    isValidSlip,\r\n    minReceive,\r\n  ])\r\n\r\n  const title = useMemo(\r\n    () => `Swap ${inputAsset.ticker} >> ${outputAsset.ticker}`,\r\n    [inputAsset, outputAsset],\r\n  )\r\n\r\n  const poolAsset = useMemo(\r\n    () => (inputAsset.isRUNE() ? outputAsset : inputAsset),\r\n    [inputAsset, outputAsset],\r\n  )\r\n\r\n  return (\r\n    <Styled.Container>\r\n      <Helmet title={title} content={title} />\r\n      <ContentTitle>\r\n        <Styled.HeaderContent>\r\n          <div>{title}</div>\r\n          <Styled.HeaderActions>\r\n            <Link to={getPoolDetailRouteFromAsset(poolAsset)}>\r\n              <Button typevalue=\"outline\" fixedWidth={false} round>\r\n                Pool\r\n              </Button>\r\n            </Link>\r\n            <SettingsOverlay />\r\n          </Styled.HeaderActions>\r\n        </Styled.HeaderContent>\r\n      </ContentTitle>\r\n      <Styled.ContentPanel>\r\n        <AssetInputCard\r\n          title=\"send\"\r\n          asset={inputAsset}\r\n          assets={inputAssets}\r\n          amount={inputAmount}\r\n          balance={inputAssetBalance}\r\n          onChange={handleChangeInputAmount}\r\n          onSelect={handleSelectInputAsset}\r\n          onMax={handleSelectMax}\r\n          usdPrice={inputAssetPriceInUSD}\r\n        />\r\n        <Styled.ToolContainer>\r\n          <Styled.SliderWrapper>\r\n            <Slider value={percent} onChange={handleChangePercent} withLabel />\r\n          </Styled.SliderWrapper>\r\n          <Styled.SwitchPair>\r\n            <IconButton onClick={handleSwitchPair}>\r\n              <SwapOutlined />\r\n            </IconButton>\r\n          </Styled.SwitchPair>\r\n        </Styled.ToolContainer>\r\n        <AssetInputCard\r\n          title=\"receive\"\r\n          asset={outputAsset}\r\n          assets={poolAssets}\r\n          amount={outputAmount}\r\n          onSelect={handleSelectOutputAsset}\r\n          inputProps={{ disabled: true }}\r\n          usdPrice={outputAssetPriceInUSD}\r\n        />\r\n        <Styled.FormItem>\r\n          <Styled.FormLabel>Recipient</Styled.FormLabel>\r\n          <Input\r\n            typevalue=\"ghost\"\r\n            sizevalue=\"big\"\r\n            value={recipient}\r\n            onChange={handleChangeRecipient}\r\n            placeholder=\"Recipient\"\r\n          />\r\n        </Styled.FormItem>\r\n\r\n        <Styled.SwapInfo>\r\n          <Information title=\"Rate\" description={rate} />\r\n          <Information\r\n            title=\"Slip\"\r\n            description={slipPercent.toFixed(2)}\r\n            error={!isValidSlip}\r\n          />\r\n          <Information\r\n            title=\"Minimum Received\"\r\n            description={minReceive.toFixed(2)}\r\n          />\r\n          <Information title=\"Fee\" description={networkFee} />\r\n        </Styled.SwapInfo>\r\n\r\n        <Styled.ConfirmButtonContainer>\r\n          <FancyButton onClick={handleSwap} error={!isValidSwap}>\r\n            Swap\r\n          </FancyButton>\r\n        </Styled.ConfirmButtonContainer>\r\n      </Styled.ContentPanel>\r\n\r\n      <ConfirmModal\r\n        visible={visibleConfirmModal}\r\n        onOk={handleConfirm}\r\n        onCancel={handleCancel}\r\n      >\r\n        {renderConfirmModalContent}\r\n      </ConfirmModal>\r\n    </Styled.Container>\r\n  )\r\n}\r\n\r\nexport default SwapView\r\n","import { Asset } from 'multichain-sdk'\r\n\r\nimport { Pair } from './types'\r\n\r\nexport const getSwapPair = (pair: string): Pair | null => {\r\n  if (!pair || pair.split('_').length !== 2) {\r\n    return null\r\n  }\r\n\r\n  const input = pair.split('_')?.[0]\r\n  const output = pair.split('_')?.[1]\r\n\r\n  if (!input || !output) return null\r\n\r\n  const inputAsset = Asset.fromAssetString(input)\r\n  const outputAsset = Asset.fromAssetString(output)\r\n\r\n  if (!inputAsset || !outputAsset) return null\r\n\r\n  return {\r\n    inputAsset,\r\n    outputAsset,\r\n  }\r\n}\r\n","import Swap from './Swap'\r\n\r\nexport default Swap\r\n"],"sourceRoot":""}
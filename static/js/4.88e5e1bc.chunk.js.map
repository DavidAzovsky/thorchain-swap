{"version":3,"sources":["hooks/useNetworkFee.ts","views/Send/Send.tsx","views/Send/Send.style.ts","views/Send/index.ts"],"names":["useNetworkFee","useState","networkFee","setNetworkFee","useEffect","a","feeStr","multichain","getFees","feeValue","Amount","fromBaseAmount","fastest","amount","toFixed","console","log","getFeeValue","SendMode","Container","styled","Panel","palette","ContentPanel","div","media","sm","PoolSelect","FormItem","FormLabel","Label","attrs","weight","ConfirmModalContent","MemoTypes","ConfirmButtonContainer","Send","sendAsset","wallet","history","useHistory","pools","useMidgard","asset","useMemo","symbol","poolAssets","assets","map","pool","push","Asset","RUNE","NORMAL","sendMode","setSendMode","isExpertMode","EXPERT","fromAssetAmount","sendAmount","setSendAmount","percent","setPercent","recipientAddress","setRecipientAddress","poolAddress","setPoolAddress","recipient","memo","setMemo","visibleConfirmModal","setVisibleConfirmModal","outputAsset","setOutputAsset","walletAssets","getWalletAssets","sendAssets","filter","walletAsset","find","poolAsset","eq","assetBalance","getAssetBalance","getPoolAddressByChain","chain","poolAddr","fetchPoolAddress","handleSelectAsset","useCallback","selected","getSendRoute","handleSelectOutputAsset","handleChangeSendAmount","gt","mul","assetAmount","toNumber","handleChangePercent","p","newAmount","handleSelectMax","handleChangeRecipient","e","addr","target","value","handleChangePoolAddress","handleChangeMemo","handleConfirmSend","AssetAmount","transfer","txHash","txURL","bnb","getClient","getExplorerTxUrl","Notification","type","message","description","btn","href","rel","duration","handleCancelSend","handleSend","handleSelectDepositMemo","Memo","depositMemo","handleSelectSwapMemo","address","getWalletAddressByChain","swapMemo","renderConfirmModalContent","title","ticker","toUpperCase","content","balance","onChange","onSelect","onMax","withLabel","size","align","typevalue","sizevalue","placeholder","color","onClick","error","visible","onOk","onCancel","SendView","useParams","useWallet","keystore","fromAssetString"],"mappings":"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","file":"static/js/4.88e5e1bc.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nimport { Amount } from 'multichain-sdk'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nconst useNetworkFee = (): string => {\r\n  const [networkFee, setNetworkFee] = useState('')\r\n\r\n  useEffect(() => {\r\n    const getFeeValue = async () => {\r\n      let feeStr = ''\r\n\r\n      setNetworkFee('...')\r\n      try {\r\n        const feeValue = await multichain.getFees()\r\n        feeStr = Amount.fromBaseAmount(feeValue.fastest.amount(), 8).toFixed(8)\r\n      } catch (error) {\r\n        console.log('quote fee error', error)\r\n      }\r\n\r\n      setNetworkFee(`${feeStr} BNB`)\r\n    }\r\n\r\n    getFeeValue()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return networkFee\r\n}\r\n\r\nexport default useNetworkFee\r\n","import React, { useEffect, useMemo, useState, useCallback } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router'\r\n\r\nimport {\r\n  ContentTitle,\r\n  Helmet,\r\n  AssetInputCard,\r\n  Slider,\r\n  Input,\r\n  FancyButton,\r\n  ConfirmModal,\r\n  Information,\r\n  Notification,\r\n  Button,\r\n  AssetSelect,\r\n  Label,\r\n} from 'components'\r\nimport {\r\n  getWalletAssets,\r\n  Amount,\r\n  Asset,\r\n  getAssetBalance,\r\n  AssetAmount,\r\n  Memo,\r\n  getWalletAddressByChain,\r\n  Wallet,\r\n} from 'multichain-sdk'\r\n\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\nimport { useWallet } from 'redux/wallet/hooks'\r\n\r\nimport useNetworkFee from 'hooks/useNetworkFee'\r\n\r\nimport { multichain } from 'services/multichain'\r\n\r\nimport { getSendRoute } from 'settings/constants'\r\n\r\nimport * as Styled from './Send.style'\r\n\r\nenum SendMode {\r\n  NORMAL,\r\n  EXPERT,\r\n}\r\n\r\nconst SendView = () => {\r\n  const { asset } = useParams<{ asset: string }>()\r\n  const { wallet, keystore } = useWallet()\r\n\r\n  const sendAsset = Asset.fromAssetString(asset)\r\n\r\n  if (!sendAsset) {\r\n    return null\r\n  }\r\n\r\n  if (!wallet || !keystore) {\r\n    return (\r\n      <Styled.Container>\r\n        <Label>Please connect a wallet.</Label>\r\n      </Styled.Container>\r\n    )\r\n  }\r\n\r\n  return <Send sendAsset={sendAsset} wallet={wallet} />\r\n}\r\n\r\nconst Send = ({ sendAsset, wallet }: { sendAsset: Asset; wallet: Wallet }) => {\r\n  const history = useHistory()\r\n  const { pools } = useMidgard()\r\n\r\n  const asset = useMemo(() => sendAsset.symbol, [sendAsset])\r\n\r\n  const poolAssets = useMemo(() => {\r\n    const assets = pools.map((pool) => pool.asset)\r\n    assets.push(Asset.RUNE())\r\n\r\n    return assets\r\n  }, [pools])\r\n\r\n  const [sendMode, setSendMode] = useState(SendMode.NORMAL)\r\n  const isExpertMode = useMemo(() => sendMode === SendMode.EXPERT, [sendMode])\r\n\r\n  const [sendAmount, setSendAmount] = useState<Amount>(\r\n    Amount.fromAssetAmount(0, 8),\r\n  )\r\n  const [percent, setPercent] = useState(0)\r\n  const [recipientAddress, setRecipientAddress] = useState('')\r\n  const [poolAddress, setPoolAddress] = useState('')\r\n\r\n  const recipient = useMemo(\r\n    () => (isExpertMode ? poolAddress : recipientAddress),\r\n    [isExpertMode, poolAddress, recipientAddress],\r\n  )\r\n\r\n  const [memo, setMemo] = useState('')\r\n  const [visibleConfirmModal, setVisibleConfirmModal] = useState(false)\r\n\r\n  const [outputAsset, setOutputAsset] = useState<Asset>(sendAsset)\r\n\r\n  const walletAssets = useMemo(() => getWalletAssets(wallet), [wallet])\r\n\r\n  // filter out non-pool assets from wallet in the expert mode\r\n  const sendAssets = useMemo(() => {\r\n    if (!isExpertMode) return walletAssets\r\n\r\n    return walletAssets.filter((walletAsset) =>\r\n      poolAssets.find((poolAsset) => poolAsset.eq(walletAsset)),\r\n    )\r\n  }, [isExpertMode, walletAssets, poolAssets])\r\n\r\n  const assetBalance: Amount = useMemo(() => {\r\n    if (wallet) {\r\n      return getAssetBalance(sendAsset, wallet).amount\r\n    }\r\n    return Amount.fromAssetAmount(0, 8)\r\n  }, [sendAsset, wallet])\r\n  const networkFee = useNetworkFee()\r\n\r\n  useEffect(() => {\r\n    const fetchPoolAddress = async () => {\r\n      const poolAddr = await multichain.getPoolAddressByChain(sendAsset.chain)\r\n      setPoolAddress(poolAddr)\r\n    }\r\n\r\n    if (isExpertMode) {\r\n      fetchPoolAddress()\r\n    }\r\n  }, [isExpertMode, sendAsset])\r\n\r\n  const handleSelectAsset = useCallback(\r\n    (selected: Asset) => {\r\n      history.push(getSendRoute(selected))\r\n    },\r\n    [history],\r\n  )\r\n\r\n  const handleSelectOutputAsset = useCallback((poolAsset: Asset) => {\r\n    setOutputAsset(poolAsset)\r\n    setMemo('')\r\n  }, [])\r\n\r\n  const handleChangeSendAmount = useCallback(\r\n    (amount: Amount) => {\r\n      if (amount.gt(assetBalance)) {\r\n        setSendAmount(assetBalance)\r\n        setPercent(100)\r\n      } else {\r\n        setSendAmount(amount)\r\n        setPercent(amount.div(assetBalance).mul(100).assetAmount.toNumber())\r\n      }\r\n    },\r\n    [assetBalance],\r\n  )\r\n\r\n  const handleChangePercent = useCallback(\r\n    (p: number) => {\r\n      setPercent(p)\r\n      const newAmount = assetBalance.mul(p).div(100)\r\n      setSendAmount(newAmount)\r\n    },\r\n    [assetBalance],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    handleChangePercent(100)\r\n  }, [handleChangePercent])\r\n\r\n  const handleChangeRecipient = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const addr = e.target.value\r\n\r\n      if (addr === 'pool') {\r\n        setSendMode(SendMode.EXPERT)\r\n      } else {\r\n        setSendMode(SendMode.NORMAL)\r\n        setPoolAddress('')\r\n      }\r\n      setRecipientAddress(addr)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const handleChangePoolAddress = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const addr = e.target.value\r\n      setPoolAddress(addr)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const handleChangeMemo = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setMemo(e.target.value)\r\n    },\r\n    [],\r\n  )\r\n\r\n  const handleConfirmSend = useCallback(async () => {\r\n    setVisibleConfirmModal(false)\r\n\r\n    if (sendAsset) {\r\n      const assetAmount = new AssetAmount(sendAsset, sendAmount)\r\n      const txHash = await multichain.transfer({\r\n        assetAmount,\r\n        recipient,\r\n        memo,\r\n      })\r\n\r\n      console.log('txhash', txHash)\r\n\r\n      const txURL = multichain.bnb.getClient().getExplorerTxUrl(txHash)\r\n\r\n      Notification({\r\n        type: 'open',\r\n        message: 'View Send Tx.',\r\n        description: 'Transaction sent successfully!',\r\n        btn: (\r\n          <a href={txURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            View Transaction\r\n          </a>\r\n        ),\r\n        duration: 20,\r\n      })\r\n    }\r\n  }, [sendAsset, sendAmount, recipient, memo])\r\n\r\n  const handleCancelSend = useCallback(() => {\r\n    setVisibleConfirmModal(false)\r\n  }, [])\r\n\r\n  const handleSend = useCallback(() => {\r\n    setVisibleConfirmModal(true)\r\n  }, [])\r\n\r\n  const handleSelectDepositMemo = useCallback(() => {\r\n    setMemo(Memo.depositMemo(sendAsset))\r\n  }, [sendAsset])\r\n\r\n  const handleSelectSwapMemo = useCallback(() => {\r\n    if (outputAsset) {\r\n      const address = getWalletAddressByChain(wallet, outputAsset.chain) || ''\r\n      setMemo(Memo.swapMemo(outputAsset, address))\r\n    }\r\n  }, [outputAsset, wallet])\r\n\r\n  const renderConfirmModalContent = useMemo(() => {\r\n    return (\r\n      <Styled.ConfirmModalContent>\r\n        <Information\r\n          title=\"Send\"\r\n          description={sendAsset.ticker.toUpperCase()}\r\n        />\r\n        <Information title=\"Recipient\" description={recipientAddress} />\r\n        <Information title=\"Memo\" description={memo} />\r\n      </Styled.ConfirmModalContent>\r\n    )\r\n  }, [sendAsset, memo, recipientAddress])\r\n\r\n  return (\r\n    <Styled.Container>\r\n      <Helmet\r\n        title={`Send ${sendAsset.ticker}`}\r\n        content={`Send ${sendAsset.ticker}`}\r\n      />\r\n      <ContentTitle>Send {asset}</ContentTitle>\r\n      <Styled.ContentPanel>\r\n        <AssetInputCard\r\n          title=\"send\"\r\n          asset={sendAsset}\r\n          assets={sendAssets}\r\n          amount={sendAmount}\r\n          balance={assetBalance}\r\n          onChange={handleChangeSendAmount}\r\n          onSelect={handleSelectAsset}\r\n          onMax={handleSelectMax}\r\n        />\r\n        <Slider value={percent} onChange={handleChangePercent} withLabel />\r\n\r\n        {isExpertMode && (\r\n          <Styled.PoolSelect>\r\n            <Label size=\"big\" align=\"center\">\r\n              Output Asset\r\n            </Label>\r\n            <AssetSelect\r\n              asset={outputAsset}\r\n              assets={poolAssets}\r\n              onSelect={handleSelectOutputAsset}\r\n            />\r\n          </Styled.PoolSelect>\r\n        )}\r\n        <Styled.FormItem>\r\n          <Styled.FormLabel>Recipient</Styled.FormLabel>\r\n          <Input\r\n            typevalue=\"ghost\"\r\n            sizevalue=\"big\"\r\n            value={recipientAddress}\r\n            onChange={handleChangeRecipient}\r\n            placeholder=\"Recipient\"\r\n          />\r\n        </Styled.FormItem>\r\n\r\n        {isExpertMode && (\r\n          <Styled.FormItem>\r\n            <Styled.FormLabel>Pool Address</Styled.FormLabel>\r\n            <Input\r\n              typevalue=\"ghost\"\r\n              sizevalue=\"big\"\r\n              value={poolAddress}\r\n              onChange={handleChangePoolAddress}\r\n              placeholder=\"Pool Address\"\r\n            />\r\n          </Styled.FormItem>\r\n        )}\r\n\r\n        {isExpertMode && (\r\n          <Styled.FormItem>\r\n            <Styled.FormLabel>Select Memo Type</Styled.FormLabel>\r\n            <Styled.MemoTypes>\r\n              <Button\r\n                sizevalue=\"small\"\r\n                color=\"primary\"\r\n                typevalue=\"outline\"\r\n                onClick={handleSelectDepositMemo}\r\n              >\r\n                Deposit\r\n              </Button>\r\n              <Button\r\n                sizevalue=\"small\"\r\n                color=\"primary\"\r\n                typevalue=\"outline\"\r\n                onClick={handleSelectSwapMemo}\r\n              >\r\n                Swap\r\n              </Button>\r\n            </Styled.MemoTypes>\r\n          </Styled.FormItem>\r\n        )}\r\n        <Styled.FormItem>\r\n          <Styled.FormLabel>Memo</Styled.FormLabel>\r\n          <Input\r\n            typevalue=\"ghost\"\r\n            sizevalue=\"big\"\r\n            value={memo}\r\n            onChange={handleChangeMemo}\r\n            placeholder=\"Memo\"\r\n          />\r\n        </Styled.FormItem>\r\n\r\n        <Styled.FormItem>\r\n          <Information title=\"Network Fee\" description={networkFee} />\r\n        </Styled.FormItem>\r\n\r\n        <Styled.ConfirmButtonContainer>\r\n          <FancyButton onClick={handleSend} error={false}>\r\n            Send\r\n          </FancyButton>\r\n        </Styled.ConfirmButtonContainer>\r\n      </Styled.ContentPanel>\r\n      <ConfirmModal\r\n        visible={visibleConfirmModal}\r\n        onOk={handleConfirmSend}\r\n        onCancel={handleCancelSend}\r\n      >\r\n        {renderConfirmModalContent}\r\n      </ConfirmModal>\r\n    </Styled.Container>\r\n  )\r\n}\r\n\r\nexport default SendView\r\n","import { Label, Panel } from 'components'\r\nimport styled from 'styled-components/macro'\r\nimport { palette } from 'styled-theme'\r\n\r\nimport { media } from 'helpers/style'\r\n\r\nexport const Container = styled(Panel)`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  background: ${palette('background', 0)};\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-top: 0px;\r\n\r\n  border-radius: 14px;\r\n  border: 1px solid ${palette('gray', 0)};\r\n`\r\n\r\nexport const ContentPanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n\r\n  padding: 16px 8px 8px 8px;\r\n\r\n  ${media.sm`\r\n    padding: 16px 12px 4px 12px;\r\n  `}\r\n`\r\n\r\nexport const PoolSelect = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  padding: 8px 8px;\r\n`\r\n\r\nexport const FormItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 8px 0;\r\n`\r\n\r\nexport const FormLabel = styled(Label).attrs({\r\n  weight: 'bold',\r\n})`\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const ConfirmModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n`\r\n\r\nexport const MemoTypes = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  width: 130px;\r\n`\r\n\r\nexport const ConfirmButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 0 2%;\r\n\r\n  margin-top: 14px;\r\n\r\n  button {\r\n    flex: 1;\r\n  }\r\n`\r\n","import Send from './Send'\r\n\r\nexport default Send\r\n"],"sourceRoot":""}
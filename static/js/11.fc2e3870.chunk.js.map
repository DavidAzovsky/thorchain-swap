{"version":3,"sources":["views/Statistics/StatisticsView.tsx","views/Statistics/index.ts"],"names":["StatisticsView","useMidgard","stats","networkData","runeToCurrency","useGlobalState","bondingAPYLabel","Percent","bondingAPY","toFixed","liquidityAPYLabel","liquidityAPY","swapVolume","Amount","fromMidgard","addLiquidityVolume","withdrawVolume","swapCount","fromNormalAmount","addLiquidityCount","withdrawCount","totalVolume","add","totalTx","statsData","React","useMemo","title","value","toCurrencyFormat","runeDepth","runePriceUSD","uniqueSwapperCount","swapCount24h","swapCount30d","monthlyActiveUsers","dailyActiveUsers","totalPooledRune","totalReserve","activeNodeCount","standbyNodeCount","nextChurnHeight","gutter","content","map","statProps","index","xs","span","sm","md","lg","xl"],"mappings":"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","file":"static/js/11.fc2e3870.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { Row, Col } from 'antd'\r\nimport { Helmet, StatsCard } from 'components'\r\nimport { Percent, Amount } from 'multichain-sdk'\r\n\r\nimport { useGlobalState } from 'redux/hooks'\r\nimport { useMidgard } from 'redux/midgard/hooks'\r\n\r\nconst StatisticsView: React.FC = (): JSX.Element => {\r\n  const { stats, networkData } = useMidgard()\r\n  const { runeToCurrency } = useGlobalState()\r\n\r\n  const bondingAPYLabel = new Percent(networkData?.bondingAPY ?? 0).toFixed(2)\r\n  const liquidityAPYLabel = new Percent(networkData?.liquidityAPY ?? 0).toFixed(\r\n    2,\r\n  )\r\n\r\n  const swapVolume = Amount.fromMidgard(stats?.swapVolume)\r\n  const addLiquidityVolume = Amount.fromMidgard(stats?.addLiquidityVolume)\r\n  const withdrawVolume = Amount.fromMidgard(stats?.withdrawVolume)\r\n\r\n  const swapCount = Amount.fromNormalAmount(stats?.swapCount)\r\n  const addLiquidityCount = Amount.fromNormalAmount(stats?.addLiquidityCount)\r\n  const withdrawCount = Amount.fromNormalAmount(stats?.withdrawCount)\r\n\r\n  const totalVolume = swapVolume.add(addLiquidityVolume).add(withdrawVolume)\r\n  const totalTx = swapCount.add(addLiquidityCount).add(withdrawCount)\r\n\r\n  const statsData = React.useMemo(() => {\r\n    return [\r\n      {\r\n        title: 'Total Volume',\r\n        value: runeToCurrency(totalVolume).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Total Tx',\r\n        value: totalTx.toFixed(),\r\n      },\r\n      {\r\n        title: 'Total Rune Depth',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(stats?.runeDepth),\r\n        ).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Rune Price in USD',\r\n        value: `$${Amount.fromNormalAmount(stats?.runePriceUSD).toFixed(4)}`,\r\n      },\r\n      {\r\n        title: 'Swap Count',\r\n        value: Amount.fromNormalAmount(stats?.swapCount).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Unique Swapper Count',\r\n        value: Amount.fromMidgard(stats?.uniqueSwapperCount).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Swap Count 24H',\r\n        value: Amount.fromNormalAmount(stats?.swapCount24h).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Swap Count 30D',\r\n        value: Amount.fromNormalAmount(stats?.swapCount30d).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Swap Volume',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(stats?.swapVolume),\r\n        ).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Add Liquidity Count',\r\n        value: Amount.fromNormalAmount(stats?.addLiquidityCount).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Add Liquidity Volume',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(stats?.addLiquidityVolume),\r\n        ).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Withdraw Count',\r\n        value: Amount.fromNormalAmount(stats?.withdrawCount).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Withdraw Volume',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(stats?.withdrawVolume),\r\n        ).toCurrencyFormat(0),\r\n      },\r\n      {\r\n        title: 'Monthly Active Users',\r\n        value: Amount.fromNormalAmount(stats?.monthlyActiveUsers).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Daily Active Users',\r\n        value: Amount.fromNormalAmount(stats?.dailyActiveUsers).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Total Pooled',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(networkData?.totalPooledRune),\r\n        ).toCurrencyFormat(2),\r\n      },\r\n      {\r\n        title: 'Total Reserve',\r\n        value: runeToCurrency(\r\n          Amount.fromMidgard(networkData?.totalReserve),\r\n        ).toCurrencyFormat(2),\r\n      },\r\n      {\r\n        title: 'Active Node Count',\r\n        value: Amount.fromNormalAmount(networkData?.activeNodeCount).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Standby Node Count',\r\n        value: Amount.fromNormalAmount(networkData?.standbyNodeCount).toFixed(\r\n          0,\r\n        ),\r\n      },\r\n      {\r\n        title: 'Next Churn Height',\r\n        value: Amount.fromNormalAmount(networkData?.nextChurnHeight).toFixed(0),\r\n      },\r\n      {\r\n        title: 'Bonding APY',\r\n        value: bondingAPYLabel,\r\n      },\r\n      {\r\n        title: 'Liquidity APY',\r\n        value: liquidityAPYLabel,\r\n      },\r\n    ]\r\n  }, [\r\n    stats,\r\n    networkData,\r\n    bondingAPYLabel,\r\n    liquidityAPYLabel,\r\n    totalVolume,\r\n    totalTx,\r\n    runeToCurrency,\r\n  ])\r\n\r\n  return (\r\n    <Row gutter={[16, 16]}>\r\n      <Helmet title=\"Stats\" content=\"Stats\" />\r\n      {statsData.map((statProps, index) => {\r\n        return (\r\n          <Col\r\n            key={index}\r\n            xs={{ span: 24 }}\r\n            sm={{ span: 12 }}\r\n            md={{ span: 8 }}\r\n            lg={{ span: 8 }}\r\n            xl={{ span: 4 }}\r\n          >\r\n            <StatsCard {...statProps} />\r\n          </Col>\r\n        )\r\n      })}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default StatisticsView\r\n","import StatisticsView from './StatisticsView'\r\n\r\nexport default StatisticsView\r\n"],"sourceRoot":""}